
c:/Users/Vishal/Documents/CTDProjects/LAB19/target/3.0.0/argon/LAB19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003a70  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7a90  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e558  000d7a94  0001e558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000230  2003e5c0  2003e5c0  0002e5c0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7afc  000d7afc  00027afc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7b24  000d7b24  00027b24  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001da246  00000000  00000000  00027b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001aa82  00000000  00000000  00201d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003aa6c  00000000  00000000  0021c7f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002de0  00000000  00000000  0025725c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00009350  00000000  00000000  0025a03c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003f96e  00000000  00000000  0026338c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00048032  00000000  00000000  002a2cfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0012830b  00000000  00000000  002ead2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000082ec  00000000  00000000  00413038  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 fe67 	bl	d6d04 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 fe6f 	bl	d6d20 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e558 	.word	0x2003e558
   d404c:	000d7a94 	.word	0x000d7a94
   d4050:	2003e5c0 	.word	0x2003e5c0
   d4054:	2003e5c0 	.word	0x2003e5c0
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f001 fe9f 	bl	d5da4 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d7a68 	.word	0x000d7a68
   d4080:	000d7a8c 	.word	0x000d7a8c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b826 	b.w	d40d4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f86b 	bl	d4164 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f001 be49 	b.w	d5d28 <_post_loop>

000d4096 <_Znaj>:
   d4096:	f001 bc11 	b.w	d58bc <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f001 bc17 	b.w	d58cc <free>
	...

000d40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a2:	4a03      	ldr	r2, [pc, #12]	; (d40b0 <__cxa_pure_virtual+0x10>)
   d40a4:	2100      	movs	r1, #0
   d40a6:	200c      	movs	r0, #12
   d40a8:	f001 fb6c 	bl	d5784 <panic_>
  while (1);
   d40ac:	e7fe      	b.n	d40ac <__cxa_pure_virtual+0xc>
   d40ae:	bf00      	nop
   d40b0:	000d54f5 	.word	0x000d54f5

000d40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b4:	7800      	ldrb	r0, [r0, #0]
   d40b6:	fab0 f080 	clz	r0, r0
   d40ba:	0940      	lsrs	r0, r0, #5
   d40bc:	4770      	bx	lr

000d40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40be:	2301      	movs	r3, #1
   d40c0:	7003      	strb	r3, [r0, #0]
   d40c2:	4770      	bx	lr

000d40c4 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40c4:	b510      	push	{r4, lr}
   d40c6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d40c8:	6800      	ldr	r0, [r0, #0]
   d40ca:	b108      	cbz	r0, d40d0 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40cc:	f001 fbfe 	bl	d58cc <free>
class SystemClass {
   d40d0:	4620      	mov	r0, r4
   d40d2:	bd10      	pop	{r4, pc}

000d40d4 <setup>:

OledWingAdafruit display;
WatchDog wd;

void setup()
{
   d40d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  pinMode(D5, INPUT);
  wd.initialize(5000);

  display.setup();
   d40d6:	4c1f      	ldr	r4, [pc, #124]	; (d4154 <setup+0x80>)
  pinMode(D5, INPUT);
   d40d8:	2100      	movs	r1, #0
   d40da:	2005      	movs	r0, #5
   d40dc:	f002 f98e 	bl	d63fc <pinMode>
  wd.initialize(5000);
   d40e0:	f241 3188 	movw	r1, #5000	; 0x1388
   d40e4:	481c      	ldr	r0, [pc, #112]	; (d4158 <setup+0x84>)
   d40e6:	f000 f877 	bl	d41d8 <_ZN8WatchDog10initializeEm>
  display.setup();
   d40ea:	4620      	mov	r0, r4
   d40ec:	f000 fd02 	bl	d4af4 <_ZN16OledWingAdafruit5setupEv>
  display.clearDisplay();
   d40f0:	4620      	mov	r0, r4
   d40f2:	f000 fec1 	bl	d4e78 <_ZN16Adafruit_SSD130612clearDisplayEv>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d40f6:	2500      	movs	r5, #0
  display.setTextSize(1);
   d40f8:	2101      	movs	r1, #1
   d40fa:	4620      	mov	r0, r4
   d40fc:	f000 fcab 	bl	d4a56 <_ZN12Adafruit_GFX11setTextSizeEh>
   d4100:	f04f 1601 	mov.w	r6, #65537	; 0x10001
        return get_flag(flag) != 0;
    }

    inline int resetReason() const {
        int reason = RESET_REASON_NONE;
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d4104:	462a      	mov	r2, r5
   d4106:	4629      	mov	r1, r5
   d4108:	a801      	add	r0, sp, #4
   d410a:	e9c4 5604 	strd	r5, r6, [r4, #16]
        int reason = RESET_REASON_NONE;
   d410e:	9501      	str	r5, [sp, #4]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d4110:	f001 fa00 	bl	d5514 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d4114:	9b01      	ldr	r3, [sp, #4]
  display.setTextColor(WHITE);
  display.setCursor(0, 0);

  if (System.resetReason() == RESET_REASON_WATCHDOG)
   d4116:	2b3c      	cmp	r3, #60	; 0x3c
  {
    display.clearDisplay();
   d4118:	4620      	mov	r0, r4
  if (System.resetReason() == RESET_REASON_WATCHDOG)
   d411a:	d110      	bne.n	d413e <setup+0x6a>
    display.clearDisplay();
   d411c:	f000 feac 	bl	d4e78 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setTextSize(1);
   d4120:	2101      	movs	r1, #1
   d4122:	4620      	mov	r0, r4
   d4124:	f000 fc97 	bl	d4a56 <_ZN12Adafruit_GFX11setTextSizeEh>
   d4128:	e9c4 5604 	strd	r5, r6, [r4, #16]
    display.setTextColor(WHITE);
    display.setCursor(0, 0);
    display.println("You didn't pet me");
   d412c:	490b      	ldr	r1, [pc, #44]	; (d415c <setup+0x88>)
  {
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(WHITE);
    display.setCursor(0, 0);
    display.println("Normal");
   d412e:	4620      	mov	r0, r4
   d4130:	f001 fd4f 	bl	d5bd2 <_ZN5Print7printlnEPKc>
    display.display();
   d4134:	4620      	mov	r0, r4
   d4136:	f001 f90b 	bl	d5350 <_ZN16Adafruit_SSD13067displayEv>
  }
}
   d413a:	b002      	add	sp, #8
   d413c:	bd70      	pop	{r4, r5, r6, pc}
    display.clearDisplay();
   d413e:	f000 fe9b 	bl	d4e78 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setTextSize(1);
   d4142:	2101      	movs	r1, #1
   d4144:	4620      	mov	r0, r4
   d4146:	f000 fc86 	bl	d4a56 <_ZN12Adafruit_GFX11setTextSizeEh>
   d414a:	e9c4 5604 	strd	r5, r6, [r4, #16]
    display.println("Normal");
   d414e:	4904      	ldr	r1, [pc, #16]	; (d4160 <setup+0x8c>)
   d4150:	e7ed      	b.n	d412e <setup+0x5a>
   d4152:	bf00      	nop
   d4154:	2003e5d0 	.word	0x2003e5d0
   d4158:	2003e640 	.word	0x2003e640
   d415c:	000d6d9c 	.word	0x000d6d9c
   d4160:	000d6dae 	.word	0x000d6dae

000d4164 <loop>:

void loop()
{
   d4164:	b508      	push	{r3, lr}
  if (digitalRead(D5) == HIGH)
   d4166:	2005      	movs	r0, #5
   d4168:	f002 f972 	bl	d6450 <digitalRead>
   d416c:	2801      	cmp	r0, #1
   d416e:	d104      	bne.n	d417a <loop+0x16>
  {
    wd.pet();
  }
   d4170:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    wd.pet();
   d4174:	4801      	ldr	r0, [pc, #4]	; (d417c <loop+0x18>)
   d4176:	f000 b84b 	b.w	d4210 <_ZN8WatchDog3petEv>
   d417a:	bd08      	pop	{r3, pc}
   d417c:	2003e640 	.word	0x2003e640

000d4180 <_GLOBAL__sub_I_SystemMode>:
   d4180:	b538      	push	{r3, r4, r5, lr}
              error_(SYSTEM_ERROR_NONE) {
   d4182:	4c0f      	ldr	r4, [pc, #60]	; (d41c0 <_GLOBAL__sub_I_SystemMode+0x40>)
    SleepResult() {}
   d4184:	4b0f      	ldr	r3, [pc, #60]	; (d41c4 <_GLOBAL__sub_I_SystemMode+0x44>)
   d4186:	60a3      	str	r3, [r4, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4188:	2500      	movs	r5, #0
   d418a:	6025      	str	r5, [r4, #0]
   d418c:	80a5      	strh	r5, [r4, #4]
    SleepResult() {}
   d418e:	71a5      	strb	r5, [r4, #6]
        set_system_mode(mode);
   d4190:	2003      	movs	r0, #3
   d4192:	f001 faff 	bl	d5794 <set_system_mode>
SYSTEM_MODE(MANUAL);
   d4196:	4a0c      	ldr	r2, [pc, #48]	; (d41c8 <_GLOBAL__sub_I_SystemMode+0x48>)
   d4198:	490c      	ldr	r1, [pc, #48]	; (d41cc <_GLOBAL__sub_I_SystemMode+0x4c>)
   d419a:	4620      	mov	r0, r4
OledWingAdafruit display;
   d419c:	4c0c      	ldr	r4, [pc, #48]	; (d41d0 <_GLOBAL__sub_I_SystemMode+0x50>)
SYSTEM_MODE(MANUAL);
   d419e:	f002 f9ab 	bl	d64f8 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
   d41a2:	4629      	mov	r1, r5
   d41a4:	2001      	movs	r0, #1
   d41a6:	f001 fb05 	bl	d57b4 <system_thread_set_state>
OledWingAdafruit display;
   d41aa:	2107      	movs	r1, #7
   d41ac:	4620      	mov	r0, r4
   d41ae:	f000 fc73 	bl	d4a98 <_ZN16OledWingAdafruitC1Ei>
   d41b2:	4620      	mov	r0, r4
   d41b4:	4a04      	ldr	r2, [pc, #16]	; (d41c8 <_GLOBAL__sub_I_SystemMode+0x48>)
   d41b6:	4907      	ldr	r1, [pc, #28]	; (d41d4 <_GLOBAL__sub_I_SystemMode+0x54>)
   d41b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
OledWingAdafruit display;
   d41bc:	f002 b99c 	b.w	d64f8 <__aeabi_atexit>
   d41c0:	2003e5c4 	.word	0x2003e5c4
   d41c4:	ffff0000 	.word	0xffff0000
   d41c8:	2003e5c0 	.word	0x2003e5c0
   d41cc:	000d40c5 	.word	0x000d40c5
   d41d0:	2003e5d0 	.word	0x2003e5d0
   d41d4:	000d4a65 	.word	0x000d4a65

000d41d8 <_ZN8WatchDog10initializeEm>:
#include "WatchDog_WCL.h"

void WatchDog::initialize(uint32_t timeInMilliseconds) {
    *(uint32_t *) WDT_RREN_REG = 0x00000001;
   d41d8:	4b0b      	ldr	r3, [pc, #44]	; (d4208 <_ZN8WatchDog10initializeEm+0x30>)
void WatchDog::initialize(uint32_t timeInMilliseconds) {
   d41da:	b510      	push	{r4, lr}
    *(uint32_t *) WDT_RREN_REG = 0x00000001;
   d41dc:	2401      	movs	r4, #1
   d41de:	601c      	str	r4, [r3, #0]
    *(uint32_t *) WDT_CRV_REG = (uint32_t) (timeInMilliseconds * 32.768);
   d41e0:	4608      	mov	r0, r1
   d41e2:	f002 fad5 	bl	d6790 <__aeabi_ui2d>
   d41e6:	a306      	add	r3, pc, #24	; (adr r3, d4200 <_ZN8WatchDog10initializeEm+0x28>)
   d41e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41ec:	f002 fb4a 	bl	d6884 <__aeabi_dmul>
   d41f0:	f002 fd5a 	bl	d6ca8 <__aeabi_d2uiz>
   d41f4:	4b05      	ldr	r3, [pc, #20]	; (d420c <_ZN8WatchDog10initializeEm+0x34>)
   d41f6:	6018      	str	r0, [r3, #0]
    *(uint32_t *) WDT_REG = 0x00000001;
   d41f8:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
   d41fc:	601c      	str	r4, [r3, #0]
}
   d41fe:	bd10      	pop	{r4, pc}
   d4200:	d2f1a9fc 	.word	0xd2f1a9fc
   d4204:	4040624d 	.word	0x4040624d
   d4208:	40010508 	.word	0x40010508
   d420c:	40010504 	.word	0x40010504

000d4210 <_ZN8WatchDog3petEv>:

void WatchDog::pet() {
    *(uint32_t *) WDT_RR0_REG = WDT_RELOAD;
   d4210:	4b01      	ldr	r3, [pc, #4]	; (d4218 <_ZN8WatchDog3petEv+0x8>)
   d4212:	4a02      	ldr	r2, [pc, #8]	; (d421c <_ZN8WatchDog3petEv+0xc>)
   d4214:	601a      	str	r2, [r3, #0]
}
   d4216:	4770      	bx	lr
   d4218:	40010600 	.word	0x40010600
   d421c:	6e524635 	.word	0x6e524635

000d4220 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d4220:	4770      	bx	lr

000d4222 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d4222:	b510      	push	{r4, lr}
  }
   d4224:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d4226:	4604      	mov	r4, r0
  }
   d4228:	f002 f96b 	bl	d6502 <_ZdlPvj>
   d422c:	4620      	mov	r0, r4
   d422e:	bd10      	pop	{r4, pc}

000d4230 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4230:	b40e      	push	{r1, r2, r3}
   d4232:	b503      	push	{r0, r1, lr}
   d4234:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d4236:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4238:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d423c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d423e:	f001 fcf0 	bl	d5c22 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d4242:	b002      	add	sp, #8
   d4244:	f85d eb04 	ldr.w	lr, [sp], #4
   d4248:	b003      	add	sp, #12
   d424a:	4770      	bx	lr

000d424c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d424c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d424e:	4604      	mov	r4, r0
   d4250:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4252:	7922      	ldrb	r2, [r4, #4]
   d4254:	68a3      	ldr	r3, [r4, #8]
   d4256:	b132      	cbz	r2, d4266 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d4258:	b9a3      	cbnz	r3, d4284 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d425a:	490b      	ldr	r1, [pc, #44]	; (d4288 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d425c:	b002      	add	sp, #8
   d425e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d4262:	f001 bca3 	b.w	d5bac <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4266:	4a09      	ldr	r2, [pc, #36]	; (d428c <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d4268:	7b26      	ldrb	r6, [r4, #12]
   d426a:	4d09      	ldr	r5, [pc, #36]	; (d4290 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d426c:	4909      	ldr	r1, [pc, #36]	; (d4294 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d426e:	7b64      	ldrb	r4, [r4, #13]
   d4270:	2e01      	cmp	r6, #1
   d4272:	bf18      	it	ne
   d4274:	4629      	movne	r1, r5
   d4276:	e9cd 1400 	strd	r1, r4, [sp]
   d427a:	4907      	ldr	r1, [pc, #28]	; (d4298 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d427c:	f7ff ffd8 	bl	d4230 <_ZN5Print6printfEPKcz>
  }
   d4280:	b002      	add	sp, #8
   d4282:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4284:	4a05      	ldr	r2, [pc, #20]	; (d429c <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d4286:	e7ef      	b.n	d4268 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d4288:	000d6dc6 	.word	0x000d6dc6
   d428c:	000d6dbd 	.word	0x000d6dbd
   d4290:	000d6dc2 	.word	0x000d6dc2
   d4294:	000d6dbe 	.word	0x000d6dbe
   d4298:	000d6ddc 	.word	0x000d6ddc
   d429c:	000d6db5 	.word	0x000d6db5

000d42a0 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d42a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d42a4:	b085      	sub	sp, #20
   d42a6:	461f      	mov	r7, r3
   d42a8:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d42ac:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d42b0:	eba8 0902 	sub.w	r9, r8, r2
   d42b4:	eba7 0a01 	sub.w	sl, r7, r1
   d42b8:	f1b9 0f00 	cmp.w	r9, #0
   d42bc:	bfb8      	it	lt
   d42be:	f1c9 0900 	rsblt	r9, r9, #0
   d42c2:	f1ba 0f00 	cmp.w	sl, #0
   d42c6:	bfb8      	it	lt
   d42c8:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   d42cc:	45d1      	cmp	r9, sl
        uint16_t color) {
   d42ce:	4683      	mov	fp, r0
   d42d0:	460c      	mov	r4, r1
   d42d2:	4615      	mov	r5, r2
    if (steep) {
   d42d4:	dd04      	ble.n	d42e0 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   d42d6:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   d42d8:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   d42da:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   d42dc:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   d42de:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   d42e0:	42bc      	cmp	r4, r7
   d42e2:	dd05      	ble.n	d42f0 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   d42e4:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   d42e6:	4645      	mov	r5, r8
   d42e8:	4690      	mov	r8, r2
    if (x0 > x1) {
   d42ea:	4622      	mov	r2, r4
   d42ec:	463c      	mov	r4, r7
   d42ee:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   d42f0:	1b3e      	subs	r6, r7, r4
   d42f2:	b2b2      	uxth	r2, r6
   d42f4:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   d42f6:	eba8 0205 	sub.w	r2, r8, r5
   d42fa:	2a00      	cmp	r2, #0
   d42fc:	bfb8      	it	lt
   d42fe:	4252      	neglt	r2, r2
   d4300:	9201      	str	r2, [sp, #4]

    int16_t err = dx / 2;
   d4302:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d4306:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   d430a:	4545      	cmp	r5, r8
   d430c:	bfb4      	ite	lt
   d430e:	2201      	movlt	r2, #1
   d4310:	f04f 32ff 	movge.w	r2, #4294967295
    int16_t err = dx / 2;
   d4314:	1076      	asrs	r6, r6, #1
        ystep = -1;
   d4316:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   d4318:	42bc      	cmp	r4, r7
   d431a:	dc1c      	bgt.n	d4356 <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
        if (steep) {
   d431c:	f8db 2000 	ldr.w	r2, [fp]
            writePixel(y0, x0, color);
   d4320:	9303      	str	r3, [sp, #12]
        if (steep) {
   d4322:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   d4324:	f8d2 8018 	ldr.w	r8, [r2, #24]
   d4328:	bfc7      	ittee	gt
   d432a:	4629      	movgt	r1, r5
   d432c:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   d432e:	462a      	movle	r2, r5
   d4330:	4621      	movle	r1, r4
   d4332:	4658      	mov	r0, fp
   d4334:	47c0      	blx	r8
        }
        err -= dy;
   d4336:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   d4338:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   d433a:	1ab6      	subs	r6, r6, r2
   d433c:	b2b1      	uxth	r1, r6
   d433e:	b236      	sxth	r6, r6
        if (err < 0) {
   d4340:	2e00      	cmp	r6, #0
   d4342:	da05      	bge.n	d4350 <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
            y0 += ystep;
   d4344:	9a02      	ldr	r2, [sp, #8]
   d4346:	4415      	add	r5, r2
            err += dx;
   d4348:	9a00      	ldr	r2, [sp, #0]
   d434a:	1856      	adds	r6, r2, r1
            y0 += ystep;
   d434c:	b22d      	sxth	r5, r5
            err += dx;
   d434e:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   d4350:	3401      	adds	r4, #1
   d4352:	b224      	sxth	r4, r4
   d4354:	e7e0      	b.n	d4318 <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
        }
    }
}
   d4356:	b005      	add	sp, #20
   d4358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d435c <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   d435c:	4770      	bx	lr

000d435e <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   d435e:	b410      	push	{r4}
    drawPixel(x, y, color);
   d4360:	6804      	ldr	r4, [r0, #0]
   d4362:	6924      	ldr	r4, [r4, #16]
   d4364:	46a4      	mov	ip, r4
}
   d4366:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   d436a:	4760      	bx	ip

000d436c <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d436c:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   d436e:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   d4370:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   d4374:	9502      	str	r5, [sp, #8]
   d4376:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d4378:	46a4      	mov	ip, r4
}
   d437a:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   d437c:	4760      	bx	ip

000d437e <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d437e:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   d4380:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   d4382:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   d4386:	9502      	str	r5, [sp, #8]
   d4388:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d438a:	46a4      	mov	ip, r4
}
   d438c:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   d438e:	4760      	bx	ip

000d4390 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4390:	b470      	push	{r4, r5, r6}
   d4392:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d4396:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   d439a:	6804      	ldr	r4, [r0, #0]
   d439c:	e9cd 5603 	strd	r5, r6, [sp, #12]
   d43a0:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d43a2:	46a4      	mov	ip, r4
}
   d43a4:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   d43a6:	4760      	bx	ip

000d43a8 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d43a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d43ac:	461c      	mov	r4, r3
    startWrite();
   d43ae:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   d43b0:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d43b4:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   d43b6:	4605      	mov	r5, r0
   d43b8:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   d43ba:	3c01      	subs	r4, #1
   d43bc:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   d43be:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   d43c0:	b224      	sxth	r4, r4
    startWrite();
   d43c2:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   d43c4:	682b      	ldr	r3, [r5, #0]
   d43c6:	f8cd 8004 	str.w	r8, [sp, #4]
   d43ca:	9400      	str	r4, [sp, #0]
   d43cc:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d43ce:	4628      	mov	r0, r5
   d43d0:	463b      	mov	r3, r7
   d43d2:	4632      	mov	r2, r6
   d43d4:	4639      	mov	r1, r7
   d43d6:	47a0      	blx	r4
    endWrite();
   d43d8:	682b      	ldr	r3, [r5, #0]
   d43da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d43dc:	4628      	mov	r0, r5
}
   d43de:	b002      	add	sp, #8
   d43e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d43e4:	4718      	bx	r3

000d43e6 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d43e6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d43ea:	461d      	mov	r5, r3
    startWrite();
   d43ec:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   d43ee:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d43f2:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   d43f4:	4604      	mov	r4, r0
   d43f6:	4617      	mov	r7, r2
   d43f8:	460e      	mov	r6, r1
    startWrite();
   d43fa:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   d43fc:	e9cd 7800 	strd	r7, r8, [sp]
   d4400:	6822      	ldr	r2, [r4, #0]
   d4402:	1e6b      	subs	r3, r5, #1
   d4404:	4433      	add	r3, r6
   d4406:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d4408:	4620      	mov	r0, r4
   d440a:	b21b      	sxth	r3, r3
   d440c:	463a      	mov	r2, r7
   d440e:	4631      	mov	r1, r6
   d4410:	47a8      	blx	r5
    endWrite();
   d4412:	6823      	ldr	r3, [r4, #0]
   d4414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4416:	4620      	mov	r0, r4
}
   d4418:	b002      	add	sp, #8
   d441a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d441e:	4718      	bx	r3

000d4420 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4420:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4424:	461e      	mov	r6, r3
    startWrite();
   d4426:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d4428:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   d442c:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d442e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d4432:	460c      	mov	r4, r1
   d4434:	4605      	mov	r5, r0
   d4436:	4617      	mov	r7, r2
    startWrite();
   d4438:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   d443a:	4426      	add	r6, r4
   d443c:	42b4      	cmp	r4, r6
   d443e:	682b      	ldr	r3, [r5, #0]
   d4440:	da0b      	bge.n	d445a <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   d4442:	f8cd 8000 	str.w	r8, [sp]
   d4446:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d444a:	4621      	mov	r1, r4
   d444c:	464b      	mov	r3, r9
   d444e:	463a      	mov	r2, r7
   d4450:	4628      	mov	r0, r5
   d4452:	3401      	adds	r4, #1
   d4454:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   d4456:	b224      	sxth	r4, r4
   d4458:	e7f0      	b.n	d443c <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   d445a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d445c:	4628      	mov	r0, r5
}
   d445e:	b002      	add	sp, #8
   d4460:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d4464:	4718      	bx	r3

000d4466 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d4466:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   d4468:	6802      	ldr	r2, [r0, #0]
   d446a:	9101      	str	r1, [sp, #4]
   d446c:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d4470:	9100      	str	r1, [sp, #0]
   d4472:	6c14      	ldr	r4, [r2, #64]	; 0x40
   d4474:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d4478:	2200      	movs	r2, #0
   d447a:	4611      	mov	r1, r2
   d447c:	47a0      	blx	r4
}
   d447e:	b002      	add	sp, #8
   d4480:	bd10      	pop	{r4, pc}

000d4482 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4482:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4486:	461d      	mov	r5, r3
    startWrite();
   d4488:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d448a:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   d448e:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d4490:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d4494:	4604      	mov	r4, r0
   d4496:	460f      	mov	r7, r1
   d4498:	4616      	mov	r6, r2
    startWrite();
   d449a:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   d449c:	6823      	ldr	r3, [r4, #0]
   d449e:	f8cd 8000 	str.w	r8, [sp]
   d44a2:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d44a6:	4632      	mov	r2, r6
   d44a8:	462b      	mov	r3, r5
   d44aa:	4639      	mov	r1, r7
   d44ac:	4620      	mov	r0, r4
   d44ae:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   d44b0:	6823      	ldr	r3, [r4, #0]
   d44b2:	f8cd 8000 	str.w	r8, [sp]
   d44b6:	f109 32ff 	add.w	r2, r9, #4294967295
   d44ba:	4432      	add	r2, r6
   d44bc:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d44c0:	4639      	mov	r1, r7
   d44c2:	462b      	mov	r3, r5
   d44c4:	4620      	mov	r0, r4
   d44c6:	b212      	sxth	r2, r2
   d44c8:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   d44ca:	6823      	ldr	r3, [r4, #0]
   d44cc:	f8cd 8000 	str.w	r8, [sp]
   d44d0:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d44d4:	4632      	mov	r2, r6
   d44d6:	464b      	mov	r3, r9
   d44d8:	4639      	mov	r1, r7
   d44da:	4620      	mov	r0, r4
   d44dc:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   d44de:	1e6b      	subs	r3, r5, #1
   d44e0:	19d9      	adds	r1, r3, r7
   d44e2:	6823      	ldr	r3, [r4, #0]
   d44e4:	f8cd 8000 	str.w	r8, [sp]
   d44e8:	6a1d      	ldr	r5, [r3, #32]
   d44ea:	4620      	mov	r0, r4
   d44ec:	464b      	mov	r3, r9
   d44ee:	4632      	mov	r2, r6
   d44f0:	b209      	sxth	r1, r1
   d44f2:	47a8      	blx	r5
    endWrite();
   d44f4:	6823      	ldr	r3, [r4, #0]
   d44f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d44f8:	4620      	mov	r0, r4
}
   d44fa:	b002      	add	sp, #8
   d44fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d4500:	4718      	bx	r3

000d4502 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   d4502:	4770      	bx	lr

000d4504 <_ZN12Adafruit_GFX8drawLineEsssst>:
        uint16_t color) {
   d4504:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(x0 == x1){
   d4508:	4299      	cmp	r1, r3
        uint16_t color) {
   d450a:	4616      	mov	r6, r2
   d450c:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   d4510:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d4514:	6802      	ldr	r2, [r0, #0]
   d4516:	4680      	mov	r8, r0
   d4518:	460d      	mov	r5, r1
   d451a:	461c      	mov	r4, r3
    if(x0 == x1){
   d451c:	d113      	bne.n	d4546 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   d451e:	42be      	cmp	r6, r7
   d4520:	bfc8      	it	gt
   d4522:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d4524:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   d4528:	bfc4      	itt	gt
   d452a:	463e      	movgt	r6, r7
   d452c:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d452e:	1c7b      	adds	r3, r7, #1
   d4530:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d4532:	1b9b      	subs	r3, r3, r6
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d4534:	b21b      	sxth	r3, r3
   d4536:	4632      	mov	r2, r6
   d4538:	4629      	mov	r1, r5
   d453a:	4640      	mov	r0, r8
   d453c:	46a4      	mov	ip, r4
}
   d453e:	b003      	add	sp, #12
   d4540:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d4544:	4760      	bx	ip
    } else if(y0 == y1){
   d4546:	42be      	cmp	r6, r7
   d4548:	d10a      	bne.n	d4560 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   d454a:	4299      	cmp	r1, r3
   d454c:	bfc2      	ittt	gt
   d454e:	460b      	movgt	r3, r1
   d4550:	4625      	movgt	r5, r4
   d4552:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d4554:	1c63      	adds	r3, r4, #1
   d4556:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d455a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d455c:	1b5b      	subs	r3, r3, r5
   d455e:	e7e9      	b.n	d4534 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   d4560:	6953      	ldr	r3, [r2, #20]
   d4562:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   d4564:	e9cd 7900 	strd	r7, r9, [sp]
   d4568:	f8d8 3000 	ldr.w	r3, [r8]
   d456c:	4640      	mov	r0, r8
   d456e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d4570:	4632      	mov	r2, r6
   d4572:	4623      	mov	r3, r4
   d4574:	4629      	mov	r1, r5
   d4576:	47b8      	blx	r7
        endWrite();
   d4578:	f8d8 3000 	ldr.w	r3, [r8]
   d457c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d457e:	4640      	mov	r0, r8
}
   d4580:	b003      	add	sp, #12
   d4582:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   d4586:	4718      	bx	r3

000d4588 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   d4588:	f001 0303 	and.w	r3, r1, #3
   d458c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d4590:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   d4592:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   d4594:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d4598:	bf59      	ittee	pl
   d459a:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   d459c:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   d459e:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   d45a0:	81c3      	strhmi	r3, [r0, #14]
}
   d45a2:	4770      	bx	lr

000d45a4 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d45a4:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   d45a6:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   d45a8:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   d45aa:	4a07      	ldr	r2, [pc, #28]	; (d45c8 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   d45ac:	4d07      	ldr	r5, [pc, #28]	; (d45cc <_ZN12Adafruit_GFXC1Ess+0x28>)
   d45ae:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   d45b0:	2400      	movs	r4, #0
    _width    = WIDTH;
   d45b2:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   d45b4:	f04f 31ff 	mov.w	r1, #4294967295
   d45b8:	e9c0 1205 	strd	r1, r2, [r0, #20]
   d45bc:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   d45be:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   d45c0:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   d45c2:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   d45c4:	6204      	str	r4, [r0, #32]
}
   d45c6:	bd30      	pop	{r4, r5, pc}
   d45c8:	01000101 	.word	0x01000101
   d45cc:	000d7304 	.word	0x000d7304

000d45d0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d45d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d45d4:	b089      	sub	sp, #36	; 0x24
   d45d6:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   d45da:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d45dc:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   d45e0:	9304      	str	r3, [sp, #16]
   d45e2:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   d45e6:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d45e8:	9305      	str	r3, [sp, #20]
   d45ea:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   d45ee:	4604      	mov	r4, r0
    startWrite();
   d45f0:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d45f2:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   d45f6:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d45fa:	bf48      	it	mi
   d45fc:	f108 020e 	addmi.w	r2, r8, #14
   d4600:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   d4604:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   d4606:	4635      	mov	r5, r6
   d4608:	9b03      	ldr	r3, [sp, #12]
   d460a:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   d460c:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   d4610:	189a      	adds	r2, r3, r2
   d4612:	9b05      	ldr	r3, [sp, #20]
   d4614:	428b      	cmp	r3, r1
   d4616:	b212      	sxth	r2, r2
   d4618:	dd27      	ble.n	d466a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d461a:	9b04      	ldr	r3, [sp, #16]
   d461c:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   d461e:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d4622:	9306      	str	r3, [sp, #24]
   d4624:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   d4628:	4580      	cmp	r8, r0
   d462a:	fa1f f189 	uxth.w	r1, r9
   d462e:	dd17      	ble.n	d4660 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   d4630:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d4632:	bf05      	ittet	eq
   d4634:	9b06      	ldreq	r3, [sp, #24]
   d4636:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   d4638:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d463a:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   d463c:	bf18      	it	ne
   d463e:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   d4640:	062b      	lsls	r3, r5, #24
   d4642:	d50a      	bpl.n	d465a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   d4644:	9b02      	ldr	r3, [sp, #8]
   d4646:	6820      	ldr	r0, [r4, #0]
   d4648:	9207      	str	r2, [sp, #28]
   d464a:	4419      	add	r1, r3
   d464c:	6983      	ldr	r3, [r0, #24]
   d464e:	b209      	sxth	r1, r1
   d4650:	461f      	mov	r7, r3
   d4652:	4620      	mov	r0, r4
   d4654:	4653      	mov	r3, sl
   d4656:	47b8      	blx	r7
   d4658:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   d465a:	f109 0901 	add.w	r9, r9, #1
   d465e:	e7e1      	b.n	d4624 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   d4660:	9b01      	ldr	r3, [sp, #4]
   d4662:	3301      	adds	r3, #1
   d4664:	9301      	str	r3, [sp, #4]
   d4666:	445e      	add	r6, fp
   d4668:	e7ce      	b.n	d4608 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   d466a:	6823      	ldr	r3, [r4, #0]
   d466c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d466e:	4620      	mov	r0, r4
}
   d4670:	b009      	add	sp, #36	; 0x24
   d4672:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   d4676:	4718      	bx	r3

000d4678 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d4678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d467c:	ed2d 8b02 	vpush	{d8}
   d4680:	b091      	sub	sp, #68	; 0x44
   d4682:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   d4684:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d4686:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   d468a:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   d468e:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   d4692:	9103      	str	r1, [sp, #12]
   d4694:	461f      	mov	r7, r3
   d4696:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d469a:	9304      	str	r3, [sp, #16]
   d469c:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   d469e:	2a00      	cmp	r2, #0
   d46a0:	f040 80c5 	bne.w	d482e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   d46a4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d46a8:	428b      	cmp	r3, r1
   d46aa:	f340 814c 	ble.w	d4946 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   d46ae:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d46b2:	42b3      	cmp	r3, r6
   d46b4:	f340 8147 	ble.w	d4946 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d46b8:	2306      	movs	r3, #6
   d46ba:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   d46be:	2b00      	cmp	r3, #0
   d46c0:	f340 8141 	ble.w	d4946 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   d46c4:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d46c8:	2b00      	cmp	r3, #0
   d46ca:	f340 813c 	ble.w	d4946 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   d46ce:	7f03      	ldrb	r3, [r0, #28]
   d46d0:	b91b      	cbnz	r3, d46da <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   d46d2:	2faf      	cmp	r7, #175	; 0xaf
   d46d4:	bf84      	itt	hi
   d46d6:	3701      	addhi	r7, #1
   d46d8:	b2ff      	uxtbhi	r7, r7
        startWrite();
   d46da:	f8db 3000 	ldr.w	r3, [fp]
   d46de:	4658      	mov	r0, fp
   d46e0:	695b      	ldr	r3, [r3, #20]
   d46e2:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d46e4:	2205      	movs	r2, #5
   d46e6:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d46e8:	2200      	movs	r2, #0
   d46ea:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d46ec:	4a98      	ldr	r2, [pc, #608]	; (d4950 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   d46ee:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   d46f2:	18d3      	adds	r3, r2, r3
   d46f4:	930c      	str	r3, [sp, #48]	; 0x30
   d46f6:	b2b3      	uxth	r3, r6
   d46f8:	9306      	str	r3, [sp, #24]
   d46fa:	9a05      	ldr	r2, [sp, #20]
   d46fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d46fe:	5c9b      	ldrb	r3, [r3, r2]
   d4700:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d4702:	b2ab      	uxth	r3, r5
   d4704:	930b      	str	r3, [sp, #44]	; 0x2c
   d4706:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d470a:	9308      	str	r3, [sp, #32]
   d470c:	9b03      	ldr	r3, [sp, #12]
   d470e:	fb02 f905 	mul.w	r9, r2, r5
   d4712:	fa19 f983 	uxtah	r9, r9, r3
   d4716:	fa0f f389 	sxth.w	r3, r9
   d471a:	ee08 3a10 	vmov	s16, r3
   d471e:	2308      	movs	r3, #8
   d4720:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   d4722:	9b03      	ldr	r3, [sp, #12]
   d4724:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d4728:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   d472c:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   d4730:	9a07      	ldr	r2, [sp, #28]
   d4732:	f8db 3000 	ldr.w	r3, [fp]
   d4736:	07d2      	lsls	r2, r2, #31
   d4738:	d552      	bpl.n	d47e0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   d473a:	2d01      	cmp	r5, #1
   d473c:	fa1f f289 	uxth.w	r2, r9
   d4740:	d13e      	bne.n	d47c0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   d4742:	2c01      	cmp	r4, #1
   d4744:	d13c      	bne.n	d47c0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   d4746:	699b      	ldr	r3, [r3, #24]
   d4748:	9906      	ldr	r1, [sp, #24]
   d474a:	461f      	mov	r7, r3
   d474c:	9b04      	ldr	r3, [sp, #16]
   d474e:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   d4750:	b212      	sxth	r2, r2
   d4752:	4651      	mov	r1, sl
   d4754:	4658      	mov	r0, fp
   d4756:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d4758:	f109 0301 	add.w	r3, r9, #1
   d475c:	fa4f f983 	sxtb.w	r9, r3
   d4760:	9b07      	ldr	r3, [sp, #28]
   d4762:	085b      	lsrs	r3, r3, #1
   d4764:	9307      	str	r3, [sp, #28]
   d4766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4768:	3b01      	subs	r3, #1
   d476a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d476e:	930a      	str	r3, [sp, #40]	; 0x28
   d4770:	d1de      	bne.n	d4730 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d4772:	9f05      	ldr	r7, [sp, #20]
   d4774:	3701      	adds	r7, #1
   d4776:	b27b      	sxtb	r3, r7
   d4778:	9305      	str	r3, [sp, #20]
   d477a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d477c:	3b01      	subs	r3, #1
   d477e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d4782:	9309      	str	r3, [sp, #36]	; 0x24
   d4784:	d1b9      	bne.n	d46fa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   d4786:	9b04      	ldr	r3, [sp, #16]
   d4788:	4543      	cmp	r3, r8
   d478a:	d00f      	beq.n	d47ac <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   d478c:	2d01      	cmp	r5, #1
   d478e:	f8db 3000 	ldr.w	r3, [fp]
   d4792:	d13b      	bne.n	d480c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d4794:	2c01      	cmp	r4, #1
   d4796:	d139      	bne.n	d480c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d4798:	9908      	ldr	r1, [sp, #32]
   d479a:	f8cd 8000 	str.w	r8, [sp]
   d479e:	3105      	adds	r1, #5
   d47a0:	6a1c      	ldr	r4, [r3, #32]
   d47a2:	4632      	mov	r2, r6
   d47a4:	2308      	movs	r3, #8
   d47a6:	b209      	sxth	r1, r1
   d47a8:	4658      	mov	r0, fp
   d47aa:	47a0      	blx	r4
        endWrite();
   d47ac:	f8db 3000 	ldr.w	r3, [fp]
   d47b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d47b2:	4658      	mov	r0, fp
}
   d47b4:	b011      	add	sp, #68	; 0x44
   d47b6:	ecbd 8b02 	vpop	{d8}
   d47ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   d47be:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   d47c0:	9906      	ldr	r1, [sp, #24]
   d47c2:	fb14 f202 	smulbb	r2, r4, r2
   d47c6:	440a      	add	r2, r1
   d47c8:	9904      	ldr	r1, [sp, #16]
   d47ca:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d47cc:	9400      	str	r4, [sp, #0]
   d47ce:	69db      	ldr	r3, [r3, #28]
   d47d0:	ee18 1a10 	vmov	r1, s16
   d47d4:	461f      	mov	r7, r3
   d47d6:	b212      	sxth	r2, r2
   d47d8:	462b      	mov	r3, r5
   d47da:	4658      	mov	r0, fp
   d47dc:	47b8      	blx	r7
   d47de:	e7bb      	b.n	d4758 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   d47e0:	9a04      	ldr	r2, [sp, #16]
   d47e2:	4542      	cmp	r2, r8
   d47e4:	d0b8      	beq.n	d4758 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   d47e6:	2d01      	cmp	r5, #1
   d47e8:	fa1f f289 	uxth.w	r2, r9
   d47ec:	d107      	bne.n	d47fe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   d47ee:	2c01      	cmp	r4, #1
   d47f0:	d105      	bne.n	d47fe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   d47f2:	699b      	ldr	r3, [r3, #24]
   d47f4:	9906      	ldr	r1, [sp, #24]
   d47f6:	461f      	mov	r7, r3
   d47f8:	440a      	add	r2, r1
   d47fa:	4643      	mov	r3, r8
   d47fc:	e7a8      	b.n	d4750 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d47fe:	9906      	ldr	r1, [sp, #24]
   d4800:	f8cd 8004 	str.w	r8, [sp, #4]
   d4804:	fb14 f202 	smulbb	r2, r4, r2
   d4808:	440a      	add	r2, r1
   d480a:	e7df      	b.n	d47cc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   d480c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d480e:	f8cd 8004 	str.w	r8, [sp, #4]
   d4812:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   d4816:	9a08      	ldr	r2, [sp, #32]
   d4818:	00e4      	lsls	r4, r4, #3
   d481a:	440a      	add	r2, r1
   d481c:	4611      	mov	r1, r2
   d481e:	9400      	str	r4, [sp, #0]
   d4820:	69dc      	ldr	r4, [r3, #28]
   d4822:	4632      	mov	r2, r6
   d4824:	462b      	mov	r3, r5
   d4826:	b209      	sxth	r1, r1
   d4828:	4658      	mov	r0, fp
   d482a:	47a0      	blx	r4
        endWrite();
   d482c:	e7be      	b.n	d47ac <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d482e:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   d4830:	6851      	ldr	r1, [r2, #4]
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);
   d4832:	6812      	ldr	r2, [r2, #0]
   d4834:	920d      	str	r2, [sp, #52]	; 0x34
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d4836:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   d4838:	b2ff      	uxtb	r7, r7
   d483a:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d483e:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   d4842:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   d4844:	789a      	ldrb	r2, [r3, #2]
   d4846:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   d4848:	78da      	ldrb	r2, [r3, #3]
   d484a:	920b      	str	r2, [sp, #44]	; 0x2c
        if(size_x > 1 || size_y > 1) {
   d484c:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d484e:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   d4852:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d4856:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   d4858:	d801      	bhi.n	d485e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   d485a:	2c01      	cmp	r4, #1
   d485c:	d957      	bls.n	d490e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   d485e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   d4862:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   d4864:	fa0f f38a 	sxth.w	r3, sl
   d4868:	9307      	str	r3, [sp, #28]
        startWrite();
   d486a:	f8db 3000 	ldr.w	r3, [fp]
   d486e:	4658      	mov	r0, fp
   d4870:	695b      	ldr	r3, [r3, #20]
   d4872:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4874:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d4876:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d487a:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   d487c:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d4880:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   d4882:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4884:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   d4886:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d4888:	429f      	cmp	r7, r3
   d488a:	d28f      	bcs.n	d47ac <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d488c:	9b07      	ldr	r3, [sp, #28]
   d488e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d4890:	443b      	add	r3, r7
   d4892:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   d4896:	2200      	movs	r2, #0
   d4898:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   d489a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d489c:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d489e:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d48a2:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d48a6:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d48aa:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   d48ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d48ae:	9905      	ldr	r1, [sp, #20]
   d48b0:	4291      	cmp	r1, r2
   d48b2:	d241      	bcs.n	d4938 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   d48b4:	1c5a      	adds	r2, r3, #1
   d48b6:	b2d2      	uxtb	r2, r2
   d48b8:	075b      	lsls	r3, r3, #29
   d48ba:	920c      	str	r2, [sp, #48]	; 0x30
   d48bc:	d107      	bne.n	d48ce <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   d48be:	9b06      	ldr	r3, [sp, #24]
   d48c0:	9906      	ldr	r1, [sp, #24]
   d48c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   d48c4:	3301      	adds	r3, #1
   d48c6:	b29b      	uxth	r3, r3
   d48c8:	f812 9001 	ldrb.w	r9, [r2, r1]
   d48cc:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   d48ce:	f019 0f80 	tst.w	r9, #128	; 0x80
   d48d2:	d012      	beq.n	d48fa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   d48d4:	2d01      	cmp	r5, #1
   d48d6:	f8db 3000 	ldr.w	r3, [fp]
   d48da:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d48de:	d11a      	bne.n	d4916 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   d48e0:	2c01      	cmp	r4, #1
   d48e2:	d118      	bne.n	d4916 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   d48e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d48e6:	699b      	ldr	r3, [r3, #24]
   d48e8:	4411      	add	r1, r2
   d48ea:	9a05      	ldr	r2, [sp, #20]
   d48ec:	4411      	add	r1, r2
   d48ee:	461e      	mov	r6, r3
   d48f0:	4652      	mov	r2, sl
   d48f2:	9b04      	ldr	r3, [sp, #16]
   d48f4:	b209      	sxth	r1, r1
   d48f6:	4658      	mov	r0, fp
   d48f8:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   d48fa:	9e05      	ldr	r6, [sp, #20]
   d48fc:	3601      	adds	r6, #1
   d48fe:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   d4900:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   d4904:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   d4906:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   d490a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            for(xx=0; xx<w; xx++) {
   d490c:	e7ce      	b.n	d48ac <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   d490e:	2300      	movs	r3, #0
   d4910:	e9cd 3307 	strd	r3, r3, [sp, #28]
   d4914:	e7a9      	b.n	d486a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4916:	9805      	ldr	r0, [sp, #20]
   d4918:	9a08      	ldr	r2, [sp, #32]
   d491a:	4402      	add	r2, r0
   d491c:	fb02 1105 	mla	r1, r2, r5, r1
   d4920:	9a04      	ldr	r2, [sp, #16]
   d4922:	e9cd 4200 	strd	r4, r2, [sp]
   d4926:	69db      	ldr	r3, [r3, #28]
   d4928:	ee18 2a10 	vmov	r2, s16
   d492c:	461e      	mov	r6, r3
   d492e:	b209      	sxth	r1, r1
   d4930:	462b      	mov	r3, r5
   d4932:	4658      	mov	r0, fp
   d4934:	47b0      	blx	r6
   d4936:	e7e0      	b.n	d48fa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   d4938:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   d493a:	3701      	adds	r7, #1
   d493c:	4498      	add	r8, r3
   d493e:	fa5f f888 	uxtb.w	r8, r8
   d4942:	b2ff      	uxtb	r7, r7
   d4944:	e79f      	b.n	d4886 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   d4946:	b011      	add	sp, #68	; 0x44
   d4948:	ecbd 8b02 	vpop	{d8}
   d494c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4950:	000d6df9 	.word	0x000d6df9

000d4954 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d4954:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   d4956:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   d4958:	b085      	sub	sp, #20
   d495a:	4604      	mov	r4, r0
   d495c:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   d495e:	2a00      	cmp	r2, #0
   d4960:	d134      	bne.n	d49cc <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   d4962:	290a      	cmp	r1, #10
   d4964:	d108      	bne.n	d4978 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   d4966:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   d4968:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   d496a:	7e42      	ldrb	r2, [r0, #25]
   d496c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   d4970:	8263      	strh	r3, [r4, #18]
}
   d4972:	2001      	movs	r0, #1
   d4974:	b005      	add	sp, #20
   d4976:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   d4978:	290d      	cmp	r1, #13
   d497a:	d0fa      	beq.n	d4972 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   d497c:	7ee1      	ldrb	r1, [r4, #27]
   d497e:	7e00      	ldrb	r0, [r0, #24]
   d4980:	7e65      	ldrb	r5, [r4, #25]
   d4982:	b171      	cbz	r1, d49a2 <_ZN12Adafruit_GFX5writeEh+0x4e>
   d4984:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d4988:	2106      	movs	r1, #6
   d498a:	fb11 6100 	smlabb	r1, r1, r0, r6
   d498e:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d4992:	42b1      	cmp	r1, r6
   d4994:	bfc1      	itttt	gt
   d4996:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   d499a:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   d499c:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   d49a0:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d49a2:	8ae2      	ldrh	r2, [r4, #22]
   d49a4:	9201      	str	r2, [sp, #4]
   d49a6:	8aa2      	ldrh	r2, [r4, #20]
   d49a8:	9200      	str	r2, [sp, #0]
   d49aa:	e9cd 0502 	strd	r0, r5, [sp, #8]
   d49ae:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d49b2:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d49b6:	4620      	mov	r0, r4
   d49b8:	f7ff fe5e 	bl	d4678 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   d49bc:	7e23      	ldrb	r3, [r4, #24]
   d49be:	8a22      	ldrh	r2, [r4, #16]
   d49c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d49c4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d49c8:	8223      	strh	r3, [r4, #16]
   d49ca:	e7d2      	b.n	d4972 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   d49cc:	290a      	cmp	r1, #10
   d49ce:	d107      	bne.n	d49e0 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   d49d0:	2300      	movs	r3, #0
   d49d2:	8203      	strh	r3, [r0, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d49d4:	7a93      	ldrb	r3, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   d49d6:	7e41      	ldrb	r1, [r0, #25]
   d49d8:	8a42      	ldrh	r2, [r0, #18]
   d49da:	fb01 2303 	mla	r3, r1, r3, r2
   d49de:	e7c7      	b.n	d4970 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   d49e0:	290d      	cmp	r1, #13
   d49e2:	d0c6      	beq.n	d4972 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   d49e4:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d49e6:	42a9      	cmp	r1, r5
   d49e8:	d3c3      	bcc.n	d4972 <_ZN12Adafruit_GFX5writeEh+0x1e>
   d49ea:	7a51      	ldrb	r1, [r2, #9]
   d49ec:	4299      	cmp	r1, r3
   d49ee:	d3c0      	bcc.n	d4972 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   d49f0:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   d49f2:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   d49f4:	b2ed      	uxtb	r5, r5
   d49f6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   d49fa:	78af      	ldrb	r7, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d49fc:	b32f      	cbz	r7, d4a4a <_ZN12Adafruit_GFX5writeEh+0xf6>
   d49fe:	78e9      	ldrb	r1, [r5, #3]
   d4a00:	b319      	cbz	r1, d4a4a <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   d4a02:	7ee1      	ldrb	r1, [r4, #27]
   d4a04:	7e00      	ldrb	r0, [r0, #24]
   d4a06:	7e66      	ldrb	r6, [r4, #25]
   d4a08:	b191      	cbz	r1, d4a30 <_ZN12Adafruit_GFX5writeEh+0xdc>
   d4a0a:	f995 1005 	ldrsb.w	r1, [r5, #5]
   d4a0e:	4439      	add	r1, r7
   d4a10:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
   d4a14:	fb00 7101 	mla	r1, r0, r1, r7
   d4a18:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
   d4a1c:	42b9      	cmp	r1, r7
   d4a1e:	dd07      	ble.n	d4a30 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   d4a20:	2700      	movs	r7, #0
   d4a22:	8227      	strh	r7, [r4, #16]
   d4a24:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d4a28:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   d4a2a:	fb02 1206 	mla	r2, r2, r6, r1
   d4a2e:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d4a30:	8ae2      	ldrh	r2, [r4, #22]
   d4a32:	9201      	str	r2, [sp, #4]
   d4a34:	8aa2      	ldrh	r2, [r4, #20]
   d4a36:	9200      	str	r2, [sp, #0]
   d4a38:	e9cd 0602 	strd	r0, r6, [sp, #8]
   d4a3c:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d4a40:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d4a44:	4620      	mov	r0, r4
   d4a46:	f7ff fe17 	bl	d4678 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d4a4a:	7929      	ldrb	r1, [r5, #4]
   d4a4c:	7e23      	ldrb	r3, [r4, #24]
   d4a4e:	8a22      	ldrh	r2, [r4, #16]
   d4a50:	fb01 2303 	mla	r3, r1, r3, r2
   d4a54:	e7b8      	b.n	d49c8 <_ZN12Adafruit_GFX5writeEh+0x74>

000d4a56 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   d4a56:	2901      	cmp	r1, #1
   d4a58:	bf38      	it	cc
   d4a5a:	2101      	movcc	r1, #1
   d4a5c:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   d4a5e:	7641      	strb	r1, [r0, #25]
}
   d4a60:	4770      	bx	lr
	...

000d4a64 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   d4a64:	b510      	push	{r4, lr}
   d4a66:	4b06      	ldr	r3, [pc, #24]	; (d4a80 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   d4a68:	6003      	str	r3, [r0, #0]
   d4a6a:	4604      	mov	r4, r0
	if (mutex) {
   d4a6c:	6d00      	ldr	r0, [r0, #80]	; 0x50
   d4a6e:	b108      	cbz	r0, d4a74 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   d4a70:	f000 fd60 	bl	d5534 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   d4a74:	4620      	mov	r0, r4
   d4a76:	f000 f887 	bl	d4b88 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   d4a7a:	4620      	mov	r0, r4
   d4a7c:	bd10      	pop	{r4, pc}
   d4a7e:	bf00      	nop
   d4a80:	000d735c 	.word	0x000d735c

000d4a84 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   d4a84:	b510      	push	{r4, lr}
   d4a86:	4604      	mov	r4, r0
}
   d4a88:	f7ff ffec 	bl	d4a64 <_ZN16OledWingAdafruitD1Ev>
   d4a8c:	4620      	mov	r0, r4
   d4a8e:	2170      	movs	r1, #112	; 0x70
   d4a90:	f001 fd37 	bl	d6502 <_ZdlPvj>
   d4a94:	4620      	mov	r0, r4
   d4a96:	bd10      	pop	{r4, pc}

000d4a98 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   d4a98:	b530      	push	{r4, r5, lr}
   d4a9a:	b085      	sub	sp, #20
   d4a9c:	4604      	mov	r4, r0
   d4a9e:	460d      	mov	r5, r1
   d4aa0:	f001 fd02 	bl	d64a8 <_Z19__fetch_global_Wirev>
   d4aa4:	4a10      	ldr	r2, [pc, #64]	; (d4ae8 <_ZN16OledWingAdafruitC1Ei+0x50>)
   d4aa6:	4911      	ldr	r1, [pc, #68]	; (d4aec <_ZN16OledWingAdafruitC1Ei+0x54>)
   d4aa8:	e9cd 2101 	strd	r2, r1, [sp, #4]
   d4aac:	f04f 32ff 	mov.w	r2, #4294967295
   d4ab0:	2180      	movs	r1, #128	; 0x80
   d4ab2:	4603      	mov	r3, r0
   d4ab4:	9200      	str	r2, [sp, #0]
   d4ab6:	4620      	mov	r0, r4
   d4ab8:	2220      	movs	r2, #32
   d4aba:	f000 f8eb 	bl	d4c94 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   d4abe:	4b0c      	ldr	r3, [pc, #48]	; (d4af0 <_ZN16OledWingAdafruitC1Ei+0x58>)
   d4ac0:	6023      	str	r3, [r4, #0]
   d4ac2:	2300      	movs	r3, #0
   d4ac4:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   d4ac8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4acc:	f000 f83b 	bl	d4b46 <_ZN8DebounceC1Ev>
   d4ad0:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4ad4:	f000 f837 	bl	d4b46 <_ZN8DebounceC1Ev>
   d4ad8:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d4adc:	f000 f833 	bl	d4b46 <_ZN8DebounceC1Ev>
}
   d4ae0:	4620      	mov	r0, r4
   d4ae2:	b005      	add	sp, #20
   d4ae4:	bd30      	pop	{r4, r5, pc}
   d4ae6:	bf00      	nop
   d4ae8:	00061a80 	.word	0x00061a80
   d4aec:	000186a0 	.word	0x000186a0
   d4af0:	000d735c 	.word	0x000d735c

000d4af4 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   d4af4:	b513      	push	{r0, r1, r4, lr}
   d4af6:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   d4af8:	3050      	adds	r0, #80	; 0x50
   d4afa:	f000 fd13 	bl	d5524 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   d4afe:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4b00:	07d9      	lsls	r1, r3, #31
   d4b02:	d505      	bpl.n	d4b10 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   d4b04:	2202      	movs	r2, #2
   d4b06:	2104      	movs	r1, #4
   d4b08:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4b0c:	f000 f82f 	bl	d4b6e <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   d4b10:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4b12:	079a      	lsls	r2, r3, #30
   d4b14:	d505      	bpl.n	d4b22 <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   d4b16:	2200      	movs	r2, #0
   d4b18:	2103      	movs	r1, #3
   d4b1a:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4b1e:	f000 f826 	bl	d4b6e <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   d4b22:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4b24:	075b      	lsls	r3, r3, #29
   d4b26:	d505      	bpl.n	d4b34 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   d4b28:	2202      	movs	r2, #2
   d4b2a:	4611      	mov	r1, r2
   d4b2c:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d4b30:	f000 f81d 	bl	d4b6e <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d4b34:	2301      	movs	r3, #1
   d4b36:	9300      	str	r3, [sp, #0]
   d4b38:	223c      	movs	r2, #60	; 0x3c
   d4b3a:	2102      	movs	r1, #2
   d4b3c:	4620      	mov	r0, r4
   d4b3e:	f000 f9a9 	bl	d4e94 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   d4b42:	b002      	add	sp, #8
   d4b44:	bd10      	pop	{r4, pc}

000d4b46 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   d4b46:	2100      	movs	r1, #0
   d4b48:	220a      	movs	r2, #10
   d4b4a:	e9c0 1200 	strd	r1, r2, [r0]
{}
   d4b4e:	4770      	bx	lr

000d4b50 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   d4b50:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   d4b52:	b510      	push	{r4, lr}
   d4b54:	4604      	mov	r4, r0
    this->pin = pin;
   d4b56:	71c1      	strb	r1, [r0, #7]
    state = 0;
   d4b58:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   d4b5a:	b288      	uxth	r0, r1
   d4b5c:	f001 fc78 	bl	d6450 <digitalRead>
   d4b60:	b108      	cbz	r0, d4b66 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   d4b62:	2303      	movs	r3, #3
   d4b64:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4b66:	f000 fccd 	bl	d5504 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   d4b6a:	6020      	str	r0, [r4, #0]
#endif
}
   d4b6c:	bd10      	pop	{r4, pc}

000d4b6e <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   d4b6e:	b538      	push	{r3, r4, r5, lr}
   d4b70:	460c      	mov	r4, r1
   d4b72:	4605      	mov	r5, r0
  pinMode(pin, mode);
   d4b74:	4611      	mov	r1, r2
   d4b76:	b2a0      	uxth	r0, r4
   d4b78:	f001 fc40 	bl	d63fc <pinMode>
  
  this->attach(pin);
   d4b7c:	4621      	mov	r1, r4
   d4b7e:	4628      	mov	r0, r5
}
   d4b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   d4b84:	f7ff bfe4 	b.w	d4b50 <_ZN8Debounce6attachEi>

000d4b88 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d4b88:	b510      	push	{r4, lr}
   d4b8a:	4b04      	ldr	r3, [pc, #16]	; (d4b9c <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   d4b8c:	6003      	str	r3, [r0, #0]
   d4b8e:	4604      	mov	r4, r0
  if(buffer) {
   d4b90:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4b92:	b108      	cbz	r0, d4b98 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   d4b94:	f000 fe9a 	bl	d58cc <free>
    buffer = NULL;
  }
}
   d4b98:	4620      	mov	r0, r4
   d4b9a:	bd10      	pop	{r4, pc}
   d4b9c:	000d7868 	.word	0x000d7868

000d4ba0 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d4ba0:	b510      	push	{r4, lr}
   d4ba2:	4604      	mov	r4, r0
}
   d4ba4:	f7ff fff0 	bl	d4b88 <_ZN16Adafruit_SSD1306D1Ev>
   d4ba8:	4620      	mov	r0, r4
   d4baa:	2150      	movs	r1, #80	; 0x50
   d4bac:	f001 fca9 	bl	d6502 <_ZdlPvj>
   d4bb0:	4620      	mov	r0, r4
   d4bb2:	bd10      	pop	{r4, pc}

000d4bb4 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d4bb4:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4bb6:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d4bb8:	db4b      	blt.n	d4c52 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4bba:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   d4bbe:	428c      	cmp	r4, r1
   d4bc0:	dd47      	ble.n	d4c52 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4bc2:	2a00      	cmp	r2, #0
   d4bc4:	db45      	blt.n	d4c52 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4bc6:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   d4bca:	4294      	cmp	r4, r2
   d4bcc:	dd41      	ble.n	d4c52 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   d4bce:	7e84      	ldrb	r4, [r0, #26]
   d4bd0:	2c02      	cmp	r4, #2
   d4bd2:	d01f      	beq.n	d4c14 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   d4bd4:	2c03      	cmp	r4, #3
   d4bd6:	d026      	beq.n	d4c26 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   d4bd8:	2c01      	cmp	r4, #1
   d4bda:	d104      	bne.n	d4be6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   d4bdc:	8904      	ldrh	r4, [r0, #8]
   d4bde:	43d2      	mvns	r2, r2
   d4be0:	4414      	add	r4, r2
      break;
   d4be2:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   d4be4:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   d4be6:	2b01      	cmp	r3, #1
   d4be8:	d023      	beq.n	d4c32 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   d4bea:	2b02      	cmp	r3, #2
   d4bec:	d032      	beq.n	d4c54 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   d4bee:	bb83      	cbnz	r3, d4c52 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   d4bf0:	2a00      	cmp	r2, #0
   d4bf2:	4613      	mov	r3, r2
   d4bf4:	8904      	ldrh	r4, [r0, #8]
   d4bf6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4bf8:	bfb8      	it	lt
   d4bfa:	1dd3      	addlt	r3, r2, #7
   d4bfc:	10db      	asrs	r3, r3, #3
   d4bfe:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4c02:	f002 0207 	and.w	r2, r2, #7
   d4c06:	2301      	movs	r3, #1
   d4c08:	4093      	lsls	r3, r2
   d4c0a:	5c42      	ldrb	r2, [r0, r1]
   d4c0c:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d4c10:	5442      	strb	r2, [r0, r1]
    }
  }
}
   d4c12:	e01e      	b.n	d4c52 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   d4c14:	8904      	ldrh	r4, [r0, #8]
   d4c16:	43c9      	mvns	r1, r1
   d4c18:	4421      	add	r1, r4
      y = HEIGHT - y - 1;
   d4c1a:	8944      	ldrh	r4, [r0, #10]
   d4c1c:	43d2      	mvns	r2, r2
   d4c1e:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   d4c20:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   d4c22:	b212      	sxth	r2, r2
      break;
   d4c24:	e7df      	b.n	d4be6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   d4c26:	8944      	ldrh	r4, [r0, #10]
   d4c28:	43c9      	mvns	r1, r1
   d4c2a:	440c      	add	r4, r1
      break;
   d4c2c:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   d4c2e:	b222      	sxth	r2, r4
      break;
   d4c30:	e7d9      	b.n	d4be6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   d4c32:	2a00      	cmp	r2, #0
   d4c34:	8904      	ldrh	r4, [r0, #8]
   d4c36:	4613      	mov	r3, r2
   d4c38:	bfb8      	it	lt
   d4c3a:	1dd3      	addlt	r3, r2, #7
   d4c3c:	10db      	asrs	r3, r3, #3
   d4c3e:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4c42:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d4c44:	f002 0007 	and.w	r0, r2, #7
   d4c48:	2201      	movs	r2, #1
   d4c4a:	4082      	lsls	r2, r0
   d4c4c:	5c58      	ldrb	r0, [r3, r1]
   d4c4e:	4302      	orrs	r2, r0
   d4c50:	545a      	strb	r2, [r3, r1]
}
   d4c52:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d4c54:	2a00      	cmp	r2, #0
   d4c56:	4613      	mov	r3, r2
   d4c58:	8904      	ldrh	r4, [r0, #8]
   d4c5a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4c5c:	bfb8      	it	lt
   d4c5e:	1dd3      	addlt	r3, r2, #7
   d4c60:	10db      	asrs	r3, r3, #3
   d4c62:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4c66:	f002 0207 	and.w	r2, r2, #7
   d4c6a:	2301      	movs	r3, #1
   d4c6c:	fa03 f202 	lsl.w	r2, r3, r2
   d4c70:	5c43      	ldrb	r3, [r0, r1]
   d4c72:	405a      	eors	r2, r3
   d4c74:	e7cc      	b.n	d4c10 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>

000d4c76 <_ZN16Adafruit_SSD130610stopscrollEv.part.0>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4c76:	b510      	push	{r4, lr}
   d4c78:	4604      	mov	r4, r0
  TRANSACTION_START
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
   d4c7a:	f990 0036 	ldrsb.w	r0, [r0, #54]	; 0x36
   d4c7e:	2101      	movs	r1, #1
   d4c80:	b280      	uxth	r0, r0
   d4c82:	f001 fbcc 	bl	d641e <digitalWrite>
   d4c86:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4c88:	b118      	cbz	r0, d4c92 <_ZN16Adafruit_SSD130610stopscrollEv.part.0+0x1c>
}
   d4c8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TRANSACTION_END
   d4c8e:	f000 be94 	b.w	d59ba <_ZN8SPIClass14endTransactionEv>
}
   d4c92:	bd10      	pop	{r4, pc}

000d4c94 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   d4c94:	b570      	push	{r4, r5, r6, lr}
   d4c96:	4604      	mov	r4, r0
   d4c98:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   d4c9a:	2600      	movs	r6, #0
   d4c9c:	f7ff fc82 	bl	d45a4 <_ZN12Adafruit_GFXC1Ess>
   d4ca0:	4b11      	ldr	r3, [pc, #68]	; (d4ce8 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   d4ca2:	6023      	str	r3, [r4, #0]
   d4ca4:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   d4ca6:	b915      	cbnz	r5, d4cae <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   d4ca8:	f001 fbfe 	bl	d64a8 <_Z19__fetch_global_Wirev>
   d4cac:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   d4cae:	23ff      	movs	r3, #255	; 0xff
   d4cb0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   d4cb4:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   d4cb8:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   d4cbc:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   d4cc0:	4b0a      	ldr	r3, [pc, #40]	; (d4cec <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   d4cc2:	63a3      	str	r3, [r4, #56]	; 0x38
   d4cc4:	2301      	movs	r3, #1
   d4cc6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   d4cca:	9b05      	ldr	r3, [sp, #20]
   d4ccc:	64a3      	str	r3, [r4, #72]	; 0x48
   d4cce:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4cd2:	9b06      	ldr	r3, [sp, #24]
   d4cd4:	86a2      	strh	r2, [r4, #52]	; 0x34
   d4cd6:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   d4cda:	6426      	str	r6, [r4, #64]	; 0x40
   d4cdc:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   d4ce0:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   d4ce2:	4620      	mov	r0, r4
   d4ce4:	bd70      	pop	{r4, r5, r6, pc}
   d4ce6:	bf00      	nop
   d4ce8:	000d7868 	.word	0x000d7868
   d4cec:	000d73b4 	.word	0x000d73b4

000d4cf0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d4cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4cf2:	4604      	mov	r4, r0
  if(wire) { // I2C
   d4cf4:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d4cf6:	460d      	mov	r5, r1
  if(wire) { // I2C
   d4cf8:	b190      	cbz	r0, d4d20 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   d4cfa:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d4cfe:	f001 fa47 	bl	d6190 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d4d02:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4d04:	6803      	ldr	r3, [r0, #0]
   d4d06:	2100      	movs	r1, #0
   d4d08:	689b      	ldr	r3, [r3, #8]
   d4d0a:	4798      	blx	r3
    WIRE_WRITE(c);
   d4d0c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4d0e:	6803      	ldr	r3, [r0, #0]
   d4d10:	4629      	mov	r1, r5
   d4d12:	689b      	ldr	r3, [r3, #8]
   d4d14:	4798      	blx	r3
    wire->endTransmission();
   d4d16:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   d4d18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   d4d1c:	f001 ba3f 	b.w	d619e <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d4d20:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d4d24:	4601      	mov	r1, r0
   d4d26:	b298      	uxth	r0, r3
   d4d28:	f001 fb79 	bl	d641e <digitalWrite>
  if(spi) {
   d4d2c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4d2e:	b120      	cbz	r0, d4d3a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   d4d30:	4629      	mov	r1, r5
}
   d4d32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   d4d36:	f000 bec7 	b.w	d5ac8 <_ZN8SPIClass8transferEh>
   d4d3a:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4d3c:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d4d3e:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d4d42:	ea05 0107 	and.w	r1, r5, r7
   d4d46:	b280      	uxth	r0, r0
   d4d48:	f001 fb69 	bl	d641e <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d4d4c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4d50:	2101      	movs	r1, #1
   d4d52:	b280      	uxth	r0, r0
   d4d54:	f001 fb63 	bl	d641e <digitalWrite>
      digitalWrite(clkPin , LOW);
   d4d58:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4d5c:	2100      	movs	r1, #0
   d4d5e:	b280      	uxth	r0, r0
   d4d60:	f001 fb5d 	bl	d641e <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4d64:	3e01      	subs	r6, #1
   d4d66:	ea4f 0757 	mov.w	r7, r7, lsr #1
   d4d6a:	d1e8      	bne.n	d4d3e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   d4d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4d6e <_ZN16Adafruit_SSD130613invertDisplayEb>:
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4d6e:	b538      	push	{r3, r4, r5, lr}
   d4d70:	4604      	mov	r4, r0
  TRANSACTION_START
   d4d72:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4d74:	460d      	mov	r5, r1
  TRANSACTION_START
   d4d76:	b180      	cbz	r0, d4d9a <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d4d78:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d4d7a:	f001 f9fb 	bl	d6174 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   d4d7e:	2d00      	cmp	r5, #0
   d4d80:	4620      	mov	r0, r4
   d4d82:	bf14      	ite	ne
   d4d84:	21a7      	movne	r1, #167	; 0xa7
   d4d86:	21a6      	moveq	r1, #166	; 0xa6
   d4d88:	f7ff ffb2 	bl	d4cf0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   d4d8c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4d8e:	b188      	cbz	r0, d4db4 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   d4d90:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d4d92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4d96:	f001 b9ed 	b.w	d6174 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   d4d9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4d9c:	b118      	cbz	r0, d4da6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   d4d9e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d4da2:	f000 fe23 	bl	d59ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d4da6:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d4daa:	2100      	movs	r1, #0
   d4dac:	b280      	uxth	r0, r0
   d4dae:	f001 fb36 	bl	d641e <digitalWrite>
   d4db2:	e7e4      	b.n	d4d7e <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
   d4db4:	4620      	mov	r0, r4
}
   d4db6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4dba:	f7ff bf5c 	b.w	d4c76 <_ZN16Adafruit_SSD130610stopscrollEv.part.0>

000d4dbe <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d4dbe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4dc2:	4604      	mov	r4, r0
  if(wire) { // I2C
   d4dc4:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d4dc6:	460d      	mov	r5, r1
  if(wire) { // I2C
   d4dc8:	188f      	adds	r7, r1, r2
   d4dca:	b340      	cbz	r0, d4e1e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   d4dcc:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d4dd0:	f001 f9de 	bl	d6190 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d4dd4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4dd6:	6803      	ldr	r3, [r0, #0]
   d4dd8:	2100      	movs	r1, #0
   d4dda:	689b      	ldr	r3, [r3, #8]
   d4ddc:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d4dde:	2601      	movs	r6, #1
    while(n--) {
   d4de0:	42bd      	cmp	r5, r7
   d4de2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4de4:	d017      	beq.n	d4e16 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   d4de6:	2e1f      	cmp	r6, #31
   d4de8:	d90c      	bls.n	d4e04 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   d4dea:	f001 f9d8 	bl	d619e <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d4dee:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d4df2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4df4:	f001 f9cc 	bl	d6190 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d4df8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4dfa:	6803      	ldr	r3, [r0, #0]
   d4dfc:	2100      	movs	r1, #0
   d4dfe:	689b      	ldr	r3, [r3, #8]
   d4e00:	4798      	blx	r3
        bytesOut = 1;
   d4e02:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d4e04:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4e06:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4e0a:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d4e0c:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d4e0e:	689b      	ldr	r3, [r3, #8]
   d4e10:	4798      	blx	r3
      bytesOut++;
   d4e12:	b2f6      	uxtb	r6, r6
    while(n--) {
   d4e14:	e7e4      	b.n	d4de0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   d4e16:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   d4e1a:	f001 b9c0 	b.w	d619e <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d4e1e:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d4e22:	4601      	mov	r1, r0
   d4e24:	b298      	uxth	r0, r3
   d4e26:	f001 fafa 	bl	d641e <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   d4e2a:	42af      	cmp	r7, r5
   d4e2c:	d022      	beq.n	d4e74 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   d4e2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   d4e30:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d4e34:	b118      	cbz	r0, d4e3e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   d4e36:	4649      	mov	r1, r9
   d4e38:	f000 fe46 	bl	d5ac8 <_ZN8SPIClass8transferEh>
   d4e3c:	e7f5      	b.n	d4e2a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   d4e3e:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4e40:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d4e44:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d4e48:	ea09 0108 	and.w	r1, r9, r8
   d4e4c:	b280      	uxth	r0, r0
   d4e4e:	f001 fae6 	bl	d641e <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d4e52:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4e56:	2101      	movs	r1, #1
   d4e58:	b280      	uxth	r0, r0
   d4e5a:	f001 fae0 	bl	d641e <digitalWrite>
      digitalWrite(clkPin , LOW);
   d4e5e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4e62:	2100      	movs	r1, #0
   d4e64:	b280      	uxth	r0, r0
   d4e66:	f001 fada 	bl	d641e <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4e6a:	3e01      	subs	r6, #1
   d4e6c:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d4e70:	d1e8      	bne.n	d4e44 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   d4e72:	e7da      	b.n	d4e2a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   d4e74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4e78 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   d4e78:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d4e7c:	1dda      	adds	r2, r3, #7
   d4e7e:	bf48      	it	mi
   d4e80:	f103 020e 	addmi.w	r2, r3, #14
   d4e84:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d4e88:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4e8a:	10d2      	asrs	r2, r2, #3
   d4e8c:	435a      	muls	r2, r3
   d4e8e:	2100      	movs	r1, #0
   d4e90:	f001 bf46 	b.w	d6d20 <memset>

000d4e94 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   d4e94:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d4e98:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d4e9a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   d4e9c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d4ea0:	4604      	mov	r4, r0
   d4ea2:	460f      	mov	r7, r1
   d4ea4:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d4ea6:	b1b3      	cbz	r3, d4ed6 <_ZN16Adafruit_SSD13065beginEhhbb+0x42>
  clearDisplay();
   d4ea8:	4620      	mov	r0, r4
   d4eaa:	f7ff ffe5 	bl	d4e78 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   d4eae:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   d4eb2:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   d4eb6:	2820      	cmp	r0, #32
   d4eb8:	dc1f      	bgt.n	d4efa <_ZN16Adafruit_SSD13065beginEhhbb+0x66>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d4eba:	2320      	movs	r3, #32
   d4ebc:	2201      	movs	r2, #1
   d4ebe:	e9cd 3201 	strd	r3, r2, [sp, #4]
   d4ec2:	3820      	subs	r0, #32
   d4ec4:	2373      	movs	r3, #115	; 0x73
   d4ec6:	3973      	subs	r1, #115	; 0x73
   d4ec8:	9300      	str	r3, [sp, #0]
   d4eca:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d4ece:	4b89      	ldr	r3, [pc, #548]	; (d50f4 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   d4ed0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d4ed4:	e01f      	b.n	d4f16 <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d4ed6:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d4eda:	1dd8      	adds	r0, r3, #7
   d4edc:	bf48      	it	mi
   d4ede:	f103 000e 	addmi.w	r0, r3, #14
   d4ee2:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   d4ee6:	10c0      	asrs	r0, r0, #3
   d4ee8:	4358      	muls	r0, r3
   d4eea:	f000 fce7 	bl	d58bc <malloc>
   d4eee:	62e0      	str	r0, [r4, #44]	; 0x2c
   d4ef0:	2800      	cmp	r0, #0
   d4ef2:	d1d9      	bne.n	d4ea8 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   d4ef4:	b004      	add	sp, #16
   d4ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   d4efa:	2340      	movs	r3, #64	; 0x40
   d4efc:	f04f 0c01 	mov.w	ip, #1
   d4f00:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   d4f04:	2352      	movs	r3, #82	; 0x52
   d4f06:	3840      	subs	r0, #64	; 0x40
   d4f08:	3952      	subs	r1, #82	; 0x52
   d4f0a:	9300      	str	r3, [sp, #0]
   d4f0c:	4b7a      	ldr	r3, [pc, #488]	; (d50f8 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   d4f0e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d4f12:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d4f16:	f340 024f 	sbfx	r2, r0, #1, #16
   d4f1a:	f341 014f 	sbfx	r1, r1, #1, #16
   d4f1e:	4620      	mov	r0, r4
   d4f20:	f7ff fb56 	bl	d45d0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   d4f24:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   d4f26:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   d4f2a:	2800      	cmp	r0, #0
   d4f2c:	d078      	beq.n	d5020 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d4f2e:	2d00      	cmp	r5, #0
   d4f30:	d174      	bne.n	d501c <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   d4f32:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d4f36:	2b20      	cmp	r3, #32
   d4f38:	bf0c      	ite	eq
   d4f3a:	253c      	moveq	r5, #60	; 0x3c
   d4f3c:	253d      	movne	r5, #61	; 0x3d
   d4f3e:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   d4f42:	f1b8 0f00 	cmp.w	r8, #0
   d4f46:	d001      	beq.n	d4f4c <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d4f48:	f001 f918 	bl	d617c <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   d4f4c:	b1fe      	cbz	r6, d4f8e <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
   d4f4e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d4f52:	2800      	cmp	r0, #0
   d4f54:	db1b      	blt.n	d4f8e <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
    pinMode(     rstPin, OUTPUT);
   d4f56:	2101      	movs	r1, #1
   d4f58:	b280      	uxth	r0, r0
   d4f5a:	f001 fa4f 	bl	d63fc <pinMode>
    digitalWrite(rstPin, HIGH);
   d4f5e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d4f62:	2101      	movs	r1, #1
   d4f64:	b280      	uxth	r0, r0
   d4f66:	f001 fa5a 	bl	d641e <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   d4f6a:	2001      	movs	r0, #1
   d4f6c:	f000 fea2 	bl	d5cb4 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   d4f70:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d4f74:	2100      	movs	r1, #0
   d4f76:	b280      	uxth	r0, r0
   d4f78:	f001 fa51 	bl	d641e <digitalWrite>
    delay(10);                  // Wait 10 ms
   d4f7c:	200a      	movs	r0, #10
   d4f7e:	f000 fe99 	bl	d5cb4 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   d4f82:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d4f86:	2101      	movs	r1, #1
   d4f88:	b280      	uxth	r0, r0
   d4f8a:	f001 fa48 	bl	d641e <digitalWrite>
  TRANSACTION_START
   d4f8e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4f90:	2800      	cmp	r0, #0
   d4f92:	d074      	beq.n	d507e <_ZN16Adafruit_SSD13065beginEhhbb+0x1ea>
   d4f94:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d4f96:	f001 f8ed 	bl	d6174 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   d4f9a:	2204      	movs	r2, #4
   d4f9c:	4957      	ldr	r1, [pc, #348]	; (d50fc <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   d4f9e:	4620      	mov	r0, r4
   d4fa0:	f7ff ff0d 	bl	d4dbe <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   d4fa4:	7aa1      	ldrb	r1, [r4, #10]
   d4fa6:	3901      	subs	r1, #1
   d4fa8:	b2c9      	uxtb	r1, r1
   d4faa:	4620      	mov	r0, r4
   d4fac:	f7ff fea0 	bl	d4cf0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   d4fb0:	4953      	ldr	r1, [pc, #332]	; (d5100 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   d4fb2:	2204      	movs	r2, #4
   d4fb4:	4620      	mov	r0, r4
   d4fb6:	f7ff ff02 	bl	d4dbe <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   d4fba:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d4fbe:	2b01      	cmp	r3, #1
   d4fc0:	bf0c      	ite	eq
   d4fc2:	2110      	moveq	r1, #16
   d4fc4:	2114      	movne	r1, #20
   d4fc6:	4620      	mov	r0, r4
   d4fc8:	f7ff fe92 	bl	d4cf0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   d4fcc:	2204      	movs	r2, #4
   d4fce:	494d      	ldr	r1, [pc, #308]	; (d5104 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   d4fd0:	4620      	mov	r0, r4
   d4fd2:	f7ff fef4 	bl	d4dbe <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   d4fd6:	68a3      	ldr	r3, [r4, #8]
   d4fd8:	4a4b      	ldr	r2, [pc, #300]	; (d5108 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   d4fda:	4293      	cmp	r3, r2
   d4fdc:	d15c      	bne.n	d5098 <_ZN16Adafruit_SSD13065beginEhhbb+0x204>
    ssd1306_commandList(init4a, sizeof(init4a));
   d4fde:	494b      	ldr	r1, [pc, #300]	; (d510c <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   d4fe0:	2204      	movs	r2, #4
   d4fe2:	4620      	mov	r0, r4
   d4fe4:	f7ff feeb 	bl	d4dbe <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   d4fe8:	21d9      	movs	r1, #217	; 0xd9
   d4fea:	4620      	mov	r0, r4
   d4fec:	f7ff fe80 	bl	d4cf0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   d4ff0:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d4ff4:	2b01      	cmp	r3, #1
   d4ff6:	bf0c      	ite	eq
   d4ff8:	2122      	moveq	r1, #34	; 0x22
   d4ffa:	21f1      	movne	r1, #241	; 0xf1
   d4ffc:	4620      	mov	r0, r4
   d4ffe:	f7ff fe77 	bl	d4cf0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   d5002:	4620      	mov	r0, r4
   d5004:	4942      	ldr	r1, [pc, #264]	; (d5110 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   d5006:	2206      	movs	r2, #6
   d5008:	f7ff fed9 	bl	d4dbe <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   d500c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d500e:	2800      	cmp	r0, #0
   d5010:	d063      	beq.n	d50da <_ZN16Adafruit_SSD13065beginEhhbb+0x246>
   d5012:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   d5014:	f001 f8ae 	bl	d6174 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   d5018:	2001      	movs	r0, #1
   d501a:	e76b      	b.n	d4ef4 <_ZN16Adafruit_SSD13065beginEhhbb+0x60>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d501c:	b26d      	sxtb	r5, r5
   d501e:	e78e      	b.n	d4f3e <_ZN16Adafruit_SSD13065beginEhhbb+0xaa>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   d5020:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d5024:	2101      	movs	r1, #1
   d5026:	b280      	uxth	r0, r0
   d5028:	f001 f9e8 	bl	d63fc <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   d502c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5030:	2101      	movs	r1, #1
   d5032:	b280      	uxth	r0, r0
   d5034:	f001 f9e2 	bl	d63fc <pinMode>
    SSD1306_DESELECT
   d5038:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d503c:	2101      	movs	r1, #1
   d503e:	b280      	uxth	r0, r0
   d5040:	f001 f9ed 	bl	d641e <digitalWrite>
    if(spi) { // Hardware SPI
   d5044:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d5046:	b13d      	cbz	r5, d5058 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c4>
      if(periphBegin) spi->begin();
   d5048:	f1b8 0f00 	cmp.w	r8, #0
   d504c:	f43f af7e 	beq.w	d4f4c <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d5050:	4628      	mov	r0, r5
   d5052:	f000 fca1 	bl	d5998 <_ZN8SPIClass5beginEv>
   d5056:	e779      	b.n	d4f4c <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   d5058:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d505c:	2101      	movs	r1, #1
   d505e:	b280      	uxth	r0, r0
   d5060:	f001 f9cc 	bl	d63fc <pinMode>
      pinMode(clkPin , OUTPUT);
   d5064:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5068:	2101      	movs	r1, #1
   d506a:	b280      	uxth	r0, r0
   d506c:	f001 f9c6 	bl	d63fc <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   d5070:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5074:	4629      	mov	r1, r5
   d5076:	b280      	uxth	r0, r0
   d5078:	f001 f9d1 	bl	d641e <digitalWrite>
   d507c:	e766      	b.n	d4f4c <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
  TRANSACTION_START
   d507e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5080:	b118      	cbz	r0, d508a <_ZN16Adafruit_SSD13065beginEhhbb+0x1f6>
   d5082:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d5086:	f000 fcb1 	bl	d59ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d508a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d508e:	2100      	movs	r1, #0
   d5090:	b280      	uxth	r0, r0
   d5092:	f001 f9c4 	bl	d641e <digitalWrite>
   d5096:	e780      	b.n	d4f9a <_ZN16Adafruit_SSD13065beginEhhbb+0x106>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   d5098:	4a1e      	ldr	r2, [pc, #120]	; (d5114 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   d509a:	4293      	cmp	r3, r2
   d509c:	d10e      	bne.n	d50bc <_ZN16Adafruit_SSD13065beginEhhbb+0x228>
    ssd1306_commandList(init4b, sizeof(init4b));
   d509e:	491e      	ldr	r1, [pc, #120]	; (d5118 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   d50a0:	2203      	movs	r2, #3
   d50a2:	4620      	mov	r0, r4
   d50a4:	f7ff fe8b 	bl	d4dbe <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   d50a8:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d50ac:	2b01      	cmp	r3, #1
   d50ae:	bf0c      	ite	eq
   d50b0:	219f      	moveq	r1, #159	; 0x9f
   d50b2:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d50b4:	4620      	mov	r0, r4
   d50b6:	f7ff fe1b 	bl	d4cf0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   d50ba:	e795      	b.n	d4fe8 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   d50bc:	4a17      	ldr	r2, [pc, #92]	; (d511c <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   d50be:	4293      	cmp	r3, r2
   d50c0:	d192      	bne.n	d4fe8 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
    ssd1306_commandList(init4c, sizeof(init4c));
   d50c2:	4917      	ldr	r1, [pc, #92]	; (d5120 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   d50c4:	2203      	movs	r2, #3
   d50c6:	4620      	mov	r0, r4
   d50c8:	f7ff fe79 	bl	d4dbe <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d50cc:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d50d0:	2b01      	cmp	r3, #1
   d50d2:	bf0c      	ite	eq
   d50d4:	2110      	moveq	r1, #16
   d50d6:	21af      	movne	r1, #175	; 0xaf
   d50d8:	e7ec      	b.n	d50b4 <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
  TRANSACTION_END
   d50da:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d50de:	2101      	movs	r1, #1
   d50e0:	b280      	uxth	r0, r0
   d50e2:	f001 f99c 	bl	d641e <digitalWrite>
   d50e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d50e8:	2800      	cmp	r0, #0
   d50ea:	d095      	beq.n	d5018 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d50ec:	f000 fc65 	bl	d59ba <_ZN8SPIClass14endTransactionEv>
   d50f0:	e792      	b.n	d5018 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d50f2:	bf00      	nop
   d50f4:	000d7680 	.word	0x000d7680
   d50f8:	000d73c0 	.word	0x000d73c0
   d50fc:	000d78c8 	.word	0x000d78c8
   d5100:	000d78cc 	.word	0x000d78cc
   d5104:	000d78d0 	.word	0x000d78d0
   d5108:	00200080 	.word	0x00200080
   d510c:	000d78da 	.word	0x000d78da
   d5110:	000d78d4 	.word	0x000d78d4
   d5114:	00400080 	.word	0x00400080
   d5118:	000d78de 	.word	0x000d78de
   d511c:	00100060 	.word	0x00100060
   d5120:	000d78e1 	.word	0x000d78e1

000d5124 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5124:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d5126:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5128:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d512c:	db3d      	blt.n	d51aa <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d512e:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d5132:	4294      	cmp	r4, r2
   d5134:	dd39      	ble.n	d51aa <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   d5136:	2900      	cmp	r1, #0
      w += x;
   d5138:	bfbe      	ittt	lt
   d513a:	185b      	addlt	r3, r3, r1
   d513c:	b21b      	sxthlt	r3, r3
      x  = 0;
   d513e:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   d5140:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d5144:	18ce      	adds	r6, r1, r3
   d5146:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   d5148:	bfc4      	itt	gt
   d514a:	1a63      	subgt	r3, r4, r1
   d514c:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   d514e:	2b00      	cmp	r3, #0
   d5150:	dd2b      	ble.n	d51aa <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   d5152:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d5154:	10d6      	asrs	r6, r2, #3
   d5156:	fb14 1106 	smlabb	r1, r4, r6, r1
   d515a:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   d515c:	f002 0007 	and.w	r0, r2, #7
   d5160:	2201      	movs	r2, #1
   d5162:	4082      	lsls	r2, r0
      switch(color) {
   d5164:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   d5166:	b2d2      	uxtb	r2, r2
      switch(color) {
   d5168:	d016      	beq.n	d5198 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   d516a:	2d02      	cmp	r5, #2
   d516c:	d00b      	beq.n	d5186 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   d516e:	b9e5      	cbnz	r5, d51aa <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   d5170:	43d2      	mvns	r2, r2
   d5172:	b2d2      	uxtb	r2, r2
   d5174:	440b      	add	r3, r1
   d5176:	4299      	cmp	r1, r3
   d5178:	d017      	beq.n	d51aa <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d517a:	f811 0b01 	ldrb.w	r0, [r1], #1
   d517e:	4010      	ands	r0, r2
   d5180:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5184:	e7f7      	b.n	d5176 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   d5186:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   d5188:	4299      	cmp	r1, r3
   d518a:	d00e      	beq.n	d51aa <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d518c:	f811 0b01 	ldrb.w	r0, [r1], #1
   d5190:	4050      	eors	r0, r2
   d5192:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5196:	e7f7      	b.n	d5188 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   d5198:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   d519a:	4299      	cmp	r1, r3
   d519c:	d005      	beq.n	d51aa <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d519e:	f811 0b01 	ldrb.w	r0, [r1], #1
   d51a2:	4310      	orrs	r0, r2
   d51a4:	f801 0c01 	strb.w	r0, [r1, #-1]
   d51a8:	e7f7      	b.n	d519a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   d51aa:	bd70      	pop	{r4, r5, r6, pc}

000d51ac <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d51ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d51ae:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d51b0:	f8bd 6014 	ldrh.w	r6, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d51b4:	db76      	blt.n	d52a4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   d51b6:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d51ba:	42a9      	cmp	r1, r5
   d51bc:	da72      	bge.n	d52a4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   d51be:	2a00      	cmp	r2, #0
      __h += __y;
   d51c0:	bfbc      	itt	lt
   d51c2:	18d2      	addlt	r2, r2, r3
   d51c4:	b213      	sxthlt	r3, r2
    if((__y + __h) > HEIGHT) { // Clip bottom
   d51c6:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
      __y = 0;
   d51ca:	bfb8      	it	lt
   d51cc:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   d51ce:	18d7      	adds	r7, r2, r3
   d51d0:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   d51d2:	bfc4      	itt	gt
   d51d4:	1aa3      	subgt	r3, r4, r2
   d51d6:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   d51d8:	2b00      	cmp	r3, #0
   d51da:	dd63      	ble.n	d52a4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d51dc:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   d51e0:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   d51e2:	fb15 1104 	smlabb	r1, r5, r4, r1
      if(mod) {
   d51e6:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   d51ea:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d51ec:	eb07 0401 	add.w	r4, r7, r1
      if(mod) {
   d51f0:	d023      	beq.n	d523a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8e>
        mod = 8 - mod;
   d51f2:	f1c2 0208 	rsb	r2, r2, #8
   d51f6:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d51f8:	4d2c      	ldr	r5, [pc, #176]	; (d52ac <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   d51fa:	4293      	cmp	r3, r2
   d51fc:	bf3c      	itt	cc
   d51fe:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   d5202:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d5206:	5cad      	ldrb	r5, [r5, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   d5208:	bf3c      	itt	cc
   d520a:	fa4c fc0e 	asrcc.w	ip, ip, lr
   d520e:	ea0c 0505 	andcc.w	r5, ip, r5
        switch(color) {
   d5212:	2e01      	cmp	r6, #1
   d5214:	d007      	beq.n	d5226 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x7a>
   d5216:	2e02      	cmp	r6, #2
   d5218:	d02e      	beq.n	d5278 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xcc>
   d521a:	b94e      	cbnz	r6, d5230 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x84>
         case BLACK:   *pBuf &= ~mask; break;
   d521c:	f817 c001 	ldrb.w	ip, [r7, r1]
   d5220:	ea2c 0505 	bic.w	r5, ip, r5
   d5224:	e003      	b.n	d522e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case WHITE:   *pBuf |=  mask; break;
   d5226:	f817 c001 	ldrb.w	ip, [r7, r1]
   d522a:	ea45 050c 	orr.w	r5, r5, ip
         case INVERSE: *pBuf ^=  mask; break;
   d522e:	547d      	strb	r5, [r7, r1]
      if(h >= mod) { // More to go?
   d5230:	4293      	cmp	r3, r2
   d5232:	d337      	bcc.n	d52a4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   d5234:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   d5238:	440c      	add	r4, r1
        h -= mod;
   d523a:	1a9a      	subs	r2, r3, r2
   d523c:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   d523e:	2a07      	cmp	r2, #7
   d5240:	d90e      	bls.n	d5260 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb4>
          if(color == INVERSE) {
   d5242:	2e02      	cmp	r6, #2
   d5244:	d11d      	bne.n	d5282 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd6>
   d5246:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   d5248:	7821      	ldrb	r1, [r4, #0]
   d524a:	43c9      	mvns	r1, r1
   d524c:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   d524e:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   d5250:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   d5254:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d5256:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   d5258:	440c      	add	r4, r1
            } while(h >= 8);
   d525a:	d8f5      	bhi.n	d5248 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9c>
   d525c:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   d5260:	b302      	cbz	r2, d52a4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d5262:	4b13      	ldr	r3, [pc, #76]	; (d52b0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   d5264:	2e01      	cmp	r6, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d5266:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   d5268:	d019      	beq.n	d529e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   d526a:	2e02      	cmp	r6, #2
   d526c:	d01b      	beq.n	d52a6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   d526e:	b9ce      	cbnz	r6, d52a4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   d5270:	7822      	ldrb	r2, [r4, #0]
   d5272:	ea22 0303 	bic.w	r3, r2, r3
   d5276:	e014      	b.n	d52a2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   d5278:	f817 c001 	ldrb.w	ip, [r7, r1]
   d527c:	ea85 050c 	eor.w	r5, r5, ip
   d5280:	e7d5      	b.n	d522e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
            uint8_t val = (color != BLACK) ? 255 : 0;
   d5282:	2e00      	cmp	r6, #0
   d5284:	bf14      	ite	ne
   d5286:	25ff      	movne	r5, #255	; 0xff
   d5288:	2500      	moveq	r5, #0
   d528a:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   d528c:	7025      	strb	r5, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   d528e:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   d5290:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   d5294:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d5296:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   d5298:	440c      	add	r4, r1
            } while(h >= 8);
   d529a:	d8f7      	bhi.n	d528c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   d529c:	e7de      	b.n	d525c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb0>
           case WHITE:   *pBuf |=  mask; break;
   d529e:	7822      	ldrb	r2, [r4, #0]
   d52a0:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   d52a2:	7023      	strb	r3, [r4, #0]
}
   d52a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   d52a6:	7822      	ldrb	r2, [r4, #0]
   d52a8:	4053      	eors	r3, r2
   d52aa:	e7fa      	b.n	d52a2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   d52ac:	000d78b8 	.word	0x000d78b8
   d52b0:	000d78c0 	.word	0x000d78c0

000d52b4 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d52b4:	b470      	push	{r4, r5, r6}
   d52b6:	4614      	mov	r4, r2
  switch(rotation) {
   d52b8:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d52ba:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   d52be:	2a02      	cmp	r2, #2
   d52c0:	d00d      	beq.n	d52de <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   d52c2:	2a03      	cmp	r2, #3
   d52c4:	d018      	beq.n	d52f8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   d52c6:	2a01      	cmp	r2, #1
   d52c8:	d111      	bne.n	d52ee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   d52ca:	8902      	ldrh	r2, [r0, #8]
   d52cc:	43e4      	mvns	r4, r4
   d52ce:	4414      	add	r4, r2
   d52d0:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d52d2:	9603      	str	r6, [sp, #12]
   d52d4:	460a      	mov	r2, r1
   d52d6:	4621      	mov	r1, r4
}
   d52d8:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d52da:	f7ff bf67 	b.w	d51ac <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   d52de:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   d52e0:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   d52e2:	43e4      	mvns	r4, r4
    x -= (w-1);
   d52e4:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   d52e6:	4414      	add	r4, r2
    x -= (w-1);
   d52e8:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   d52ea:	b224      	sxth	r4, r4
    x -= (w-1);
   d52ec:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   d52ee:	9603      	str	r6, [sp, #12]
   d52f0:	4622      	mov	r2, r4
}
   d52f2:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   d52f4:	f7ff bf16 	b.w	d5124 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   d52f8:	8945      	ldrh	r5, [r0, #10]
   d52fa:	4419      	add	r1, r3
   d52fc:	1a69      	subs	r1, r5, r1
   d52fe:	b209      	sxth	r1, r1
    break;
   d5300:	e7e7      	b.n	d52d2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000d5302 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d5302:	b430      	push	{r4, r5}
   d5304:	4614      	mov	r4, r2
  switch(rotation) {
   d5306:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d5308:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   d530c:	2a02      	cmp	r2, #2
   d530e:	d00d      	beq.n	d532c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   d5310:	2a03      	cmp	r2, #3
   d5312:	d018      	beq.n	d5346 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   d5314:	2a01      	cmp	r2, #1
   d5316:	d111      	bne.n	d533c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   d5318:	18e2      	adds	r2, r4, r3
   d531a:	8904      	ldrh	r4, [r0, #8]
   d531c:	1aa4      	subs	r4, r4, r2
   d531e:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d5320:	9502      	str	r5, [sp, #8]
   d5322:	460a      	mov	r2, r1
   d5324:	4621      	mov	r1, r4
}
   d5326:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d5328:	f7ff befc 	b.w	d5124 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   d532c:	8902      	ldrh	r2, [r0, #8]
   d532e:	43c9      	mvns	r1, r1
   d5330:	4411      	add	r1, r2
    y -= (h-1);
   d5332:	18e2      	adds	r2, r4, r3
   d5334:	8944      	ldrh	r4, [r0, #10]
   d5336:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   d5338:	b209      	sxth	r1, r1
    y -= (h-1);
   d533a:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   d533c:	9502      	str	r5, [sp, #8]
   d533e:	4622      	mov	r2, r4
}
   d5340:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   d5342:	f7ff bf33 	b.w	d51ac <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   d5346:	8942      	ldrh	r2, [r0, #10]
   d5348:	43c9      	mvns	r1, r1
   d534a:	4411      	add	r1, r2
   d534c:	b209      	sxth	r1, r1
    break;
   d534e:	e7e7      	b.n	d5320 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000d5350 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   d5350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5354:	4604      	mov	r4, r0
  TRANSACTION_START
   d5356:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d5358:	2800      	cmp	r0, #0
   d535a:	d042      	beq.n	d53e2 <_ZN16Adafruit_SSD13067displayEv+0x92>
   d535c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d535e:	f000 ff09 	bl	d6174 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   d5362:	4947      	ldr	r1, [pc, #284]	; (d5480 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   d5364:	2205      	movs	r2, #5
   d5366:	4620      	mov	r0, r4
   d5368:	f7ff fd29 	bl	d4dbe <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   d536c:	7a21      	ldrb	r1, [r4, #8]
   d536e:	3901      	subs	r1, #1
   d5370:	4620      	mov	r0, r4
   d5372:	b2c9      	uxtb	r1, r1
   d5374:	f7ff fcbc 	bl	d4cf0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d5378:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d537c:	1dde      	adds	r6, r3, #7
   d537e:	bf48      	it	mi
   d5380:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   d5384:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d5388:	8923      	ldrh	r3, [r4, #8]
   d538a:	10f6      	asrs	r6, r6, #3
   d538c:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   d5390:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   d5394:	2800      	cmp	r0, #0
   d5396:	d03a      	beq.n	d540e <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   d5398:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d539c:	f000 fef8 	bl	d6190 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   d53a0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d53a2:	6803      	ldr	r3, [r0, #0]
   d53a4:	2140      	movs	r1, #64	; 0x40
   d53a6:	689b      	ldr	r3, [r3, #8]
   d53a8:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d53aa:	2701      	movs	r7, #1
    while(count--) {
   d53ac:	42b5      	cmp	r5, r6
   d53ae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d53b0:	d024      	beq.n	d53fc <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   d53b2:	2f1f      	cmp	r7, #31
   d53b4:	d90c      	bls.n	d53d0 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   d53b6:	f000 fef2 	bl	d619e <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d53ba:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d53be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d53c0:	f000 fee6 	bl	d6190 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   d53c4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d53c6:	6803      	ldr	r3, [r0, #0]
   d53c8:	2140      	movs	r1, #64	; 0x40
   d53ca:	689b      	ldr	r3, [r3, #8]
   d53cc:	4798      	blx	r3
        bytesOut = 1;
   d53ce:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   d53d0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d53d2:	f815 1b01 	ldrb.w	r1, [r5], #1
   d53d6:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d53d8:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   d53da:	689b      	ldr	r3, [r3, #8]
   d53dc:	4798      	blx	r3
      bytesOut++;
   d53de:	b2ff      	uxtb	r7, r7
    while(count--) {
   d53e0:	e7e4      	b.n	d53ac <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   d53e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d53e4:	b118      	cbz	r0, d53ee <_ZN16Adafruit_SSD13067displayEv+0x9e>
   d53e6:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d53ea:	f000 faff 	bl	d59ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d53ee:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d53f2:	2100      	movs	r1, #0
   d53f4:	b280      	uxth	r0, r0
   d53f6:	f001 f812 	bl	d641e <digitalWrite>
   d53fa:	e7b2      	b.n	d5362 <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   d53fc:	f000 fecf 	bl	d619e <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   d5400:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5402:	b378      	cbz	r0, d5464 <_ZN16Adafruit_SSD13067displayEv+0x114>
   d5404:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d5406:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d540a:	f000 beb3 	b.w	d6174 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   d540e:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d5412:	2101      	movs	r1, #1
   d5414:	b280      	uxth	r0, r0
   d5416:	f001 f802 	bl	d641e <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   d541a:	42b5      	cmp	r5, r6
   d541c:	d0f0      	beq.n	d5400 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   d541e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   d5420:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d5424:	b118      	cbz	r0, d542e <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   d5426:	4649      	mov	r1, r9
   d5428:	f000 fb4e 	bl	d5ac8 <_ZN8SPIClass8transferEh>
   d542c:	e7f5      	b.n	d541a <_ZN16Adafruit_SSD13067displayEv+0xca>
   d542e:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5430:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d5434:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d5438:	ea09 0108 	and.w	r1, r9, r8
   d543c:	b280      	uxth	r0, r0
   d543e:	f000 ffee 	bl	d641e <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d5442:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5446:	2101      	movs	r1, #1
   d5448:	b280      	uxth	r0, r0
   d544a:	f000 ffe8 	bl	d641e <digitalWrite>
      digitalWrite(clkPin , LOW);
   d544e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5452:	2100      	movs	r1, #0
   d5454:	b280      	uxth	r0, r0
   d5456:	f000 ffe2 	bl	d641e <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d545a:	3f01      	subs	r7, #1
   d545c:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d5460:	d1e8      	bne.n	d5434 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   d5462:	e7da      	b.n	d541a <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   d5464:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5468:	2101      	movs	r1, #1
   d546a:	b280      	uxth	r0, r0
   d546c:	f000 ffd7 	bl	d641e <digitalWrite>
   d5470:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5472:	b118      	cbz	r0, d547c <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   d5474:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   d5478:	f000 ba9f 	b.w	d59ba <_ZN8SPIClass14endTransactionEv>
}
   d547c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d5480:	000d78e4 	.word	0x000d78e4

000d5484 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5484:	b508      	push	{r3, lr}
   d5486:	4b02      	ldr	r3, [pc, #8]	; (d5490 <netdb_freeaddrinfo+0xc>)
   d5488:	681b      	ldr	r3, [r3, #0]
   d548a:	689b      	ldr	r3, [r3, #8]
   d548c:	9301      	str	r3, [sp, #4]
   d548e:	bd08      	pop	{r3, pc}
   d5490:	00030268 	.word	0x00030268

000d5494 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5494:	b508      	push	{r3, lr}
   d5496:	4b02      	ldr	r3, [pc, #8]	; (d54a0 <netdb_getaddrinfo+0xc>)
   d5498:	681b      	ldr	r3, [r3, #0]
   d549a:	68db      	ldr	r3, [r3, #12]
   d549c:	9301      	str	r3, [sp, #4]
   d549e:	bd08      	pop	{r3, pc}
   d54a0:	00030268 	.word	0x00030268

000d54a4 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d54a4:	b508      	push	{r3, lr}
   d54a6:	4b02      	ldr	r3, [pc, #8]	; (d54b0 <HAL_Pin_Mode+0xc>)
   d54a8:	681b      	ldr	r3, [r3, #0]
   d54aa:	689b      	ldr	r3, [r3, #8]
   d54ac:	9301      	str	r3, [sp, #4]
   d54ae:	bd08      	pop	{r3, pc}
   d54b0:	0003022c 	.word	0x0003022c

000d54b4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d54b4:	b508      	push	{r3, lr}
   d54b6:	4b02      	ldr	r3, [pc, #8]	; (d54c0 <HAL_Get_Pin_Mode+0xc>)
   d54b8:	681b      	ldr	r3, [r3, #0]
   d54ba:	68db      	ldr	r3, [r3, #12]
   d54bc:	9301      	str	r3, [sp, #4]
   d54be:	bd08      	pop	{r3, pc}
   d54c0:	0003022c 	.word	0x0003022c

000d54c4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d54c4:	b508      	push	{r3, lr}
   d54c6:	4b02      	ldr	r3, [pc, #8]	; (d54d0 <HAL_GPIO_Write+0xc>)
   d54c8:	681b      	ldr	r3, [r3, #0]
   d54ca:	691b      	ldr	r3, [r3, #16]
   d54cc:	9301      	str	r3, [sp, #4]
   d54ce:	bd08      	pop	{r3, pc}
   d54d0:	0003022c 	.word	0x0003022c

000d54d4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d54d4:	b508      	push	{r3, lr}
   d54d6:	4b02      	ldr	r3, [pc, #8]	; (d54e0 <HAL_GPIO_Read+0xc>)
   d54d8:	681b      	ldr	r3, [r3, #0]
   d54da:	695b      	ldr	r3, [r3, #20]
   d54dc:	9301      	str	r3, [sp, #4]
   d54de:	bd08      	pop	{r3, pc}
   d54e0:	0003022c 	.word	0x0003022c

000d54e4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d54e4:	b508      	push	{r3, lr}
   d54e6:	4b02      	ldr	r3, [pc, #8]	; (d54f0 <HAL_RNG_GetRandomNumber+0xc>)
   d54e8:	681b      	ldr	r3, [r3, #0]
   d54ea:	685b      	ldr	r3, [r3, #4]
   d54ec:	9301      	str	r3, [sp, #4]
   d54ee:	bd08      	pop	{r3, pc}
   d54f0:	00030218 	.word	0x00030218

000d54f4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d54f4:	b508      	push	{r3, lr}
   d54f6:	4b02      	ldr	r3, [pc, #8]	; (d5500 <HAL_Delay_Microseconds+0xc>)
   d54f8:	681b      	ldr	r3, [r3, #0]
   d54fa:	68db      	ldr	r3, [r3, #12]
   d54fc:	9301      	str	r3, [sp, #4]
   d54fe:	bd08      	pop	{r3, pc}
   d5500:	00030218 	.word	0x00030218

000d5504 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5504:	b508      	push	{r3, lr}
   d5506:	4b02      	ldr	r3, [pc, #8]	; (d5510 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5508:	681b      	ldr	r3, [r3, #0]
   d550a:	695b      	ldr	r3, [r3, #20]
   d550c:	9301      	str	r3, [sp, #4]
   d550e:	bd08      	pop	{r3, pc}
   d5510:	00030218 	.word	0x00030218

000d5514 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d5514:	b508      	push	{r3, lr}
   d5516:	4b02      	ldr	r3, [pc, #8]	; (d5520 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d5518:	681b      	ldr	r3, [r3, #0]
   d551a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d551c:	9301      	str	r3, [sp, #4]
   d551e:	bd08      	pop	{r3, pc}
   d5520:	00030234 	.word	0x00030234

000d5524 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d5524:	b508      	push	{r3, lr}
   d5526:	4b02      	ldr	r3, [pc, #8]	; (d5530 <os_mutex_create+0xc>)
   d5528:	681b      	ldr	r3, [r3, #0]
   d552a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d552c:	9301      	str	r3, [sp, #4]
   d552e:	bd08      	pop	{r3, pc}
   d5530:	00030248 	.word	0x00030248

000d5534 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   d5534:	b508      	push	{r3, lr}
   d5536:	4b02      	ldr	r3, [pc, #8]	; (d5540 <os_mutex_destroy+0xc>)
   d5538:	681b      	ldr	r3, [r3, #0]
   d553a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d553c:	9301      	str	r3, [sp, #4]
   d553e:	bd08      	pop	{r3, pc}
   d5540:	00030248 	.word	0x00030248

000d5544 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5544:	b508      	push	{r3, lr}
   d5546:	4b02      	ldr	r3, [pc, #8]	; (d5550 <os_mutex_recursive_create+0xc>)
   d5548:	681b      	ldr	r3, [r3, #0]
   d554a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d554c:	9301      	str	r3, [sp, #4]
   d554e:	bd08      	pop	{r3, pc}
   d5550:	00030248 	.word	0x00030248

000d5554 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5554:	b508      	push	{r3, lr}
   d5556:	4b02      	ldr	r3, [pc, #8]	; (d5560 <os_mutex_recursive_destroy+0xc>)
   d5558:	681b      	ldr	r3, [r3, #0]
   d555a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d555c:	9301      	str	r3, [sp, #4]
   d555e:	bd08      	pop	{r3, pc}
   d5560:	00030248 	.word	0x00030248

000d5564 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5564:	b508      	push	{r3, lr}
   d5566:	4b02      	ldr	r3, [pc, #8]	; (d5570 <inet_inet_ntop+0xc>)
   d5568:	681b      	ldr	r3, [r3, #0]
   d556a:	695b      	ldr	r3, [r3, #20]
   d556c:	9301      	str	r3, [sp, #4]
   d556e:	bd08      	pop	{r3, pc}
   d5570:	00030264 	.word	0x00030264

000d5574 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5574:	b508      	push	{r3, lr}
   d5576:	4b02      	ldr	r3, [pc, #8]	; (d5580 <hal_usart_init+0xc>)
   d5578:	681b      	ldr	r3, [r3, #0]
   d557a:	681b      	ldr	r3, [r3, #0]
   d557c:	9301      	str	r3, [sp, #4]
   d557e:	bd08      	pop	{r3, pc}
   d5580:	0003023c 	.word	0x0003023c

000d5584 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5584:	b508      	push	{r3, lr}
   d5586:	4b02      	ldr	r3, [pc, #8]	; (d5590 <hal_usart_write+0xc>)
   d5588:	681b      	ldr	r3, [r3, #0]
   d558a:	68db      	ldr	r3, [r3, #12]
   d558c:	9301      	str	r3, [sp, #4]
   d558e:	bd08      	pop	{r3, pc}
   d5590:	0003023c 	.word	0x0003023c

000d5594 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5594:	b508      	push	{r3, lr}
   d5596:	4b02      	ldr	r3, [pc, #8]	; (d55a0 <hal_usart_available+0xc>)
   d5598:	681b      	ldr	r3, [r3, #0]
   d559a:	691b      	ldr	r3, [r3, #16]
   d559c:	9301      	str	r3, [sp, #4]
   d559e:	bd08      	pop	{r3, pc}
   d55a0:	0003023c 	.word	0x0003023c

000d55a4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d55a4:	b508      	push	{r3, lr}
   d55a6:	4b02      	ldr	r3, [pc, #8]	; (d55b0 <hal_usart_read+0xc>)
   d55a8:	681b      	ldr	r3, [r3, #0]
   d55aa:	695b      	ldr	r3, [r3, #20]
   d55ac:	9301      	str	r3, [sp, #4]
   d55ae:	bd08      	pop	{r3, pc}
   d55b0:	0003023c 	.word	0x0003023c

000d55b4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d55b4:	b508      	push	{r3, lr}
   d55b6:	4b02      	ldr	r3, [pc, #8]	; (d55c0 <hal_usart_peek+0xc>)
   d55b8:	681b      	ldr	r3, [r3, #0]
   d55ba:	699b      	ldr	r3, [r3, #24]
   d55bc:	9301      	str	r3, [sp, #4]
   d55be:	bd08      	pop	{r3, pc}
   d55c0:	0003023c 	.word	0x0003023c

000d55c4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d55c4:	b508      	push	{r3, lr}
   d55c6:	4b02      	ldr	r3, [pc, #8]	; (d55d0 <hal_usart_flush+0xc>)
   d55c8:	681b      	ldr	r3, [r3, #0]
   d55ca:	69db      	ldr	r3, [r3, #28]
   d55cc:	9301      	str	r3, [sp, #4]
   d55ce:	bd08      	pop	{r3, pc}
   d55d0:	0003023c 	.word	0x0003023c

000d55d4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d55d4:	b508      	push	{r3, lr}
   d55d6:	4b02      	ldr	r3, [pc, #8]	; (d55e0 <hal_usart_is_enabled+0xc>)
   d55d8:	681b      	ldr	r3, [r3, #0]
   d55da:	6a1b      	ldr	r3, [r3, #32]
   d55dc:	9301      	str	r3, [sp, #4]
   d55de:	bd08      	pop	{r3, pc}
   d55e0:	0003023c 	.word	0x0003023c

000d55e4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d55e4:	b508      	push	{r3, lr}
   d55e6:	4b02      	ldr	r3, [pc, #8]	; (d55f0 <hal_usart_available_data_for_write+0xc>)
   d55e8:	681b      	ldr	r3, [r3, #0]
   d55ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d55ec:	9301      	str	r3, [sp, #4]
   d55ee:	bd08      	pop	{r3, pc}
   d55f0:	0003023c 	.word	0x0003023c

000d55f4 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d55f4:	b508      	push	{r3, lr}
   d55f6:	4b02      	ldr	r3, [pc, #8]	; (d5600 <hal_i2c_set_speed+0xc>)
   d55f8:	681b      	ldr	r3, [r3, #0]
   d55fa:	681b      	ldr	r3, [r3, #0]
   d55fc:	9301      	str	r3, [sp, #4]
   d55fe:	bd08      	pop	{r3, pc}
   d5600:	00030228 	.word	0x00030228

000d5604 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5604:	b508      	push	{r3, lr}
   d5606:	4b02      	ldr	r3, [pc, #8]	; (d5610 <hal_i2c_begin+0xc>)
   d5608:	681b      	ldr	r3, [r3, #0]
   d560a:	68db      	ldr	r3, [r3, #12]
   d560c:	9301      	str	r3, [sp, #4]
   d560e:	bd08      	pop	{r3, pc}
   d5610:	00030228 	.word	0x00030228

000d5614 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5614:	b508      	push	{r3, lr}
   d5616:	4b02      	ldr	r3, [pc, #8]	; (d5620 <hal_i2c_begin_transmission+0xc>)
   d5618:	681b      	ldr	r3, [r3, #0]
   d561a:	699b      	ldr	r3, [r3, #24]
   d561c:	9301      	str	r3, [sp, #4]
   d561e:	bd08      	pop	{r3, pc}
   d5620:	00030228 	.word	0x00030228

000d5624 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5624:	b508      	push	{r3, lr}
   d5626:	4b02      	ldr	r3, [pc, #8]	; (d5630 <hal_i2c_end_transmission+0xc>)
   d5628:	681b      	ldr	r3, [r3, #0]
   d562a:	69db      	ldr	r3, [r3, #28]
   d562c:	9301      	str	r3, [sp, #4]
   d562e:	bd08      	pop	{r3, pc}
   d5630:	00030228 	.word	0x00030228

000d5634 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5634:	b508      	push	{r3, lr}
   d5636:	4b02      	ldr	r3, [pc, #8]	; (d5640 <hal_i2c_write+0xc>)
   d5638:	681b      	ldr	r3, [r3, #0]
   d563a:	6a1b      	ldr	r3, [r3, #32]
   d563c:	9301      	str	r3, [sp, #4]
   d563e:	bd08      	pop	{r3, pc}
   d5640:	00030228 	.word	0x00030228

000d5644 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5644:	b508      	push	{r3, lr}
   d5646:	4b02      	ldr	r3, [pc, #8]	; (d5650 <hal_i2c_available+0xc>)
   d5648:	681b      	ldr	r3, [r3, #0]
   d564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d564c:	9301      	str	r3, [sp, #4]
   d564e:	bd08      	pop	{r3, pc}
   d5650:	00030228 	.word	0x00030228

000d5654 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5654:	b508      	push	{r3, lr}
   d5656:	4b02      	ldr	r3, [pc, #8]	; (d5660 <hal_i2c_read+0xc>)
   d5658:	681b      	ldr	r3, [r3, #0]
   d565a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d565c:	9301      	str	r3, [sp, #4]
   d565e:	bd08      	pop	{r3, pc}
   d5660:	00030228 	.word	0x00030228

000d5664 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5664:	b508      	push	{r3, lr}
   d5666:	4b02      	ldr	r3, [pc, #8]	; (d5670 <hal_i2c_peek+0xc>)
   d5668:	681b      	ldr	r3, [r3, #0]
   d566a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d566c:	9301      	str	r3, [sp, #4]
   d566e:	bd08      	pop	{r3, pc}
   d5670:	00030228 	.word	0x00030228

000d5674 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5674:	b508      	push	{r3, lr}
   d5676:	4b02      	ldr	r3, [pc, #8]	; (d5680 <hal_i2c_flush+0xc>)
   d5678:	681b      	ldr	r3, [r3, #0]
   d567a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d567c:	9301      	str	r3, [sp, #4]
   d567e:	bd08      	pop	{r3, pc}
   d5680:	00030228 	.word	0x00030228

000d5684 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5684:	b508      	push	{r3, lr}
   d5686:	4b02      	ldr	r3, [pc, #8]	; (d5690 <hal_i2c_is_enabled+0xc>)
   d5688:	681b      	ldr	r3, [r3, #0]
   d568a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d568c:	9301      	str	r3, [sp, #4]
   d568e:	bd08      	pop	{r3, pc}
   d5690:	00030228 	.word	0x00030228

000d5694 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5694:	b508      	push	{r3, lr}
   d5696:	4b02      	ldr	r3, [pc, #8]	; (d56a0 <hal_i2c_init+0xc>)
   d5698:	681b      	ldr	r3, [r3, #0]
   d569a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d569c:	9301      	str	r3, [sp, #4]
   d569e:	bd08      	pop	{r3, pc}
   d56a0:	00030228 	.word	0x00030228

000d56a4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d56a4:	b508      	push	{r3, lr}
   d56a6:	4b02      	ldr	r3, [pc, #8]	; (d56b0 <hal_spi_begin+0xc>)
   d56a8:	681b      	ldr	r3, [r3, #0]
   d56aa:	681b      	ldr	r3, [r3, #0]
   d56ac:	9301      	str	r3, [sp, #4]
   d56ae:	bd08      	pop	{r3, pc}
   d56b0:	00030230 	.word	0x00030230

000d56b4 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d56b4:	b508      	push	{r3, lr}
   d56b6:	4b02      	ldr	r3, [pc, #8]	; (d56c0 <hal_spi_transfer+0xc>)
   d56b8:	681b      	ldr	r3, [r3, #0]
   d56ba:	695b      	ldr	r3, [r3, #20]
   d56bc:	9301      	str	r3, [sp, #4]
   d56be:	bd08      	pop	{r3, pc}
   d56c0:	00030230 	.word	0x00030230

000d56c4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d56c4:	b508      	push	{r3, lr}
   d56c6:	4b02      	ldr	r3, [pc, #8]	; (d56d0 <hal_spi_init+0xc>)
   d56c8:	681b      	ldr	r3, [r3, #0]
   d56ca:	69db      	ldr	r3, [r3, #28]
   d56cc:	9301      	str	r3, [sp, #4]
   d56ce:	bd08      	pop	{r3, pc}
   d56d0:	00030230 	.word	0x00030230

000d56d4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d56d4:	b508      	push	{r3, lr}
   d56d6:	4b02      	ldr	r3, [pc, #8]	; (d56e0 <hal_spi_is_enabled+0xc>)
   d56d8:	681b      	ldr	r3, [r3, #0]
   d56da:	6a1b      	ldr	r3, [r3, #32]
   d56dc:	9301      	str	r3, [sp, #4]
   d56de:	bd08      	pop	{r3, pc}
   d56e0:	00030230 	.word	0x00030230

000d56e4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d56e4:	b508      	push	{r3, lr}
   d56e6:	4b02      	ldr	r3, [pc, #8]	; (d56f0 <hal_spi_info+0xc>)
   d56e8:	681b      	ldr	r3, [r3, #0]
   d56ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d56ec:	9301      	str	r3, [sp, #4]
   d56ee:	bd08      	pop	{r3, pc}
   d56f0:	00030230 	.word	0x00030230

000d56f4 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d56f4:	b508      	push	{r3, lr}
   d56f6:	4b02      	ldr	r3, [pc, #8]	; (d5700 <hal_spi_set_settings+0xc>)
   d56f8:	681b      	ldr	r3, [r3, #0]
   d56fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d56fc:	9301      	str	r3, [sp, #4]
   d56fe:	bd08      	pop	{r3, pc}
   d5700:	00030230 	.word	0x00030230

000d5704 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d5704:	b508      	push	{r3, lr}
   d5706:	4b02      	ldr	r3, [pc, #8]	; (d5710 <hal_spi_acquire+0xc>)
   d5708:	681b      	ldr	r3, [r3, #0]
   d570a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d570c:	9301      	str	r3, [sp, #4]
   d570e:	bd08      	pop	{r3, pc}
   d5710:	00030230 	.word	0x00030230

000d5714 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d5714:	b508      	push	{r3, lr}
   d5716:	4b02      	ldr	r3, [pc, #8]	; (d5720 <hal_spi_release+0xc>)
   d5718:	681b      	ldr	r3, [r3, #0]
   d571a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d571c:	9301      	str	r3, [sp, #4]
   d571e:	bd08      	pop	{r3, pc}
   d5720:	00030230 	.word	0x00030230

000d5724 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5724:	b508      	push	{r3, lr}
   d5726:	4b02      	ldr	r3, [pc, #8]	; (d5730 <HAL_USB_USART_Init+0xc>)
   d5728:	681b      	ldr	r3, [r3, #0]
   d572a:	681b      	ldr	r3, [r3, #0]
   d572c:	9301      	str	r3, [sp, #4]
   d572e:	bd08      	pop	{r3, pc}
   d5730:	0003024c 	.word	0x0003024c

000d5734 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5734:	b508      	push	{r3, lr}
   d5736:	4b02      	ldr	r3, [pc, #8]	; (d5740 <HAL_USB_USART_Available_Data+0xc>)
   d5738:	681b      	ldr	r3, [r3, #0]
   d573a:	691b      	ldr	r3, [r3, #16]
   d573c:	9301      	str	r3, [sp, #4]
   d573e:	bd08      	pop	{r3, pc}
   d5740:	0003024c 	.word	0x0003024c

000d5744 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5744:	b508      	push	{r3, lr}
   d5746:	4b02      	ldr	r3, [pc, #8]	; (d5750 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5748:	681b      	ldr	r3, [r3, #0]
   d574a:	695b      	ldr	r3, [r3, #20]
   d574c:	9301      	str	r3, [sp, #4]
   d574e:	bd08      	pop	{r3, pc}
   d5750:	0003024c 	.word	0x0003024c

000d5754 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5754:	b508      	push	{r3, lr}
   d5756:	4b02      	ldr	r3, [pc, #8]	; (d5760 <HAL_USB_USART_Receive_Data+0xc>)
   d5758:	681b      	ldr	r3, [r3, #0]
   d575a:	699b      	ldr	r3, [r3, #24]
   d575c:	9301      	str	r3, [sp, #4]
   d575e:	bd08      	pop	{r3, pc}
   d5760:	0003024c 	.word	0x0003024c

000d5764 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5764:	b508      	push	{r3, lr}
   d5766:	4b02      	ldr	r3, [pc, #8]	; (d5770 <HAL_USB_USART_Send_Data+0xc>)
   d5768:	681b      	ldr	r3, [r3, #0]
   d576a:	69db      	ldr	r3, [r3, #28]
   d576c:	9301      	str	r3, [sp, #4]
   d576e:	bd08      	pop	{r3, pc}
   d5770:	0003024c 	.word	0x0003024c

000d5774 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5774:	b508      	push	{r3, lr}
   d5776:	4b02      	ldr	r3, [pc, #8]	; (d5780 <HAL_USB_USART_Flush_Data+0xc>)
   d5778:	681b      	ldr	r3, [r3, #0]
   d577a:	6a1b      	ldr	r3, [r3, #32]
   d577c:	9301      	str	r3, [sp, #4]
   d577e:	bd08      	pop	{r3, pc}
   d5780:	0003024c 	.word	0x0003024c

000d5784 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5784:	b508      	push	{r3, lr}
   d5786:	4b02      	ldr	r3, [pc, #8]	; (d5790 <panic_+0xc>)
   d5788:	681b      	ldr	r3, [r3, #0]
   d578a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d578c:	9301      	str	r3, [sp, #4]
   d578e:	bd08      	pop	{r3, pc}
   d5790:	00030260 	.word	0x00030260

000d5794 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5794:	b508      	push	{r3, lr}
   d5796:	4b02      	ldr	r3, [pc, #8]	; (d57a0 <set_system_mode+0xc>)
   d5798:	681b      	ldr	r3, [r3, #0]
   d579a:	685b      	ldr	r3, [r3, #4]
   d579c:	9301      	str	r3, [sp, #4]
   d579e:	bd08      	pop	{r3, pc}
   d57a0:	00030220 	.word	0x00030220

000d57a4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d57a4:	b508      	push	{r3, lr}
   d57a6:	4b02      	ldr	r3, [pc, #8]	; (d57b0 <system_delay_ms+0xc>)
   d57a8:	681b      	ldr	r3, [r3, #0]
   d57aa:	695b      	ldr	r3, [r3, #20]
   d57ac:	9301      	str	r3, [sp, #4]
   d57ae:	bd08      	pop	{r3, pc}
   d57b0:	00030220 	.word	0x00030220

000d57b4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d57b4:	b508      	push	{r3, lr}
   d57b6:	4b02      	ldr	r3, [pc, #8]	; (d57c0 <system_thread_set_state+0xc>)
   d57b8:	681b      	ldr	r3, [r3, #0]
   d57ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d57bc:	9301      	str	r3, [sp, #4]
   d57be:	bd08      	pop	{r3, pc}
   d57c0:	00030220 	.word	0x00030220

000d57c4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d57c4:	b508      	push	{r3, lr}
   d57c6:	4b03      	ldr	r3, [pc, #12]	; (d57d4 <system_ctrl_set_app_request_handler+0x10>)
   d57c8:	681b      	ldr	r3, [r3, #0]
   d57ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d57ce:	9301      	str	r3, [sp, #4]
   d57d0:	bd08      	pop	{r3, pc}
   d57d2:	0000      	.short	0x0000
   d57d4:	00030220 	.word	0x00030220

000d57d8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d57d8:	b508      	push	{r3, lr}
   d57da:	4b03      	ldr	r3, [pc, #12]	; (d57e8 <system_ctrl_set_result+0x10>)
   d57dc:	681b      	ldr	r3, [r3, #0]
   d57de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d57e2:	9301      	str	r3, [sp, #4]
   d57e4:	bd08      	pop	{r3, pc}
   d57e6:	0000      	.short	0x0000
   d57e8:	00030220 	.word	0x00030220

000d57ec <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d57ec:	b508      	push	{r3, lr}
   d57ee:	4b02      	ldr	r3, [pc, #8]	; (d57f8 <network_connect+0xc>)
   d57f0:	681b      	ldr	r3, [r3, #0]
   d57f2:	685b      	ldr	r3, [r3, #4]
   d57f4:	9301      	str	r3, [sp, #4]
   d57f6:	bd08      	pop	{r3, pc}
   d57f8:	00030240 	.word	0x00030240

000d57fc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d57fc:	b508      	push	{r3, lr}
   d57fe:	4b02      	ldr	r3, [pc, #8]	; (d5808 <network_connecting+0xc>)
   d5800:	681b      	ldr	r3, [r3, #0]
   d5802:	689b      	ldr	r3, [r3, #8]
   d5804:	9301      	str	r3, [sp, #4]
   d5806:	bd08      	pop	{r3, pc}
   d5808:	00030240 	.word	0x00030240

000d580c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d580c:	b508      	push	{r3, lr}
   d580e:	4b02      	ldr	r3, [pc, #8]	; (d5818 <network_disconnect+0xc>)
   d5810:	681b      	ldr	r3, [r3, #0]
   d5812:	68db      	ldr	r3, [r3, #12]
   d5814:	9301      	str	r3, [sp, #4]
   d5816:	bd08      	pop	{r3, pc}
   d5818:	00030240 	.word	0x00030240

000d581c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d581c:	b508      	push	{r3, lr}
   d581e:	4b02      	ldr	r3, [pc, #8]	; (d5828 <network_ready+0xc>)
   d5820:	681b      	ldr	r3, [r3, #0]
   d5822:	691b      	ldr	r3, [r3, #16]
   d5824:	9301      	str	r3, [sp, #4]
   d5826:	bd08      	pop	{r3, pc}
   d5828:	00030240 	.word	0x00030240

000d582c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d582c:	b508      	push	{r3, lr}
   d582e:	4b02      	ldr	r3, [pc, #8]	; (d5838 <network_on+0xc>)
   d5830:	681b      	ldr	r3, [r3, #0]
   d5832:	695b      	ldr	r3, [r3, #20]
   d5834:	9301      	str	r3, [sp, #4]
   d5836:	bd08      	pop	{r3, pc}
   d5838:	00030240 	.word	0x00030240

000d583c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d583c:	b508      	push	{r3, lr}
   d583e:	4b02      	ldr	r3, [pc, #8]	; (d5848 <network_off+0xc>)
   d5840:	681b      	ldr	r3, [r3, #0]
   d5842:	699b      	ldr	r3, [r3, #24]
   d5844:	9301      	str	r3, [sp, #4]
   d5846:	bd08      	pop	{r3, pc}
   d5848:	00030240 	.word	0x00030240

000d584c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d584c:	b508      	push	{r3, lr}
   d584e:	4b02      	ldr	r3, [pc, #8]	; (d5858 <network_listen+0xc>)
   d5850:	681b      	ldr	r3, [r3, #0]
   d5852:	69db      	ldr	r3, [r3, #28]
   d5854:	9301      	str	r3, [sp, #4]
   d5856:	bd08      	pop	{r3, pc}
   d5858:	00030240 	.word	0x00030240

000d585c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d585c:	b508      	push	{r3, lr}
   d585e:	4b02      	ldr	r3, [pc, #8]	; (d5868 <network_listening+0xc>)
   d5860:	681b      	ldr	r3, [r3, #0]
   d5862:	6a1b      	ldr	r3, [r3, #32]
   d5864:	9301      	str	r3, [sp, #4]
   d5866:	bd08      	pop	{r3, pc}
   d5868:	00030240 	.word	0x00030240

000d586c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d586c:	b508      	push	{r3, lr}
   d586e:	4b02      	ldr	r3, [pc, #8]	; (d5878 <network_set_listen_timeout+0xc>)
   d5870:	681b      	ldr	r3, [r3, #0]
   d5872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5874:	9301      	str	r3, [sp, #4]
   d5876:	bd08      	pop	{r3, pc}
   d5878:	00030240 	.word	0x00030240

000d587c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d587c:	b508      	push	{r3, lr}
   d587e:	4b02      	ldr	r3, [pc, #8]	; (d5888 <network_get_listen_timeout+0xc>)
   d5880:	681b      	ldr	r3, [r3, #0]
   d5882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5884:	9301      	str	r3, [sp, #4]
   d5886:	bd08      	pop	{r3, pc}
   d5888:	00030240 	.word	0x00030240

000d588c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d588c:	b508      	push	{r3, lr}
   d588e:	4b02      	ldr	r3, [pc, #8]	; (d5898 <network_is_on+0xc>)
   d5890:	681b      	ldr	r3, [r3, #0]
   d5892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5894:	9301      	str	r3, [sp, #4]
   d5896:	bd08      	pop	{r3, pc}
   d5898:	00030240 	.word	0x00030240

000d589c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d589c:	b508      	push	{r3, lr}
   d589e:	4b02      	ldr	r3, [pc, #8]	; (d58a8 <network_is_off+0xc>)
   d58a0:	681b      	ldr	r3, [r3, #0]
   d58a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d58a4:	9301      	str	r3, [sp, #4]
   d58a6:	bd08      	pop	{r3, pc}
   d58a8:	00030240 	.word	0x00030240

000d58ac <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d58ac:	b508      	push	{r3, lr}
   d58ae:	4b02      	ldr	r3, [pc, #8]	; (d58b8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d58b0:	681b      	ldr	r3, [r3, #0]
   d58b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d58b4:	9301      	str	r3, [sp, #4]
   d58b6:	bd08      	pop	{r3, pc}
   d58b8:	00030244 	.word	0x00030244

000d58bc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d58bc:	b508      	push	{r3, lr}
   d58be:	4b02      	ldr	r3, [pc, #8]	; (d58c8 <malloc+0xc>)
   d58c0:	681b      	ldr	r3, [r3, #0]
   d58c2:	681b      	ldr	r3, [r3, #0]
   d58c4:	9301      	str	r3, [sp, #4]
   d58c6:	bd08      	pop	{r3, pc}
   d58c8:	0003021c 	.word	0x0003021c

000d58cc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d58cc:	b508      	push	{r3, lr}
   d58ce:	4b02      	ldr	r3, [pc, #8]	; (d58d8 <free+0xc>)
   d58d0:	681b      	ldr	r3, [r3, #0]
   d58d2:	685b      	ldr	r3, [r3, #4]
   d58d4:	9301      	str	r3, [sp, #4]
   d58d6:	bd08      	pop	{r3, pc}
   d58d8:	0003021c 	.word	0x0003021c

000d58dc <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d58dc:	b508      	push	{r3, lr}
   d58de:	4b02      	ldr	r3, [pc, #8]	; (d58e8 <vsnprintf+0xc>)
   d58e0:	681b      	ldr	r3, [r3, #0]
   d58e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d58e4:	9301      	str	r3, [sp, #4]
   d58e6:	bd08      	pop	{r3, pc}
   d58e8:	0003021c 	.word	0x0003021c

000d58ec <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d58ec:	b508      	push	{r3, lr}
   d58ee:	4b02      	ldr	r3, [pc, #8]	; (d58f8 <newlib_impure_ptr_callback+0xc>)
   d58f0:	681b      	ldr	r3, [r3, #0]
   d58f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d58f4:	9301      	str	r3, [sp, #4]
   d58f6:	bd08      	pop	{r3, pc}
   d58f8:	0003021c 	.word	0x0003021c

000d58fc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d58fc:	2200      	movs	r2, #0
   d58fe:	6840      	ldr	r0, [r0, #4]
   d5900:	4611      	mov	r1, r2
   d5902:	f7ff bfab 	b.w	d585c <network_listening>

000d5906 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5906:	2200      	movs	r2, #0
   d5908:	6840      	ldr	r0, [r0, #4]
   d590a:	4611      	mov	r1, r2
   d590c:	f7ff bfb6 	b.w	d587c <network_get_listen_timeout>

000d5910 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5910:	6840      	ldr	r0, [r0, #4]
   d5912:	2200      	movs	r2, #0
   d5914:	f7ff bfaa 	b.w	d586c <network_set_listen_timeout>

000d5918 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5918:	6840      	ldr	r0, [r0, #4]
   d591a:	2200      	movs	r2, #0
   d591c:	f081 0101 	eor.w	r1, r1, #1
   d5920:	f7ff bf94 	b.w	d584c <network_listen>

000d5924 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5924:	2300      	movs	r3, #0
   d5926:	6840      	ldr	r0, [r0, #4]
   d5928:	461a      	mov	r2, r3
   d592a:	4619      	mov	r1, r3
   d592c:	f7ff bf86 	b.w	d583c <network_off>

000d5930 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5930:	2300      	movs	r3, #0
   d5932:	6840      	ldr	r0, [r0, #4]
   d5934:	461a      	mov	r2, r3
   d5936:	4619      	mov	r1, r3
   d5938:	f7ff bf78 	b.w	d582c <network_on>

000d593c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d593c:	2200      	movs	r2, #0
   d593e:	6840      	ldr	r0, [r0, #4]
   d5940:	4611      	mov	r1, r2
   d5942:	f7ff bf6b 	b.w	d581c <network_ready>

000d5946 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5946:	2200      	movs	r2, #0
   d5948:	6840      	ldr	r0, [r0, #4]
   d594a:	4611      	mov	r1, r2
   d594c:	f7ff bf56 	b.w	d57fc <network_connecting>

000d5950 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5950:	6840      	ldr	r0, [r0, #4]
   d5952:	2200      	movs	r2, #0
   d5954:	2102      	movs	r1, #2
   d5956:	f7ff bf59 	b.w	d580c <network_disconnect>

000d595a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d595a:	2300      	movs	r3, #0
   d595c:	6840      	ldr	r0, [r0, #4]
   d595e:	461a      	mov	r2, r3
   d5960:	f7ff bf44 	b.w	d57ec <network_connect>

000d5964 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5964:	4b02      	ldr	r3, [pc, #8]	; (d5970 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5966:	2203      	movs	r2, #3
   d5968:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d596a:	4a02      	ldr	r2, [pc, #8]	; (d5974 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d596c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d596e:	4770      	bx	lr
   d5970:	2003e650 	.word	0x2003e650
   d5974:	000d78f4 	.word	0x000d78f4

000d5978 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d5978:	2100      	movs	r1, #0
   d597a:	f7ff bec3 	b.w	d5704 <hal_spi_acquire>

000d597e <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d597e:	2100      	movs	r1, #0
   d5980:	f7ff bec8 	b.w	d5714 <hal_spi_release>

000d5984 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5984:	b510      	push	{r4, lr}
   d5986:	4604      	mov	r4, r0
   d5988:	4608      	mov	r0, r1
{
    _spi = spi;
   d598a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d598c:	f7ff fe9a 	bl	d56c4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5990:	2300      	movs	r3, #0
   d5992:	6063      	str	r3, [r4, #4]
}
   d5994:	4620      	mov	r0, r4
   d5996:	bd10      	pop	{r4, pc}

000d5998 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5998:	b510      	push	{r4, lr}
   d599a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d599c:	7800      	ldrb	r0, [r0, #0]
   d599e:	f7ff ffeb 	bl	d5978 <_ZN8SPIClass4lockEv.isra.0>
   d59a2:	b948      	cbnz	r0, d59b8 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d59a4:	7820      	ldrb	r0, [r4, #0]
   d59a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d59aa:	f7ff fe7b 	bl	d56a4 <hal_spi_begin>
        unlock();
   d59ae:	7820      	ldrb	r0, [r4, #0]
    }
}
   d59b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d59b4:	f7ff bfe3 	b.w	d597e <_ZN8SPIClass6unlockEv.isra.0>
}
   d59b8:	bd10      	pop	{r4, pc}

000d59ba <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d59ba:	7800      	ldrb	r0, [r0, #0]
   d59bc:	f7ff bfdf 	b.w	d597e <_ZN8SPIClass6unlockEv.isra.0>

000d59c0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d59c0:	0840      	lsrs	r0, r0, #1
{
   d59c2:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d59c4:	6018      	str	r0, [r3, #0]
   d59c6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d59c8:	6818      	ldr	r0, [r3, #0]
   d59ca:	4288      	cmp	r0, r1
   d59cc:	b2e5      	uxtb	r5, r4
   d59ce:	d906      	bls.n	d59de <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d59d0:	3401      	adds	r4, #1
   d59d2:	2c08      	cmp	r4, #8
   d59d4:	d002      	beq.n	d59dc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d59d6:	0840      	lsrs	r0, r0, #1
   d59d8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d59da:	e7f5      	b.n	d59c8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d59dc:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d59de:	4b02      	ldr	r3, [pc, #8]	; (d59e8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d59e0:	5d5b      	ldrb	r3, [r3, r5]
   d59e2:	7013      	strb	r3, [r2, #0]
}
   d59e4:	bd30      	pop	{r4, r5, pc}
   d59e6:	bf00      	nop
   d59e8:	000d7928 	.word	0x000d7928

000d59ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d59ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d59f0:	4606      	mov	r6, r0
   d59f2:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d59f4:	7800      	ldrb	r0, [r0, #0]
{
   d59f6:	460c      	mov	r4, r1
    CHECK(lock());
   d59f8:	f7ff ffbe 	bl	d5978 <_ZN8SPIClass4lockEv.isra.0>
   d59fc:	2800      	cmp	r0, #0
   d59fe:	db1b      	blt.n	d5a38 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d5a00:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d5a02:	2214      	movs	r2, #20
   d5a04:	2100      	movs	r1, #0
   d5a06:	a809      	add	r0, sp, #36	; 0x24
   d5a08:	f001 f98a 	bl	d6d20 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5a0c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d5a0e:	2200      	movs	r2, #0
   d5a10:	a909      	add	r1, sp, #36	; 0x24
   d5a12:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d5a14:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d5a18:	f7ff fe64 	bl	d56e4 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d5a1c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d5a20:	b113      	cbz	r3, d5a28 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d5a22:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d5a26:	b155      	cbz	r5, d5a3e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d5a28:	2700      	movs	r7, #0
   d5a2a:	46b9      	mov	r9, r7
   d5a2c:	46b8      	mov	r8, r7
   d5a2e:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d5a30:	7923      	ldrb	r3, [r4, #4]
   d5a32:	b15d      	cbz	r5, d5a4c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d5a34:	b1c3      	cbz	r3, d5a68 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d5a36:	2000      	movs	r0, #0
}
   d5a38:	b00f      	add	sp, #60	; 0x3c
   d5a3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d5a3e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d5a42:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d5a46:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d5a4a:	e7f1      	b.n	d5a30 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d5a4c:	2b00      	cmp	r3, #0
   d5a4e:	d135      	bne.n	d5abc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d5a50:	68a3      	ldr	r3, [r4, #8]
   d5a52:	4543      	cmp	r3, r8
   d5a54:	d108      	bne.n	d5a68 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d5a56:	f88d 9020 	strb.w	r9, [sp, #32]
   d5a5a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d5a5e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5a62:	89a3      	ldrh	r3, [r4, #12]
   d5a64:	429a      	cmp	r2, r3
   d5a66:	d0e6      	beq.n	d5a36 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d5a68:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d5a6a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d5a6c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d5a70:	980a      	ldr	r0, [sp, #40]	; 0x28
   d5a72:	ab04      	add	r3, sp, #16
   d5a74:	f10d 020f 	add.w	r2, sp, #15
   d5a78:	f7ff ffa2 	bl	d59c0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d5a7c:	7921      	ldrb	r1, [r4, #4]
   d5a7e:	b985      	cbnz	r5, d5aa2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d5a80:	b989      	cbnz	r1, d5aa6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d5a82:	68a3      	ldr	r3, [r4, #8]
   d5a84:	4543      	cmp	r3, r8
   d5a86:	d30e      	bcc.n	d5aa6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d5a88:	f88d 9020 	strb.w	r9, [sp, #32]
   d5a8c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d5a90:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5a94:	89a3      	ldrh	r3, [r4, #12]
   d5a96:	429a      	cmp	r2, r3
   d5a98:	d105      	bne.n	d5aa6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d5a9a:	9b04      	ldr	r3, [sp, #16]
   d5a9c:	4543      	cmp	r3, r8
   d5a9e:	d102      	bne.n	d5aa6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d5aa0:	e7c9      	b.n	d5a36 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d5aa2:	2900      	cmp	r1, #0
   d5aa4:	d1f9      	bne.n	d5a9a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d5aa6:	2300      	movs	r3, #0
   d5aa8:	9301      	str	r3, [sp, #4]
   d5aaa:	7b63      	ldrb	r3, [r4, #13]
   d5aac:	9300      	str	r3, [sp, #0]
   d5aae:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d5ab2:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d5ab4:	7830      	ldrb	r0, [r6, #0]
   d5ab6:	f7ff fe1d 	bl	d56f4 <hal_spi_set_settings>
   d5aba:	e7bc      	b.n	d5a36 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d5abc:	e9cd 5500 	strd	r5, r5, [sp]
   d5ac0:	462b      	mov	r3, r5
   d5ac2:	462a      	mov	r2, r5
   d5ac4:	2101      	movs	r1, #1
   d5ac6:	e7f5      	b.n	d5ab4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d5ac8 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5ac8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d5aca:	7800      	ldrb	r0, [r0, #0]
   d5acc:	f7ff fdf2 	bl	d56b4 <hal_spi_transfer>
}
   d5ad0:	b2c0      	uxtb	r0, r0
   d5ad2:	bd08      	pop	{r3, pc}

000d5ad4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5ad4:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5ad6:	4b09      	ldr	r3, [pc, #36]	; (d5afc <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5ad8:	4c09      	ldr	r4, [pc, #36]	; (d5b00 <_GLOBAL__sub_I_System+0x2c>)
   d5ada:	2202      	movs	r2, #2
   d5adc:	2000      	movs	r0, #0
   d5ade:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d5ae0:	4b08      	ldr	r3, [pc, #32]	; (d5b04 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d5ae2:	6020      	str	r0, [r4, #0]
   d5ae4:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d5ae6:	71a0      	strb	r0, [r4, #6]
   d5ae8:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5aea:	f7ff fe53 	bl	d5794 <set_system_mode>
SystemClass System;
   d5aee:	4620      	mov	r0, r4
   d5af0:	4a05      	ldr	r2, [pc, #20]	; (d5b08 <_GLOBAL__sub_I_System+0x34>)
   d5af2:	4906      	ldr	r1, [pc, #24]	; (d5b0c <_GLOBAL__sub_I_System+0x38>)
   d5af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5af8:	f000 bcfe 	b.w	d64f8 <__aeabi_atexit>
   d5afc:	2003e664 	.word	0x2003e664
   d5b00:	2003e658 	.word	0x2003e658
   d5b04:	ffff0000 	.word	0xffff0000
   d5b08:	2003e5c0 	.word	0x2003e5c0
   d5b0c:	000d40c5 	.word	0x000d40c5

000d5b10 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5b10:	b510      	push	{r4, lr}
   d5b12:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5b14:	6800      	ldr	r0, [r0, #0]
   d5b16:	b108      	cbz	r0, d5b1c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5b18:	f7ff fd1c 	bl	d5554 <os_mutex_recursive_destroy>
    }
   d5b1c:	4620      	mov	r0, r4
   d5b1e:	bd10      	pop	{r4, pc}

000d5b20 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5b20:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5b22:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5b24:	4604      	mov	r4, r0
      if (_M_manager)
   d5b26:	b113      	cbz	r3, d5b2e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5b28:	2203      	movs	r2, #3
   d5b2a:	4601      	mov	r1, r0
   d5b2c:	4798      	blx	r3
    }
   d5b2e:	4620      	mov	r0, r4
   d5b30:	bd10      	pop	{r4, pc}
	...

000d5b34 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d5b34:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d5b36:	4c06      	ldr	r4, [pc, #24]	; (d5b50 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5b38:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d5b3a:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5b3c:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5b3e:	f7ff fd01 	bl	d5544 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d5b42:	4620      	mov	r0, r4
   d5b44:	4a03      	ldr	r2, [pc, #12]	; (d5b54 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5b46:	4904      	ldr	r1, [pc, #16]	; (d5b58 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d5b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d5b4c:	f000 bcd4 	b.w	d64f8 <__aeabi_atexit>
   d5b50:	2003e668 	.word	0x2003e668
   d5b54:	2003e5c0 	.word	0x2003e5c0
   d5b58:	000d5b11 	.word	0x000d5b11

000d5b5c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5b5e:	4606      	mov	r6, r0
   d5b60:	460d      	mov	r5, r1
  size_t n = 0;
   d5b62:	188f      	adds	r7, r1, r2
   d5b64:	2400      	movs	r4, #0
  while (size--) {
   d5b66:	42bd      	cmp	r5, r7
   d5b68:	d00c      	beq.n	d5b84 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5b6a:	6833      	ldr	r3, [r6, #0]
   d5b6c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5b70:	689b      	ldr	r3, [r3, #8]
   d5b72:	4630      	mov	r0, r6
   d5b74:	4798      	blx	r3
     if (chunk>=0)
   d5b76:	1e03      	subs	r3, r0, #0
   d5b78:	db01      	blt.n	d5b7e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5b7a:	441c      	add	r4, r3
  while (size--) {
   d5b7c:	e7f3      	b.n	d5b66 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5b7e:	2c00      	cmp	r4, #0
   d5b80:	bf08      	it	eq
   d5b82:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5b84:	4620      	mov	r0, r4
   d5b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5b88 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5b88:	b513      	push	{r0, r1, r4, lr}
   d5b8a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d5b8c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5b8e:	b159      	cbz	r1, d5ba8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5b90:	9101      	str	r1, [sp, #4]
   d5b92:	f001 f8f1 	bl	d6d78 <strlen>
   d5b96:	6823      	ldr	r3, [r4, #0]
   d5b98:	9901      	ldr	r1, [sp, #4]
   d5b9a:	68db      	ldr	r3, [r3, #12]
   d5b9c:	4602      	mov	r2, r0
   d5b9e:	4620      	mov	r0, r4
    }
   d5ba0:	b002      	add	sp, #8
   d5ba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5ba6:	4718      	bx	r3
    }
   d5ba8:	b002      	add	sp, #8
   d5baa:	bd10      	pop	{r4, pc}

000d5bac <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d5bac:	b508      	push	{r3, lr}
  return write(str);
   d5bae:	f7ff ffeb 	bl	d5b88 <_ZN5Print5writeEPKc>
}
   d5bb2:	bd08      	pop	{r3, pc}

000d5bb4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d5bb4:	6803      	ldr	r3, [r0, #0]
   d5bb6:	689b      	ldr	r3, [r3, #8]
   d5bb8:	4718      	bx	r3

000d5bba <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5bba:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5bbc:	210d      	movs	r1, #13
{
   d5bbe:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5bc0:	f7ff fff8 	bl	d5bb4 <_ZN5Print5printEc>
  n += print('\n');
   d5bc4:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5bc6:	4604      	mov	r4, r0
  n += print('\n');
   d5bc8:	4628      	mov	r0, r5
   d5bca:	f7ff fff3 	bl	d5bb4 <_ZN5Print5printEc>
  return n;
}
   d5bce:	4420      	add	r0, r4
   d5bd0:	bd38      	pop	{r3, r4, r5, pc}

000d5bd2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5bd2:	b538      	push	{r3, r4, r5, lr}
   d5bd4:	4605      	mov	r5, r0
  return write(str);
   d5bd6:	f7ff ffd7 	bl	d5b88 <_ZN5Print5writeEPKc>
   d5bda:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d5bdc:	4628      	mov	r0, r5
   d5bde:	f7ff ffec 	bl	d5bba <_ZN5Print7printlnEv>
  return n;
}
   d5be2:	4420      	add	r0, r4
   d5be4:	bd38      	pop	{r3, r4, r5, pc}

000d5be6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5be6:	b530      	push	{r4, r5, lr}
   d5be8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5bea:	2300      	movs	r3, #0
   d5bec:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5bf0:	2a01      	cmp	r2, #1
   d5bf2:	bf98      	it	ls
   d5bf4:	220a      	movls	r2, #10
   d5bf6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5bf8:	460d      	mov	r5, r1
   d5bfa:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5bfe:	fb01 5312 	mls	r3, r1, r2, r5
   d5c02:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5c06:	2b09      	cmp	r3, #9
   d5c08:	bf94      	ite	ls
   d5c0a:	3330      	addls	r3, #48	; 0x30
   d5c0c:	3337      	addhi	r3, #55	; 0x37
   d5c0e:	b2db      	uxtb	r3, r3
  } while(n);
   d5c10:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5c12:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5c16:	d9ef      	bls.n	d5bf8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5c18:	4621      	mov	r1, r4
   d5c1a:	f7ff ffb5 	bl	d5b88 <_ZN5Print5writeEPKc>
}
   d5c1e:	b00b      	add	sp, #44	; 0x2c
   d5c20:	bd30      	pop	{r4, r5, pc}

000d5c22 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d5c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5c26:	b086      	sub	sp, #24
   d5c28:	af00      	add	r7, sp, #0
   d5c2a:	4605      	mov	r5, r0
   d5c2c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d5c2e:	1d38      	adds	r0, r7, #4
   d5c30:	2114      	movs	r1, #20
{
   d5c32:	4614      	mov	r4, r2
    va_copy(args2, args);
   d5c34:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d5c36:	f7ff fe51 	bl	d58dc <vsnprintf>

    if (n<bufsize)
   d5c3a:	2813      	cmp	r0, #19
   d5c3c:	d80e      	bhi.n	d5c5c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d5c3e:	1d39      	adds	r1, r7, #4
   d5c40:	4628      	mov	r0, r5
   d5c42:	f7ff ffa1 	bl	d5b88 <_ZN5Print5writeEPKc>
   d5c46:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d5c48:	b11e      	cbz	r6, d5c52 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d5c4a:	4628      	mov	r0, r5
   d5c4c:	f7ff ffb5 	bl	d5bba <_ZN5Print7printlnEv>
   d5c50:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d5c52:	4620      	mov	r0, r4
   d5c54:	3718      	adds	r7, #24
   d5c56:	46bd      	mov	sp, r7
   d5c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d5c5c:	f100 0308 	add.w	r3, r0, #8
   d5c60:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d5c64:	46e8      	mov	r8, sp
        char bigger[n+1];
   d5c66:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d5c6a:	4622      	mov	r2, r4
   d5c6c:	1c41      	adds	r1, r0, #1
   d5c6e:	683b      	ldr	r3, [r7, #0]
   d5c70:	4668      	mov	r0, sp
   d5c72:	f7ff fe33 	bl	d58dc <vsnprintf>
  return write(str);
   d5c76:	4669      	mov	r1, sp
   d5c78:	4628      	mov	r0, r5
   d5c7a:	f7ff ff85 	bl	d5b88 <_ZN5Print5writeEPKc>
   d5c7e:	4604      	mov	r4, r0
   d5c80:	46c5      	mov	sp, r8
   d5c82:	e7e1      	b.n	d5c48 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d5c84 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5c84:	2300      	movs	r3, #0
   d5c86:	6840      	ldr	r0, [r0, #4]
   d5c88:	461a      	mov	r2, r3
   d5c8a:	4619      	mov	r1, r3
   d5c8c:	f7ff bdce 	b.w	d582c <network_on>

000d5c90 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5c90:	4b01      	ldr	r3, [pc, #4]	; (d5c98 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5c92:	4a02      	ldr	r2, [pc, #8]	; (d5c9c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5c94:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5c96:	4770      	bx	lr
   d5c98:	2003e66c 	.word	0x2003e66c
   d5c9c:	000d7930 	.word	0x000d7930

000d5ca0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5ca0:	4b02      	ldr	r3, [pc, #8]	; (d5cac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5ca2:	681a      	ldr	r2, [r3, #0]
   d5ca4:	4b02      	ldr	r3, [pc, #8]	; (d5cb0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5ca6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5ca8:	4770      	bx	lr
   d5caa:	bf00      	nop
   d5cac:	2003e558 	.word	0x2003e558
   d5cb0:	2003e670 	.word	0x2003e670

000d5cb4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5cb4:	2100      	movs	r1, #0
   d5cb6:	f7ff bd75 	b.w	d57a4 <system_delay_ms>

000d5cba <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5cba:	b510      	push	{r4, lr}
   d5cbc:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5cbe:	f7ff ff2f 	bl	d5b20 <_ZNSt14_Function_baseD1Ev>
   d5cc2:	4620      	mov	r0, r4
   d5cc4:	bd10      	pop	{r4, pc}
	...

000d5cc8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5cc8:	4803      	ldr	r0, [pc, #12]	; (d5cd8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5cca:	4a04      	ldr	r2, [pc, #16]	; (d5cdc <_GLOBAL__sub_I_RGB+0x14>)
   d5ccc:	4904      	ldr	r1, [pc, #16]	; (d5ce0 <_GLOBAL__sub_I_RGB+0x18>)
   d5cce:	2300      	movs	r3, #0
   d5cd0:	6083      	str	r3, [r0, #8]
   d5cd2:	f000 bc11 	b.w	d64f8 <__aeabi_atexit>
   d5cd6:	bf00      	nop
   d5cd8:	2003e674 	.word	0x2003e674
   d5cdc:	2003e5c0 	.word	0x2003e5c0
   d5ce0:	000d5cbb 	.word	0x000d5cbb

000d5ce4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5ce4:	4b01      	ldr	r3, [pc, #4]	; (d5cec <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5ce6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5ce8:	4770      	bx	lr
   d5cea:	bf00      	nop
   d5cec:	2003e55c 	.word	0x2003e55c

000d5cf0 <serialEventRun>:
{
   d5cf0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5cf2:	4b0b      	ldr	r3, [pc, #44]	; (d5d20 <serialEventRun+0x30>)
   d5cf4:	b143      	cbz	r3, d5d08 <serialEventRun+0x18>
   d5cf6:	f000 f957 	bl	d5fa8 <_Z16_fetch_usbserialv>
   d5cfa:	6803      	ldr	r3, [r0, #0]
   d5cfc:	691b      	ldr	r3, [r3, #16]
   d5cfe:	4798      	blx	r3
   d5d00:	2800      	cmp	r0, #0
   d5d02:	dd01      	ble.n	d5d08 <serialEventRun+0x18>
        serialEvent();
   d5d04:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5d08:	4b06      	ldr	r3, [pc, #24]	; (d5d24 <serialEventRun+0x34>)
   d5d0a:	b143      	cbz	r3, d5d1e <serialEventRun+0x2e>
   d5d0c:	f000 f9ca 	bl	d60a4 <_Z22__fetch_global_Serial1v>
   d5d10:	6803      	ldr	r3, [r0, #0]
   d5d12:	691b      	ldr	r3, [r3, #16]
   d5d14:	4798      	blx	r3
   d5d16:	2800      	cmp	r0, #0
   d5d18:	dd01      	ble.n	d5d1e <serialEventRun+0x2e>
        serialEvent1();
   d5d1a:	f3af 8000 	nop.w
}
   d5d1e:	bd08      	pop	{r3, pc}
	...

000d5d28 <_post_loop>:
{
   d5d28:	b508      	push	{r3, lr}
	serialEventRun();
   d5d2a:	f7ff ffe1 	bl	d5cf0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5d2e:	f7ff fbe9 	bl	d5504 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5d32:	4b01      	ldr	r3, [pc, #4]	; (d5d38 <_post_loop+0x10>)
   d5d34:	6018      	str	r0, [r3, #0]
}
   d5d36:	bd08      	pop	{r3, pc}
   d5d38:	2003e7d4 	.word	0x2003e7d4

000d5d3c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5d3c:	4802      	ldr	r0, [pc, #8]	; (d5d48 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5d3e:	4a03      	ldr	r2, [pc, #12]	; (d5d4c <_Z33system_initialize_user_backup_ramv+0x10>)
   d5d40:	4903      	ldr	r1, [pc, #12]	; (d5d50 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5d42:	1a12      	subs	r2, r2, r0
   d5d44:	f000 bfde 	b.w	d6d04 <memcpy>
   d5d48:	2003f400 	.word	0x2003f400
   d5d4c:	2003f404 	.word	0x2003f404
   d5d50:	000d7a90 	.word	0x000d7a90

000d5d54 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5d54:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5d56:	2300      	movs	r3, #0
   d5d58:	9300      	str	r3, [sp, #0]
   d5d5a:	461a      	mov	r2, r3
   d5d5c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5d60:	f7ff fd3a 	bl	d57d8 <system_ctrl_set_result>
}
   d5d64:	b003      	add	sp, #12
   d5d66:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5d6c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5d6c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5d6e:	8843      	ldrh	r3, [r0, #2]
   d5d70:	2b0a      	cmp	r3, #10
   d5d72:	d008      	beq.n	d5d86 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5d74:	2b50      	cmp	r3, #80	; 0x50
   d5d76:	d10b      	bne.n	d5d90 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5d78:	4b09      	ldr	r3, [pc, #36]	; (d5da0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5d7a:	681b      	ldr	r3, [r3, #0]
   d5d7c:	b14b      	cbz	r3, d5d92 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5d7e:	b003      	add	sp, #12
   d5d80:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5d84:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5d86:	f7ff ffe5 	bl	d5d54 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5d8a:	b003      	add	sp, #12
   d5d8c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5d90:	2300      	movs	r3, #0
   d5d92:	9300      	str	r3, [sp, #0]
   d5d94:	461a      	mov	r2, r3
   d5d96:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5d9a:	f7ff fd1d 	bl	d57d8 <system_ctrl_set_result>
}
   d5d9e:	e7f4      	b.n	d5d8a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5da0:	2003e688 	.word	0x2003e688

000d5da4 <module_user_init_hook>:
{
   d5da4:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5da6:	4c12      	ldr	r4, [pc, #72]	; (d5df0 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5da8:	4812      	ldr	r0, [pc, #72]	; (d5df4 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5daa:	4d13      	ldr	r5, [pc, #76]	; (d5df8 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5dac:	2100      	movs	r1, #0
   d5dae:	f7ff fd9d 	bl	d58ec <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5db2:	6823      	ldr	r3, [r4, #0]
   d5db4:	42ab      	cmp	r3, r5
   d5db6:	4b11      	ldr	r3, [pc, #68]	; (d5dfc <module_user_init_hook+0x58>)
   d5db8:	bf0c      	ite	eq
   d5dba:	2201      	moveq	r2, #1
   d5dbc:	2200      	movne	r2, #0
   d5dbe:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5dc0:	d002      	beq.n	d5dc8 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d5dc2:	f7ff ffbb 	bl	d5d3c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5dc6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5dc8:	f7ff fb8c 	bl	d54e4 <HAL_RNG_GetRandomNumber>
   d5dcc:	4604      	mov	r4, r0
    srand(seed);
   d5dce:	f000 ffaf 	bl	d6d30 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5dd2:	4b0b      	ldr	r3, [pc, #44]	; (d5e00 <module_user_init_hook+0x5c>)
   d5dd4:	b113      	cbz	r3, d5ddc <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d5dd6:	4620      	mov	r0, r4
   d5dd8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5ddc:	2100      	movs	r1, #0
   d5dde:	4808      	ldr	r0, [pc, #32]	; (d5e00 <module_user_init_hook+0x5c>)
   d5de0:	f7ff fd64 	bl	d58ac <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5de4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5de8:	4806      	ldr	r0, [pc, #24]	; (d5e04 <module_user_init_hook+0x60>)
   d5dea:	2100      	movs	r1, #0
   d5dec:	f7ff bcea 	b.w	d57c4 <system_ctrl_set_app_request_handler>
   d5df0:	2003f400 	.word	0x2003f400
   d5df4:	000d5ce5 	.word	0x000d5ce5
   d5df8:	9a271c1e 	.word	0x9a271c1e
   d5dfc:	2003e684 	.word	0x2003e684
   d5e00:	00000000 	.word	0x00000000
   d5e04:	000d5d6d 	.word	0x000d5d6d

000d5e08 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5e08:	4770      	bx	lr

000d5e0a <_ZN9IPAddressD0Ev>:
   d5e0a:	b510      	push	{r4, lr}
   d5e0c:	2118      	movs	r1, #24
   d5e0e:	4604      	mov	r4, r0
   d5e10:	f000 fb77 	bl	d6502 <_ZdlPvj>
   d5e14:	4620      	mov	r0, r4
   d5e16:	bd10      	pop	{r4, pc}

000d5e18 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5e18:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5e1a:	7d03      	ldrb	r3, [r0, #20]
   d5e1c:	2b06      	cmp	r3, #6
{
   d5e1e:	b08d      	sub	sp, #52	; 0x34
   d5e20:	460e      	mov	r6, r1
   d5e22:	f100 0704 	add.w	r7, r0, #4
   d5e26:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5e2a:	d012      	beq.n	d5e52 <_ZNK9IPAddress7printToER5Print+0x3a>
   d5e2c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5e30:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5e34:	220a      	movs	r2, #10
   d5e36:	4630      	mov	r0, r6
   d5e38:	f7ff fed5 	bl	d5be6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5e3c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5e3e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5e40:	d019      	beq.n	d5e76 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5e42:	2c00      	cmp	r4, #0
   d5e44:	d0f4      	beq.n	d5e30 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5e46:	212e      	movs	r1, #46	; 0x2e
   d5e48:	4630      	mov	r0, r6
   d5e4a:	f7ff feb3 	bl	d5bb4 <_ZN5Print5printEc>
   d5e4e:	4404      	add	r4, r0
   d5e50:	e7ee      	b.n	d5e30 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5e52:	232f      	movs	r3, #47	; 0x2f
   d5e54:	466a      	mov	r2, sp
   d5e56:	4639      	mov	r1, r7
   d5e58:	200a      	movs	r0, #10
		buf[0] = 0;
   d5e5a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5e5e:	f7ff fb81 	bl	d5564 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5e62:	4668      	mov	r0, sp
   d5e64:	f000 ff88 	bl	d6d78 <strlen>
   d5e68:	6833      	ldr	r3, [r6, #0]
   d5e6a:	4602      	mov	r2, r0
   d5e6c:	68db      	ldr	r3, [r3, #12]
   d5e6e:	4669      	mov	r1, sp
   d5e70:	4630      	mov	r0, r6
   d5e72:	4798      	blx	r3
   d5e74:	4604      	mov	r4, r0
    }
    return n;
}
   d5e76:	4620      	mov	r0, r4
   d5e78:	b00d      	add	sp, #52	; 0x34
   d5e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5e7c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5e7c:	b510      	push	{r4, lr}
   d5e7e:	4b05      	ldr	r3, [pc, #20]	; (d5e94 <_ZN9IPAddressC1Ev+0x18>)
   d5e80:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5e82:	2211      	movs	r2, #17
   d5e84:	f840 3b04 	str.w	r3, [r0], #4
   d5e88:	2100      	movs	r1, #0
   d5e8a:	f000 ff49 	bl	d6d20 <memset>
}
   d5e8e:	4620      	mov	r0, r4
   d5e90:	bd10      	pop	{r4, pc}
   d5e92:	bf00      	nop
   d5e94:	000d7958 	.word	0x000d7958

000d5e98 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5e98:	4603      	mov	r3, r0
   d5e9a:	4a07      	ldr	r2, [pc, #28]	; (d5eb8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5e9c:	b510      	push	{r4, lr}
   d5e9e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5ea2:	f101 0210 	add.w	r2, r1, #16
   d5ea6:	f851 4b04 	ldr.w	r4, [r1], #4
   d5eaa:	f843 4b04 	str.w	r4, [r3], #4
   d5eae:	4291      	cmp	r1, r2
   d5eb0:	d1f9      	bne.n	d5ea6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5eb2:	780a      	ldrb	r2, [r1, #0]
   d5eb4:	701a      	strb	r2, [r3, #0]
}
   d5eb6:	bd10      	pop	{r4, pc}
   d5eb8:	000d7958 	.word	0x000d7958

000d5ebc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5ebc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5ebe:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5ec2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5ec6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5eca:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5ece:	2304      	movs	r3, #4
   d5ed0:	6041      	str	r1, [r0, #4]
   d5ed2:	7503      	strb	r3, [r0, #20]
}
   d5ed4:	bd10      	pop	{r4, pc}
	...

000d5ed8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d5ed8:	b513      	push	{r0, r1, r4, lr}
   d5eda:	4b05      	ldr	r3, [pc, #20]	; (d5ef0 <_ZN9IPAddressC1EPKh+0x18>)
   d5edc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d5ede:	78cb      	ldrb	r3, [r1, #3]
   d5ee0:	9300      	str	r3, [sp, #0]
   d5ee2:	788b      	ldrb	r3, [r1, #2]
   d5ee4:	784a      	ldrb	r2, [r1, #1]
   d5ee6:	7809      	ldrb	r1, [r1, #0]
   d5ee8:	f7ff ffe8 	bl	d5ebc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5eec:	b002      	add	sp, #8
   d5eee:	bd10      	pop	{r4, pc}
   d5ef0:	000d7958 	.word	0x000d7958

000d5ef4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5ef4:	7441      	strb	r1, [r0, #17]
}
   d5ef6:	4770      	bx	lr

000d5ef8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5ef8:	4770      	bx	lr

000d5efa <_ZN9USBSerial4readEv>:
{
   d5efa:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5efc:	2100      	movs	r1, #0
   d5efe:	7c00      	ldrb	r0, [r0, #16]
   d5f00:	f7ff fc28 	bl	d5754 <HAL_USB_USART_Receive_Data>
}
   d5f04:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5f08:	bd08      	pop	{r3, pc}

000d5f0a <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d5f0a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5f0c:	2101      	movs	r1, #1
   d5f0e:	7c00      	ldrb	r0, [r0, #16]
   d5f10:	f7ff fc20 	bl	d5754 <HAL_USB_USART_Receive_Data>
}
   d5f14:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5f18:	bd08      	pop	{r3, pc}

000d5f1a <_ZN9USBSerial17availableForWriteEv>:
{
   d5f1a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5f1c:	7c00      	ldrb	r0, [r0, #16]
   d5f1e:	f7ff fc11 	bl	d5744 <HAL_USB_USART_Available_Data_For_Write>
}
   d5f22:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5f26:	bd08      	pop	{r3, pc}

000d5f28 <_ZN9USBSerial9availableEv>:
{
   d5f28:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5f2a:	7c00      	ldrb	r0, [r0, #16]
   d5f2c:	f7ff fc02 	bl	d5734 <HAL_USB_USART_Available_Data>
}
   d5f30:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5f34:	bd08      	pop	{r3, pc}

000d5f36 <_ZN9USBSerial5writeEh>:
{
   d5f36:	b513      	push	{r0, r1, r4, lr}
   d5f38:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5f3a:	7c00      	ldrb	r0, [r0, #16]
{
   d5f3c:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5f3e:	f7ff fc01 	bl	d5744 <HAL_USB_USART_Available_Data_For_Write>
   d5f42:	2800      	cmp	r0, #0
   d5f44:	9901      	ldr	r1, [sp, #4]
   d5f46:	dc01      	bgt.n	d5f4c <_ZN9USBSerial5writeEh+0x16>
   d5f48:	7c60      	ldrb	r0, [r4, #17]
   d5f4a:	b120      	cbz	r0, d5f56 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5f4c:	7c20      	ldrb	r0, [r4, #16]
   d5f4e:	f7ff fc09 	bl	d5764 <HAL_USB_USART_Send_Data>
   d5f52:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5f56:	b002      	add	sp, #8
   d5f58:	bd10      	pop	{r4, pc}

000d5f5a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5f5a:	7c00      	ldrb	r0, [r0, #16]
   d5f5c:	f7ff bc0a 	b.w	d5774 <HAL_USB_USART_Flush_Data>

000d5f60 <_ZN9USBSerialD0Ev>:
   d5f60:	b510      	push	{r4, lr}
   d5f62:	2114      	movs	r1, #20
   d5f64:	4604      	mov	r4, r0
   d5f66:	f000 facc 	bl	d6502 <_ZdlPvj>
   d5f6a:	4620      	mov	r0, r4
   d5f6c:	bd10      	pop	{r4, pc}
	...

000d5f70 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5f70:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5f76:	4604      	mov	r4, r0
   d5f78:	4608      	mov	r0, r1
   d5f7a:	2100      	movs	r1, #0
   d5f7c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5f80:	4b04      	ldr	r3, [pc, #16]	; (d5f94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5f82:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5f84:	2301      	movs	r3, #1
  _serial = serial;
   d5f86:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5f88:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d5f8a:	4611      	mov	r1, r2
   d5f8c:	f7ff fbca 	bl	d5724 <HAL_USB_USART_Init>
}
   d5f90:	4620      	mov	r0, r4
   d5f92:	bd10      	pop	{r4, pc}
   d5f94:	000d796c 	.word	0x000d796c

000d5f98 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5f98:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5f9a:	2214      	movs	r2, #20
{
   d5f9c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5f9e:	2100      	movs	r1, #0
   d5fa0:	f000 febe 	bl	d6d20 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5fa4:	4620      	mov	r0, r4
   d5fa6:	bd10      	pop	{r4, pc}

000d5fa8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5fa8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5faa:	4c10      	ldr	r4, [pc, #64]	; (d5fec <_Z16_fetch_usbserialv+0x44>)
{
   d5fac:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5fae:	a803      	add	r0, sp, #12
   d5fb0:	f7ff fff2 	bl	d5f98 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5fb4:	7821      	ldrb	r1, [r4, #0]
   d5fb6:	f3bf 8f5b 	dmb	ish
   d5fba:	f011 0101 	ands.w	r1, r1, #1
   d5fbe:	d111      	bne.n	d5fe4 <_Z16_fetch_usbserialv+0x3c>
   d5fc0:	4620      	mov	r0, r4
   d5fc2:	9101      	str	r1, [sp, #4]
   d5fc4:	f7fe f876 	bl	d40b4 <__cxa_guard_acquire>
   d5fc8:	9901      	ldr	r1, [sp, #4]
   d5fca:	b158      	cbz	r0, d5fe4 <_Z16_fetch_usbserialv+0x3c>
   d5fcc:	aa03      	add	r2, sp, #12
   d5fce:	4808      	ldr	r0, [pc, #32]	; (d5ff0 <_Z16_fetch_usbserialv+0x48>)
   d5fd0:	f7ff ffce 	bl	d5f70 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5fd4:	4620      	mov	r0, r4
   d5fd6:	f7fe f872 	bl	d40be <__cxa_guard_release>
   d5fda:	4a06      	ldr	r2, [pc, #24]	; (d5ff4 <_Z16_fetch_usbserialv+0x4c>)
   d5fdc:	4906      	ldr	r1, [pc, #24]	; (d5ff8 <_Z16_fetch_usbserialv+0x50>)
   d5fde:	4804      	ldr	r0, [pc, #16]	; (d5ff0 <_Z16_fetch_usbserialv+0x48>)
   d5fe0:	f000 fa8a 	bl	d64f8 <__aeabi_atexit>
	return _usbserial;
}
   d5fe4:	4802      	ldr	r0, [pc, #8]	; (d5ff0 <_Z16_fetch_usbserialv+0x48>)
   d5fe6:	b008      	add	sp, #32
   d5fe8:	bd10      	pop	{r4, pc}
   d5fea:	bf00      	nop
   d5fec:	2003e68c 	.word	0x2003e68c
   d5ff0:	2003e690 	.word	0x2003e690
   d5ff4:	2003e5c0 	.word	0x2003e5c0
   d5ff8:	000d5ef9 	.word	0x000d5ef9

000d5ffc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5ffc:	4770      	bx	lr

000d5ffe <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5ffe:	7441      	strb	r1, [r0, #17]
}
   d6000:	4770      	bx	lr

000d6002 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d6002:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d6004:	7c00      	ldrb	r0, [r0, #16]
   d6006:	f7ff faed 	bl	d55e4 <hal_usart_available_data_for_write>
}
   d600a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d600e:	bd08      	pop	{r3, pc}

000d6010 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6010:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d6012:	7c00      	ldrb	r0, [r0, #16]
   d6014:	f7ff fabe 	bl	d5594 <hal_usart_available>
}
   d6018:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d601c:	bd08      	pop	{r3, pc}

000d601e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d601e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d6020:	7c00      	ldrb	r0, [r0, #16]
   d6022:	f7ff fac7 	bl	d55b4 <hal_usart_peek>
}
   d6026:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d602a:	bd08      	pop	{r3, pc}

000d602c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d602c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d602e:	7c00      	ldrb	r0, [r0, #16]
   d6030:	f7ff fab8 	bl	d55a4 <hal_usart_read>
}
   d6034:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6038:	bd08      	pop	{r3, pc}

000d603a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d603a:	7c00      	ldrb	r0, [r0, #16]
   d603c:	f7ff bac2 	b.w	d55c4 <hal_usart_flush>

000d6040 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6040:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6042:	7c45      	ldrb	r5, [r0, #17]
{
   d6044:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6046:	b12d      	cbz	r5, d6054 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d6048:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d604a:	b003      	add	sp, #12
   d604c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d6050:	f7ff ba98 	b.w	d5584 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6054:	7c00      	ldrb	r0, [r0, #16]
   d6056:	9101      	str	r1, [sp, #4]
   d6058:	f7ff fac4 	bl	d55e4 <hal_usart_available_data_for_write>
   d605c:	2800      	cmp	r0, #0
   d605e:	9901      	ldr	r1, [sp, #4]
   d6060:	dcf2      	bgt.n	d6048 <_ZN11USARTSerial5writeEh+0x8>
}
   d6062:	4628      	mov	r0, r5
   d6064:	b003      	add	sp, #12
   d6066:	bd30      	pop	{r4, r5, pc}

000d6068 <_ZN11USARTSerialD0Ev>:
   d6068:	b510      	push	{r4, lr}
   d606a:	2114      	movs	r1, #20
   d606c:	4604      	mov	r4, r0
   d606e:	f000 fa48 	bl	d6502 <_ZdlPvj>
   d6072:	4620      	mov	r0, r4
   d6074:	bd10      	pop	{r4, pc}
	...

000d6078 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d6078:	b510      	push	{r4, lr}
   d607a:	f04f 0c00 	mov.w	ip, #0
   d607e:	4604      	mov	r4, r0
   d6080:	4608      	mov	r0, r1
   d6082:	4611      	mov	r1, r2
   d6084:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6088:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d608c:	4a04      	ldr	r2, [pc, #16]	; (d60a0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d608e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6090:	2201      	movs	r2, #1
  _serial = serial;
   d6092:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6094:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d6096:	461a      	mov	r2, r3
   d6098:	f7ff fa6c 	bl	d5574 <hal_usart_init>
}
   d609c:	4620      	mov	r0, r4
   d609e:	bd10      	pop	{r4, pc}
   d60a0:	000d799c 	.word	0x000d799c

000d60a4 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d60a4:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d60a6:	4c0e      	ldr	r4, [pc, #56]	; (d60e0 <_Z22__fetch_global_Serial1v+0x3c>)
   d60a8:	7821      	ldrb	r1, [r4, #0]
   d60aa:	f3bf 8f5b 	dmb	ish
   d60ae:	f011 0101 	ands.w	r1, r1, #1
   d60b2:	d112      	bne.n	d60da <_Z22__fetch_global_Serial1v+0x36>
   d60b4:	4620      	mov	r0, r4
   d60b6:	9101      	str	r1, [sp, #4]
   d60b8:	f7fd fffc 	bl	d40b4 <__cxa_guard_acquire>
   d60bc:	9901      	ldr	r1, [sp, #4]
   d60be:	b160      	cbz	r0, d60da <_Z22__fetch_global_Serial1v+0x36>
   d60c0:	4a08      	ldr	r2, [pc, #32]	; (d60e4 <_Z22__fetch_global_Serial1v+0x40>)
   d60c2:	4b09      	ldr	r3, [pc, #36]	; (d60e8 <_Z22__fetch_global_Serial1v+0x44>)
   d60c4:	4809      	ldr	r0, [pc, #36]	; (d60ec <_Z22__fetch_global_Serial1v+0x48>)
   d60c6:	f7ff ffd7 	bl	d6078 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d60ca:	4620      	mov	r0, r4
   d60cc:	f7fd fff7 	bl	d40be <__cxa_guard_release>
   d60d0:	4a07      	ldr	r2, [pc, #28]	; (d60f0 <_Z22__fetch_global_Serial1v+0x4c>)
   d60d2:	4908      	ldr	r1, [pc, #32]	; (d60f4 <_Z22__fetch_global_Serial1v+0x50>)
   d60d4:	4805      	ldr	r0, [pc, #20]	; (d60ec <_Z22__fetch_global_Serial1v+0x48>)
   d60d6:	f000 fa0f 	bl	d64f8 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d60da:	4804      	ldr	r0, [pc, #16]	; (d60ec <_Z22__fetch_global_Serial1v+0x48>)
   d60dc:	b002      	add	sp, #8
   d60de:	bd10      	pop	{r4, pc}
   d60e0:	2003e6a4 	.word	0x2003e6a4
   d60e4:	2003e6a8 	.word	0x2003e6a8
   d60e8:	2003e72c 	.word	0x2003e72c
   d60ec:	2003e7b0 	.word	0x2003e7b0
   d60f0:	2003e5c0 	.word	0x2003e5c0
   d60f4:	000d5ffd 	.word	0x000d5ffd

000d60f8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d60f8:	4770      	bx	lr

000d60fa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d60fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d60fc:	4606      	mov	r6, r0
   d60fe:	4615      	mov	r5, r2
   d6100:	460c      	mov	r4, r1
   d6102:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6104:	42bc      	cmp	r4, r7
   d6106:	d006      	beq.n	d6116 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6108:	6833      	ldr	r3, [r6, #0]
   d610a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d610e:	689b      	ldr	r3, [r3, #8]
   d6110:	4630      	mov	r0, r6
   d6112:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d6114:	e7f6      	b.n	d6104 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d6116:	4628      	mov	r0, r5
   d6118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d611a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d611a:	7c00      	ldrb	r0, [r0, #16]
   d611c:	2200      	movs	r2, #0
   d611e:	f7ff ba89 	b.w	d5634 <hal_i2c_write>

000d6122 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d6122:	7c00      	ldrb	r0, [r0, #16]
   d6124:	2100      	movs	r1, #0
   d6126:	f7ff ba8d 	b.w	d5644 <hal_i2c_available>

000d612a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d612a:	7c00      	ldrb	r0, [r0, #16]
   d612c:	2100      	movs	r1, #0
   d612e:	f7ff ba91 	b.w	d5654 <hal_i2c_read>

000d6132 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d6132:	7c00      	ldrb	r0, [r0, #16]
   d6134:	2100      	movs	r1, #0
   d6136:	f7ff ba95 	b.w	d5664 <hal_i2c_peek>

000d613a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d613a:	7c00      	ldrb	r0, [r0, #16]
   d613c:	2100      	movs	r1, #0
   d613e:	f7ff ba99 	b.w	d5674 <hal_i2c_flush>

000d6142 <_ZN7TwoWireD0Ev>:
   d6142:	b510      	push	{r4, lr}
   d6144:	2114      	movs	r1, #20
   d6146:	4604      	mov	r4, r0
   d6148:	f000 f9db 	bl	d6502 <_ZdlPvj>
   d614c:	4620      	mov	r0, r4
   d614e:	bd10      	pop	{r4, pc}

000d6150 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d6150:	b510      	push	{r4, lr}
   d6152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6156:	4604      	mov	r4, r0
   d6158:	4608      	mov	r0, r1
   d615a:	2100      	movs	r1, #0
   d615c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6160:	4b03      	ldr	r3, [pc, #12]	; (d6170 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d6162:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d6164:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d6166:	4611      	mov	r1, r2
   d6168:	f7ff fa94 	bl	d5694 <hal_i2c_init>
}
   d616c:	4620      	mov	r0, r4
   d616e:	bd10      	pop	{r4, pc}
   d6170:	000d79cc 	.word	0x000d79cc

000d6174 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d6174:	7c00      	ldrb	r0, [r0, #16]
   d6176:	2200      	movs	r2, #0
   d6178:	f7ff ba3c 	b.w	d55f4 <hal_i2c_set_speed>

000d617c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d617c:	2300      	movs	r3, #0
   d617e:	7c00      	ldrb	r0, [r0, #16]
   d6180:	461a      	mov	r2, r3
   d6182:	4619      	mov	r1, r3
   d6184:	f7ff ba3e 	b.w	d5604 <hal_i2c_begin>

000d6188 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d6188:	7c00      	ldrb	r0, [r0, #16]
   d618a:	2200      	movs	r2, #0
   d618c:	f7ff ba42 	b.w	d5614 <hal_i2c_begin_transmission>

000d6190 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d6190:	b2c9      	uxtb	r1, r1
   d6192:	f7ff bff9 	b.w	d6188 <_ZN7TwoWire17beginTransmissionEh>

000d6196 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d6196:	7c00      	ldrb	r0, [r0, #16]
   d6198:	2200      	movs	r2, #0
   d619a:	f7ff ba43 	b.w	d5624 <hal_i2c_end_transmission>

000d619e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d619e:	2101      	movs	r1, #1
   d61a0:	f7ff bff9 	b.w	d6196 <_ZN7TwoWire15endTransmissionEh>

000d61a4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d61a4:	2200      	movs	r2, #0
   d61a6:	6840      	ldr	r0, [r0, #4]
   d61a8:	4611      	mov	r1, r2
   d61aa:	f7ff bb37 	b.w	d581c <network_ready>

000d61ae <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d61ae:	2200      	movs	r2, #0
   d61b0:	6840      	ldr	r0, [r0, #4]
   d61b2:	4611      	mov	r1, r2
   d61b4:	f7ff bb52 	b.w	d585c <network_listening>

000d61b8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d61b8:	2200      	movs	r2, #0
   d61ba:	6840      	ldr	r0, [r0, #4]
   d61bc:	4611      	mov	r1, r2
   d61be:	f7ff bb5d 	b.w	d587c <network_get_listen_timeout>

000d61c2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d61c2:	6840      	ldr	r0, [r0, #4]
   d61c4:	2200      	movs	r2, #0
   d61c6:	f7ff bb51 	b.w	d586c <network_set_listen_timeout>

000d61ca <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d61ca:	6840      	ldr	r0, [r0, #4]
   d61cc:	2200      	movs	r2, #0
   d61ce:	f081 0101 	eor.w	r1, r1, #1
   d61d2:	f7ff bb3b 	b.w	d584c <network_listen>

000d61d6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d61d6:	2300      	movs	r3, #0
   d61d8:	6840      	ldr	r0, [r0, #4]
   d61da:	461a      	mov	r2, r3
   d61dc:	4619      	mov	r1, r3
   d61de:	f7ff bb2d 	b.w	d583c <network_off>

000d61e2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d61e2:	2200      	movs	r2, #0
   d61e4:	6840      	ldr	r0, [r0, #4]
   d61e6:	4611      	mov	r1, r2
   d61e8:	f7ff bb08 	b.w	d57fc <network_connecting>

000d61ec <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d61ec:	6840      	ldr	r0, [r0, #4]
   d61ee:	2200      	movs	r2, #0
   d61f0:	2102      	movs	r1, #2
   d61f2:	f7ff bb0b 	b.w	d580c <network_disconnect>

000d61f6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d61f6:	2300      	movs	r3, #0
   d61f8:	6840      	ldr	r0, [r0, #4]
   d61fa:	461a      	mov	r2, r3
   d61fc:	f7ff baf6 	b.w	d57ec <network_connect>

000d6200 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6200:	4b02      	ldr	r3, [pc, #8]	; (d620c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6202:	2204      	movs	r2, #4
   d6204:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6206:	4a02      	ldr	r2, [pc, #8]	; (d6210 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6208:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d620a:	4770      	bx	lr
   d620c:	2003e7c4 	.word	0x2003e7c4
   d6210:	000d79f4 	.word	0x000d79f4

000d6214 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6214:	2300      	movs	r3, #0
   d6216:	6840      	ldr	r0, [r0, #4]
   d6218:	461a      	mov	r2, r3
   d621a:	f7ff bae7 	b.w	d57ec <network_connect>

000d621e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d621e:	6840      	ldr	r0, [r0, #4]
   d6220:	2200      	movs	r2, #0
   d6222:	2102      	movs	r1, #2
   d6224:	f7ff baf2 	b.w	d580c <network_disconnect>

000d6228 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6228:	2200      	movs	r2, #0
   d622a:	6840      	ldr	r0, [r0, #4]
   d622c:	4611      	mov	r1, r2
   d622e:	f7ff bae5 	b.w	d57fc <network_connecting>

000d6232 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6232:	2200      	movs	r2, #0
   d6234:	6840      	ldr	r0, [r0, #4]
   d6236:	4611      	mov	r1, r2
   d6238:	f7ff baf0 	b.w	d581c <network_ready>

000d623c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d623c:	2300      	movs	r3, #0
   d623e:	6840      	ldr	r0, [r0, #4]
   d6240:	461a      	mov	r2, r3
   d6242:	4619      	mov	r1, r3
   d6244:	f7ff baf2 	b.w	d582c <network_on>

000d6248 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6248:	2300      	movs	r3, #0
   d624a:	6840      	ldr	r0, [r0, #4]
   d624c:	461a      	mov	r2, r3
   d624e:	4619      	mov	r1, r3
   d6250:	f7ff baf4 	b.w	d583c <network_off>

000d6254 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d6254:	6840      	ldr	r0, [r0, #4]
   d6256:	2100      	movs	r1, #0
   d6258:	f7ff bb18 	b.w	d588c <network_is_on>

000d625c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d625c:	6840      	ldr	r0, [r0, #4]
   d625e:	2100      	movs	r1, #0
   d6260:	f7ff bb1c 	b.w	d589c <network_is_off>

000d6264 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6264:	6840      	ldr	r0, [r0, #4]
   d6266:	2200      	movs	r2, #0
   d6268:	f081 0101 	eor.w	r1, r1, #1
   d626c:	f7ff baee 	b.w	d584c <network_listen>

000d6270 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6270:	6840      	ldr	r0, [r0, #4]
   d6272:	2200      	movs	r2, #0
   d6274:	f7ff bafa 	b.w	d586c <network_set_listen_timeout>

000d6278 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6278:	2200      	movs	r2, #0
   d627a:	6840      	ldr	r0, [r0, #4]
   d627c:	4611      	mov	r1, r2
   d627e:	f7ff bafd 	b.w	d587c <network_get_listen_timeout>

000d6282 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6282:	2200      	movs	r2, #0
   d6284:	6840      	ldr	r0, [r0, #4]
   d6286:	4611      	mov	r1, r2
   d6288:	f7ff bae8 	b.w	d585c <network_listening>

000d628c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d628c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6290:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d6292:	b095      	sub	sp, #84	; 0x54
   d6294:	4616      	mov	r6, r2
   d6296:	460d      	mov	r5, r1
   d6298:	4607      	mov	r7, r0
    IPAddress addr;
   d629a:	f7ff fdef 	bl	d5e7c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d629e:	4621      	mov	r1, r4
   d62a0:	2218      	movs	r2, #24
   d62a2:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d62a4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d62a6:	f000 fd3b 	bl	d6d20 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d62aa:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d62ac:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d62b0:	4621      	mov	r1, r4
   d62b2:	466b      	mov	r3, sp
   d62b4:	aa0c      	add	r2, sp, #48	; 0x30
   d62b6:	4630      	mov	r0, r6
   d62b8:	f7ff f8ec 	bl	d5494 <netdb_getaddrinfo>
    if (!r) {
   d62bc:	4604      	mov	r4, r0
   d62be:	2800      	cmp	r0, #0
   d62c0:	d14c      	bne.n	d635c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d62c2:	4602      	mov	r2, r0
   d62c4:	2101      	movs	r1, #1
   d62c6:	6868      	ldr	r0, [r5, #4]
   d62c8:	f7ff faa8 	bl	d581c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d62cc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d62ce:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d62d0:	4622      	mov	r2, r4
   d62d2:	6868      	ldr	r0, [r5, #4]
   d62d4:	f7ff faa2 	bl	d581c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d62d8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d62da:	4681      	mov	r9, r0
        bool ok = false;
   d62dc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d62de:	2e00      	cmp	r6, #0
   d62e0:	d03c      	beq.n	d635c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d62e2:	2900      	cmp	r1, #0
   d62e4:	d13a      	bne.n	d635c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d62e6:	6873      	ldr	r3, [r6, #4]
   d62e8:	2b02      	cmp	r3, #2
   d62ea:	d003      	beq.n	d62f4 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d62ec:	2b0a      	cmp	r3, #10
   d62ee:	d011      	beq.n	d6314 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d62f0:	69f6      	ldr	r6, [r6, #28]
   d62f2:	e7f4      	b.n	d62de <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d62f4:	f1b8 0f00 	cmp.w	r8, #0
   d62f8:	d00a      	beq.n	d6310 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d62fa:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d62fc:	a806      	add	r0, sp, #24
   d62fe:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d6300:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d6302:	f7ff fde9 	bl	d5ed8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d6306:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6308:	1d3c      	adds	r4, r7, #4
   d630a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d630c:	682b      	ldr	r3, [r5, #0]
   d630e:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d6310:	4641      	mov	r1, r8
   d6312:	e7ed      	b.n	d62f0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6314:	f1b9 0f00 	cmp.w	r9, #0
   d6318:	d101      	bne.n	d631e <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d631a:	4649      	mov	r1, r9
   d631c:	e7e8      	b.n	d62f0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d631e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6320:	2210      	movs	r2, #16
   d6322:	a801      	add	r0, sp, #4
   d6324:	f000 fcfc 	bl	d6d20 <memset>
                    a.v = 6;
   d6328:	2306      	movs	r3, #6
   d632a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d632e:	ad01      	add	r5, sp, #4
   d6330:	f104 0308 	add.w	r3, r4, #8
   d6334:	3418      	adds	r4, #24
   d6336:	6818      	ldr	r0, [r3, #0]
   d6338:	6859      	ldr	r1, [r3, #4]
   d633a:	462a      	mov	r2, r5
   d633c:	c203      	stmia	r2!, {r0, r1}
   d633e:	3308      	adds	r3, #8
   d6340:	42a3      	cmp	r3, r4
   d6342:	4615      	mov	r5, r2
   d6344:	d1f7      	bne.n	d6336 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d6346:	a901      	add	r1, sp, #4
   d6348:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d634a:	ad07      	add	r5, sp, #28
   d634c:	f7ff fda4 	bl	d5e98 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6352:	1d3c      	adds	r4, r7, #4
   d6354:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6356:	682b      	ldr	r3, [r5, #0]
   d6358:	7023      	strb	r3, [r4, #0]
   d635a:	e7de      	b.n	d631a <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d635c:	9800      	ldr	r0, [sp, #0]
   d635e:	f7ff f891 	bl	d5484 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6362:	4638      	mov	r0, r7
   d6364:	b015      	add	sp, #84	; 0x54
   d6366:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d636c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d636c:	4b02      	ldr	r3, [pc, #8]	; (d6378 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d636e:	4a03      	ldr	r2, [pc, #12]	; (d637c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6370:	601a      	str	r2, [r3, #0]
   d6372:	2200      	movs	r2, #0
   d6374:	605a      	str	r2, [r3, #4]

} // spark
   d6376:	4770      	bx	lr
   d6378:	2003e7cc 	.word	0x2003e7cc
   d637c:	000d7a30 	.word	0x000d7a30

000d6380 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6380:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6382:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6384:	d902      	bls.n	d638c <pinAvailable+0xc>
    return false;
   d6386:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6388:	b002      	add	sp, #8
   d638a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d638c:	f1a0 030b 	sub.w	r3, r0, #11
   d6390:	2b02      	cmp	r3, #2
   d6392:	d81a      	bhi.n	d63ca <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6394:	4c17      	ldr	r4, [pc, #92]	; (d63f4 <pinAvailable+0x74>)
   d6396:	7821      	ldrb	r1, [r4, #0]
   d6398:	f3bf 8f5b 	dmb	ish
   d639c:	f011 0101 	ands.w	r1, r1, #1
   d63a0:	d10b      	bne.n	d63ba <pinAvailable+0x3a>
   d63a2:	4620      	mov	r0, r4
   d63a4:	9101      	str	r1, [sp, #4]
   d63a6:	f7fd fe85 	bl	d40b4 <__cxa_guard_acquire>
   d63aa:	9901      	ldr	r1, [sp, #4]
   d63ac:	b128      	cbz	r0, d63ba <pinAvailable+0x3a>
   d63ae:	4812      	ldr	r0, [pc, #72]	; (d63f8 <pinAvailable+0x78>)
   d63b0:	f7ff fae8 	bl	d5984 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d63b4:	4620      	mov	r0, r4
   d63b6:	f7fd fe82 	bl	d40be <__cxa_guard_release>
   d63ba:	4b0f      	ldr	r3, [pc, #60]	; (d63f8 <pinAvailable+0x78>)
   d63bc:	7818      	ldrb	r0, [r3, #0]
   d63be:	f7ff f989 	bl	d56d4 <hal_spi_is_enabled>
   d63c2:	2800      	cmp	r0, #0
   d63c4:	d1df      	bne.n	d6386 <pinAvailable+0x6>
  return true; // 'pin' is available
   d63c6:	2001      	movs	r0, #1
   d63c8:	e7de      	b.n	d6388 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d63ca:	2801      	cmp	r0, #1
   d63cc:	d809      	bhi.n	d63e2 <pinAvailable+0x62>
   d63ce:	f000 f86b 	bl	d64a8 <_Z19__fetch_global_Wirev>
   d63d2:	2100      	movs	r1, #0
   d63d4:	7c00      	ldrb	r0, [r0, #16]
   d63d6:	f7ff f955 	bl	d5684 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d63da:	f080 0001 	eor.w	r0, r0, #1
   d63de:	b2c0      	uxtb	r0, r0
   d63e0:	e7d2      	b.n	d6388 <pinAvailable+0x8>
   d63e2:	3809      	subs	r0, #9
   d63e4:	2801      	cmp	r0, #1
   d63e6:	d8ee      	bhi.n	d63c6 <pinAvailable+0x46>
   d63e8:	f7ff fe5c 	bl	d60a4 <_Z22__fetch_global_Serial1v>
   d63ec:	7c00      	ldrb	r0, [r0, #16]
   d63ee:	f7ff f8f1 	bl	d55d4 <hal_usart_is_enabled>
   d63f2:	e7f2      	b.n	d63da <pinAvailable+0x5a>
   d63f4:	2003e644 	.word	0x2003e644
   d63f8:	2003e648 	.word	0x2003e648

000d63fc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d63fc:	2823      	cmp	r0, #35	; 0x23
{
   d63fe:	b538      	push	{r3, r4, r5, lr}
   d6400:	4604      	mov	r4, r0
   d6402:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6404:	d80a      	bhi.n	d641c <pinMode+0x20>
   d6406:	29ff      	cmp	r1, #255	; 0xff
   d6408:	d008      	beq.n	d641c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d640a:	f7ff ffb9 	bl	d6380 <pinAvailable>
   d640e:	b128      	cbz	r0, d641c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d6410:	4629      	mov	r1, r5
   d6412:	4620      	mov	r0, r4
}
   d6414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d6418:	f7ff b844 	b.w	d54a4 <HAL_Pin_Mode>
}
   d641c:	bd38      	pop	{r3, r4, r5, pc}

000d641e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d641e:	b538      	push	{r3, r4, r5, lr}
   d6420:	4604      	mov	r4, r0
   d6422:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6424:	f7ff f846 	bl	d54b4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6428:	28ff      	cmp	r0, #255	; 0xff
   d642a:	d010      	beq.n	d644e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d642c:	2806      	cmp	r0, #6
   d642e:	d804      	bhi.n	d643a <digitalWrite+0x1c>
   d6430:	234d      	movs	r3, #77	; 0x4d
   d6432:	fa23 f000 	lsr.w	r0, r3, r0
   d6436:	07c3      	lsls	r3, r0, #31
   d6438:	d409      	bmi.n	d644e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d643a:	4620      	mov	r0, r4
   d643c:	f7ff ffa0 	bl	d6380 <pinAvailable>
   d6440:	b128      	cbz	r0, d644e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6442:	4629      	mov	r1, r5
   d6444:	4620      	mov	r0, r4
}
   d6446:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d644a:	f7ff b83b 	b.w	d54c4 <HAL_GPIO_Write>
}
   d644e:	bd38      	pop	{r3, r4, r5, pc}

000d6450 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6450:	b510      	push	{r4, lr}
   d6452:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6454:	f7ff f82e 	bl	d54b4 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d6458:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d645a:	b2db      	uxtb	r3, r3
   d645c:	2b01      	cmp	r3, #1
   d645e:	d908      	bls.n	d6472 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6460:	4620      	mov	r0, r4
   d6462:	f7ff ff8d 	bl	d6380 <pinAvailable>
   d6466:	b120      	cbz	r0, d6472 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6468:	4620      	mov	r0, r4
}
   d646a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d646e:	f7ff b831 	b.w	d54d4 <HAL_GPIO_Read>
}
   d6472:	2000      	movs	r0, #0
   d6474:	bd10      	pop	{r4, pc}
	...

000d6478 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d6478:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d647a:	2300      	movs	r3, #0
   d647c:	2520      	movs	r5, #32
   d647e:	8043      	strh	r3, [r0, #2]
   d6480:	2314      	movs	r3, #20
{
   d6482:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6484:	8003      	strh	r3, [r0, #0]
   d6486:	6085      	str	r5, [r0, #8]
   d6488:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d648a:	4906      	ldr	r1, [pc, #24]	; (d64a4 <_Z17acquireWireBufferv+0x2c>)
   d648c:	4628      	mov	r0, r5
   d648e:	f000 f83a 	bl	d6506 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6492:	4904      	ldr	r1, [pc, #16]	; (d64a4 <_Z17acquireWireBufferv+0x2c>)
	};
   d6494:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6496:	4628      	mov	r0, r5
   d6498:	f000 f835 	bl	d6506 <_ZnajRKSt9nothrow_t>
	};
   d649c:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d649e:	4620      	mov	r0, r4
   d64a0:	bd38      	pop	{r3, r4, r5, pc}
   d64a2:	bf00      	nop
   d64a4:	000d7a64 	.word	0x000d7a64

000d64a8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d64a8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d64aa:	4d0f      	ldr	r5, [pc, #60]	; (d64e8 <_Z19__fetch_global_Wirev+0x40>)
   d64ac:	7829      	ldrb	r1, [r5, #0]
   d64ae:	f3bf 8f5b 	dmb	ish
   d64b2:	f011 0401 	ands.w	r4, r1, #1
{
   d64b6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d64b8:	d113      	bne.n	d64e2 <_Z19__fetch_global_Wirev+0x3a>
   d64ba:	4628      	mov	r0, r5
   d64bc:	f7fd fdfa 	bl	d40b4 <__cxa_guard_acquire>
   d64c0:	b178      	cbz	r0, d64e2 <_Z19__fetch_global_Wirev+0x3a>
   d64c2:	a801      	add	r0, sp, #4
   d64c4:	f7ff ffd8 	bl	d6478 <_Z17acquireWireBufferv>
   d64c8:	aa01      	add	r2, sp, #4
   d64ca:	4621      	mov	r1, r4
   d64cc:	4807      	ldr	r0, [pc, #28]	; (d64ec <_Z19__fetch_global_Wirev+0x44>)
   d64ce:	f7ff fe3f 	bl	d6150 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d64d2:	4628      	mov	r0, r5
   d64d4:	f7fd fdf3 	bl	d40be <__cxa_guard_release>
   d64d8:	4a05      	ldr	r2, [pc, #20]	; (d64f0 <_Z19__fetch_global_Wirev+0x48>)
   d64da:	4906      	ldr	r1, [pc, #24]	; (d64f4 <_Z19__fetch_global_Wirev+0x4c>)
   d64dc:	4803      	ldr	r0, [pc, #12]	; (d64ec <_Z19__fetch_global_Wirev+0x44>)
   d64de:	f000 f80b 	bl	d64f8 <__aeabi_atexit>
	return wire;
}
   d64e2:	4802      	ldr	r0, [pc, #8]	; (d64ec <_Z19__fetch_global_Wirev+0x44>)
   d64e4:	b007      	add	sp, #28
   d64e6:	bd30      	pop	{r4, r5, pc}
   d64e8:	2003e7d8 	.word	0x2003e7d8
   d64ec:	2003e7dc 	.word	0x2003e7dc
   d64f0:	2003e5c0 	.word	0x2003e5c0
   d64f4:	000d60f9 	.word	0x000d60f9

000d64f8 <__aeabi_atexit>:
   d64f8:	460b      	mov	r3, r1
   d64fa:	4601      	mov	r1, r0
   d64fc:	4618      	mov	r0, r3
   d64fe:	f000 bbf3 	b.w	d6ce8 <__cxa_atexit>

000d6502 <_ZdlPvj>:
   d6502:	f7fd bdca 	b.w	d409a <_ZdlPv>

000d6506 <_ZnajRKSt9nothrow_t>:
   d6506:	f7fd bdc6 	b.w	d4096 <_Znaj>
	...

000d650c <__aeabi_drsub>:
   d650c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6510:	e002      	b.n	d6518 <__adddf3>
   d6512:	bf00      	nop

000d6514 <__aeabi_dsub>:
   d6514:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6518 <__adddf3>:
   d6518:	b530      	push	{r4, r5, lr}
   d651a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d651e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6522:	ea94 0f05 	teq	r4, r5
   d6526:	bf08      	it	eq
   d6528:	ea90 0f02 	teqeq	r0, r2
   d652c:	bf1f      	itttt	ne
   d652e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6532:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6536:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d653a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d653e:	f000 80e2 	beq.w	d6706 <__adddf3+0x1ee>
   d6542:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6546:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d654a:	bfb8      	it	lt
   d654c:	426d      	neglt	r5, r5
   d654e:	dd0c      	ble.n	d656a <__adddf3+0x52>
   d6550:	442c      	add	r4, r5
   d6552:	ea80 0202 	eor.w	r2, r0, r2
   d6556:	ea81 0303 	eor.w	r3, r1, r3
   d655a:	ea82 0000 	eor.w	r0, r2, r0
   d655e:	ea83 0101 	eor.w	r1, r3, r1
   d6562:	ea80 0202 	eor.w	r2, r0, r2
   d6566:	ea81 0303 	eor.w	r3, r1, r3
   d656a:	2d36      	cmp	r5, #54	; 0x36
   d656c:	bf88      	it	hi
   d656e:	bd30      	pophi	{r4, r5, pc}
   d6570:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6574:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6578:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d657c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6580:	d002      	beq.n	d6588 <__adddf3+0x70>
   d6582:	4240      	negs	r0, r0
   d6584:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6588:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d658c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6590:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6594:	d002      	beq.n	d659c <__adddf3+0x84>
   d6596:	4252      	negs	r2, r2
   d6598:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d659c:	ea94 0f05 	teq	r4, r5
   d65a0:	f000 80a7 	beq.w	d66f2 <__adddf3+0x1da>
   d65a4:	f1a4 0401 	sub.w	r4, r4, #1
   d65a8:	f1d5 0e20 	rsbs	lr, r5, #32
   d65ac:	db0d      	blt.n	d65ca <__adddf3+0xb2>
   d65ae:	fa02 fc0e 	lsl.w	ip, r2, lr
   d65b2:	fa22 f205 	lsr.w	r2, r2, r5
   d65b6:	1880      	adds	r0, r0, r2
   d65b8:	f141 0100 	adc.w	r1, r1, #0
   d65bc:	fa03 f20e 	lsl.w	r2, r3, lr
   d65c0:	1880      	adds	r0, r0, r2
   d65c2:	fa43 f305 	asr.w	r3, r3, r5
   d65c6:	4159      	adcs	r1, r3
   d65c8:	e00e      	b.n	d65e8 <__adddf3+0xd0>
   d65ca:	f1a5 0520 	sub.w	r5, r5, #32
   d65ce:	f10e 0e20 	add.w	lr, lr, #32
   d65d2:	2a01      	cmp	r2, #1
   d65d4:	fa03 fc0e 	lsl.w	ip, r3, lr
   d65d8:	bf28      	it	cs
   d65da:	f04c 0c02 	orrcs.w	ip, ip, #2
   d65de:	fa43 f305 	asr.w	r3, r3, r5
   d65e2:	18c0      	adds	r0, r0, r3
   d65e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d65e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d65ec:	d507      	bpl.n	d65fe <__adddf3+0xe6>
   d65ee:	f04f 0e00 	mov.w	lr, #0
   d65f2:	f1dc 0c00 	rsbs	ip, ip, #0
   d65f6:	eb7e 0000 	sbcs.w	r0, lr, r0
   d65fa:	eb6e 0101 	sbc.w	r1, lr, r1
   d65fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6602:	d31b      	bcc.n	d663c <__adddf3+0x124>
   d6604:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6608:	d30c      	bcc.n	d6624 <__adddf3+0x10c>
   d660a:	0849      	lsrs	r1, r1, #1
   d660c:	ea5f 0030 	movs.w	r0, r0, rrx
   d6610:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6614:	f104 0401 	add.w	r4, r4, #1
   d6618:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d661c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6620:	f080 809a 	bcs.w	d6758 <__adddf3+0x240>
   d6624:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6628:	bf08      	it	eq
   d662a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d662e:	f150 0000 	adcs.w	r0, r0, #0
   d6632:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6636:	ea41 0105 	orr.w	r1, r1, r5
   d663a:	bd30      	pop	{r4, r5, pc}
   d663c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6640:	4140      	adcs	r0, r0
   d6642:	eb41 0101 	adc.w	r1, r1, r1
   d6646:	3c01      	subs	r4, #1
   d6648:	bf28      	it	cs
   d664a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d664e:	d2e9      	bcs.n	d6624 <__adddf3+0x10c>
   d6650:	f091 0f00 	teq	r1, #0
   d6654:	bf04      	itt	eq
   d6656:	4601      	moveq	r1, r0
   d6658:	2000      	moveq	r0, #0
   d665a:	fab1 f381 	clz	r3, r1
   d665e:	bf08      	it	eq
   d6660:	3320      	addeq	r3, #32
   d6662:	f1a3 030b 	sub.w	r3, r3, #11
   d6666:	f1b3 0220 	subs.w	r2, r3, #32
   d666a:	da0c      	bge.n	d6686 <__adddf3+0x16e>
   d666c:	320c      	adds	r2, #12
   d666e:	dd08      	ble.n	d6682 <__adddf3+0x16a>
   d6670:	f102 0c14 	add.w	ip, r2, #20
   d6674:	f1c2 020c 	rsb	r2, r2, #12
   d6678:	fa01 f00c 	lsl.w	r0, r1, ip
   d667c:	fa21 f102 	lsr.w	r1, r1, r2
   d6680:	e00c      	b.n	d669c <__adddf3+0x184>
   d6682:	f102 0214 	add.w	r2, r2, #20
   d6686:	bfd8      	it	le
   d6688:	f1c2 0c20 	rsble	ip, r2, #32
   d668c:	fa01 f102 	lsl.w	r1, r1, r2
   d6690:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6694:	bfdc      	itt	le
   d6696:	ea41 010c 	orrle.w	r1, r1, ip
   d669a:	4090      	lslle	r0, r2
   d669c:	1ae4      	subs	r4, r4, r3
   d669e:	bfa2      	ittt	ge
   d66a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d66a4:	4329      	orrge	r1, r5
   d66a6:	bd30      	popge	{r4, r5, pc}
   d66a8:	ea6f 0404 	mvn.w	r4, r4
   d66ac:	3c1f      	subs	r4, #31
   d66ae:	da1c      	bge.n	d66ea <__adddf3+0x1d2>
   d66b0:	340c      	adds	r4, #12
   d66b2:	dc0e      	bgt.n	d66d2 <__adddf3+0x1ba>
   d66b4:	f104 0414 	add.w	r4, r4, #20
   d66b8:	f1c4 0220 	rsb	r2, r4, #32
   d66bc:	fa20 f004 	lsr.w	r0, r0, r4
   d66c0:	fa01 f302 	lsl.w	r3, r1, r2
   d66c4:	ea40 0003 	orr.w	r0, r0, r3
   d66c8:	fa21 f304 	lsr.w	r3, r1, r4
   d66cc:	ea45 0103 	orr.w	r1, r5, r3
   d66d0:	bd30      	pop	{r4, r5, pc}
   d66d2:	f1c4 040c 	rsb	r4, r4, #12
   d66d6:	f1c4 0220 	rsb	r2, r4, #32
   d66da:	fa20 f002 	lsr.w	r0, r0, r2
   d66de:	fa01 f304 	lsl.w	r3, r1, r4
   d66e2:	ea40 0003 	orr.w	r0, r0, r3
   d66e6:	4629      	mov	r1, r5
   d66e8:	bd30      	pop	{r4, r5, pc}
   d66ea:	fa21 f004 	lsr.w	r0, r1, r4
   d66ee:	4629      	mov	r1, r5
   d66f0:	bd30      	pop	{r4, r5, pc}
   d66f2:	f094 0f00 	teq	r4, #0
   d66f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d66fa:	bf06      	itte	eq
   d66fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6700:	3401      	addeq	r4, #1
   d6702:	3d01      	subne	r5, #1
   d6704:	e74e      	b.n	d65a4 <__adddf3+0x8c>
   d6706:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d670a:	bf18      	it	ne
   d670c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6710:	d029      	beq.n	d6766 <__adddf3+0x24e>
   d6712:	ea94 0f05 	teq	r4, r5
   d6716:	bf08      	it	eq
   d6718:	ea90 0f02 	teqeq	r0, r2
   d671c:	d005      	beq.n	d672a <__adddf3+0x212>
   d671e:	ea54 0c00 	orrs.w	ip, r4, r0
   d6722:	bf04      	itt	eq
   d6724:	4619      	moveq	r1, r3
   d6726:	4610      	moveq	r0, r2
   d6728:	bd30      	pop	{r4, r5, pc}
   d672a:	ea91 0f03 	teq	r1, r3
   d672e:	bf1e      	ittt	ne
   d6730:	2100      	movne	r1, #0
   d6732:	2000      	movne	r0, #0
   d6734:	bd30      	popne	{r4, r5, pc}
   d6736:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d673a:	d105      	bne.n	d6748 <__adddf3+0x230>
   d673c:	0040      	lsls	r0, r0, #1
   d673e:	4149      	adcs	r1, r1
   d6740:	bf28      	it	cs
   d6742:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6746:	bd30      	pop	{r4, r5, pc}
   d6748:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d674c:	bf3c      	itt	cc
   d674e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6752:	bd30      	popcc	{r4, r5, pc}
   d6754:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6758:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d675c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6760:	f04f 0000 	mov.w	r0, #0
   d6764:	bd30      	pop	{r4, r5, pc}
   d6766:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d676a:	bf1a      	itte	ne
   d676c:	4619      	movne	r1, r3
   d676e:	4610      	movne	r0, r2
   d6770:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6774:	bf1c      	itt	ne
   d6776:	460b      	movne	r3, r1
   d6778:	4602      	movne	r2, r0
   d677a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d677e:	bf06      	itte	eq
   d6780:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6784:	ea91 0f03 	teqeq	r1, r3
   d6788:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d678c:	bd30      	pop	{r4, r5, pc}
   d678e:	bf00      	nop

000d6790 <__aeabi_ui2d>:
   d6790:	f090 0f00 	teq	r0, #0
   d6794:	bf04      	itt	eq
   d6796:	2100      	moveq	r1, #0
   d6798:	4770      	bxeq	lr
   d679a:	b530      	push	{r4, r5, lr}
   d679c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d67a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d67a4:	f04f 0500 	mov.w	r5, #0
   d67a8:	f04f 0100 	mov.w	r1, #0
   d67ac:	e750      	b.n	d6650 <__adddf3+0x138>
   d67ae:	bf00      	nop

000d67b0 <__aeabi_i2d>:
   d67b0:	f090 0f00 	teq	r0, #0
   d67b4:	bf04      	itt	eq
   d67b6:	2100      	moveq	r1, #0
   d67b8:	4770      	bxeq	lr
   d67ba:	b530      	push	{r4, r5, lr}
   d67bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d67c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d67c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d67c8:	bf48      	it	mi
   d67ca:	4240      	negmi	r0, r0
   d67cc:	f04f 0100 	mov.w	r1, #0
   d67d0:	e73e      	b.n	d6650 <__adddf3+0x138>
   d67d2:	bf00      	nop

000d67d4 <__aeabi_f2d>:
   d67d4:	0042      	lsls	r2, r0, #1
   d67d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d67da:	ea4f 0131 	mov.w	r1, r1, rrx
   d67de:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d67e2:	bf1f      	itttt	ne
   d67e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d67e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d67ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d67f0:	4770      	bxne	lr
   d67f2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d67f6:	bf08      	it	eq
   d67f8:	4770      	bxeq	lr
   d67fa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d67fe:	bf04      	itt	eq
   d6800:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d6804:	4770      	bxeq	lr
   d6806:	b530      	push	{r4, r5, lr}
   d6808:	f44f 7460 	mov.w	r4, #896	; 0x380
   d680c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6810:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6814:	e71c      	b.n	d6650 <__adddf3+0x138>
   d6816:	bf00      	nop

000d6818 <__aeabi_ul2d>:
   d6818:	ea50 0201 	orrs.w	r2, r0, r1
   d681c:	bf08      	it	eq
   d681e:	4770      	bxeq	lr
   d6820:	b530      	push	{r4, r5, lr}
   d6822:	f04f 0500 	mov.w	r5, #0
   d6826:	e00a      	b.n	d683e <__aeabi_l2d+0x16>

000d6828 <__aeabi_l2d>:
   d6828:	ea50 0201 	orrs.w	r2, r0, r1
   d682c:	bf08      	it	eq
   d682e:	4770      	bxeq	lr
   d6830:	b530      	push	{r4, r5, lr}
   d6832:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6836:	d502      	bpl.n	d683e <__aeabi_l2d+0x16>
   d6838:	4240      	negs	r0, r0
   d683a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d683e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6842:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6846:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d684a:	f43f aed8 	beq.w	d65fe <__adddf3+0xe6>
   d684e:	f04f 0203 	mov.w	r2, #3
   d6852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6856:	bf18      	it	ne
   d6858:	3203      	addne	r2, #3
   d685a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d685e:	bf18      	it	ne
   d6860:	3203      	addne	r2, #3
   d6862:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6866:	f1c2 0320 	rsb	r3, r2, #32
   d686a:	fa00 fc03 	lsl.w	ip, r0, r3
   d686e:	fa20 f002 	lsr.w	r0, r0, r2
   d6872:	fa01 fe03 	lsl.w	lr, r1, r3
   d6876:	ea40 000e 	orr.w	r0, r0, lr
   d687a:	fa21 f102 	lsr.w	r1, r1, r2
   d687e:	4414      	add	r4, r2
   d6880:	e6bd      	b.n	d65fe <__adddf3+0xe6>
   d6882:	bf00      	nop

000d6884 <__aeabi_dmul>:
   d6884:	b570      	push	{r4, r5, r6, lr}
   d6886:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d688a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d688e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6892:	bf1d      	ittte	ne
   d6894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6898:	ea94 0f0c 	teqne	r4, ip
   d689c:	ea95 0f0c 	teqne	r5, ip
   d68a0:	f000 f8de 	bleq	d6a60 <__aeabi_dmul+0x1dc>
   d68a4:	442c      	add	r4, r5
   d68a6:	ea81 0603 	eor.w	r6, r1, r3
   d68aa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d68ae:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d68b2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d68b6:	bf18      	it	ne
   d68b8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d68bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d68c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d68c4:	d038      	beq.n	d6938 <__aeabi_dmul+0xb4>
   d68c6:	fba0 ce02 	umull	ip, lr, r0, r2
   d68ca:	f04f 0500 	mov.w	r5, #0
   d68ce:	fbe1 e502 	umlal	lr, r5, r1, r2
   d68d2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d68d6:	fbe0 e503 	umlal	lr, r5, r0, r3
   d68da:	f04f 0600 	mov.w	r6, #0
   d68de:	fbe1 5603 	umlal	r5, r6, r1, r3
   d68e2:	f09c 0f00 	teq	ip, #0
   d68e6:	bf18      	it	ne
   d68e8:	f04e 0e01 	orrne.w	lr, lr, #1
   d68ec:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d68f0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d68f4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d68f8:	d204      	bcs.n	d6904 <__aeabi_dmul+0x80>
   d68fa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d68fe:	416d      	adcs	r5, r5
   d6900:	eb46 0606 	adc.w	r6, r6, r6
   d6904:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6908:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d690c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6910:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6914:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6918:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d691c:	bf88      	it	hi
   d691e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6922:	d81e      	bhi.n	d6962 <__aeabi_dmul+0xde>
   d6924:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6928:	bf08      	it	eq
   d692a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d692e:	f150 0000 	adcs.w	r0, r0, #0
   d6932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6936:	bd70      	pop	{r4, r5, r6, pc}
   d6938:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d693c:	ea46 0101 	orr.w	r1, r6, r1
   d6940:	ea40 0002 	orr.w	r0, r0, r2
   d6944:	ea81 0103 	eor.w	r1, r1, r3
   d6948:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d694c:	bfc2      	ittt	gt
   d694e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6956:	bd70      	popgt	{r4, r5, r6, pc}
   d6958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d695c:	f04f 0e00 	mov.w	lr, #0
   d6960:	3c01      	subs	r4, #1
   d6962:	f300 80ab 	bgt.w	d6abc <__aeabi_dmul+0x238>
   d6966:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d696a:	bfde      	ittt	le
   d696c:	2000      	movle	r0, #0
   d696e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6972:	bd70      	pople	{r4, r5, r6, pc}
   d6974:	f1c4 0400 	rsb	r4, r4, #0
   d6978:	3c20      	subs	r4, #32
   d697a:	da35      	bge.n	d69e8 <__aeabi_dmul+0x164>
   d697c:	340c      	adds	r4, #12
   d697e:	dc1b      	bgt.n	d69b8 <__aeabi_dmul+0x134>
   d6980:	f104 0414 	add.w	r4, r4, #20
   d6984:	f1c4 0520 	rsb	r5, r4, #32
   d6988:	fa00 f305 	lsl.w	r3, r0, r5
   d698c:	fa20 f004 	lsr.w	r0, r0, r4
   d6990:	fa01 f205 	lsl.w	r2, r1, r5
   d6994:	ea40 0002 	orr.w	r0, r0, r2
   d6998:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d699c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d69a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d69a4:	fa21 f604 	lsr.w	r6, r1, r4
   d69a8:	eb42 0106 	adc.w	r1, r2, r6
   d69ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d69b0:	bf08      	it	eq
   d69b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d69b6:	bd70      	pop	{r4, r5, r6, pc}
   d69b8:	f1c4 040c 	rsb	r4, r4, #12
   d69bc:	f1c4 0520 	rsb	r5, r4, #32
   d69c0:	fa00 f304 	lsl.w	r3, r0, r4
   d69c4:	fa20 f005 	lsr.w	r0, r0, r5
   d69c8:	fa01 f204 	lsl.w	r2, r1, r4
   d69cc:	ea40 0002 	orr.w	r0, r0, r2
   d69d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d69d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d69d8:	f141 0100 	adc.w	r1, r1, #0
   d69dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d69e0:	bf08      	it	eq
   d69e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d69e6:	bd70      	pop	{r4, r5, r6, pc}
   d69e8:	f1c4 0520 	rsb	r5, r4, #32
   d69ec:	fa00 f205 	lsl.w	r2, r0, r5
   d69f0:	ea4e 0e02 	orr.w	lr, lr, r2
   d69f4:	fa20 f304 	lsr.w	r3, r0, r4
   d69f8:	fa01 f205 	lsl.w	r2, r1, r5
   d69fc:	ea43 0302 	orr.w	r3, r3, r2
   d6a00:	fa21 f004 	lsr.w	r0, r1, r4
   d6a04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6a08:	fa21 f204 	lsr.w	r2, r1, r4
   d6a0c:	ea20 0002 	bic.w	r0, r0, r2
   d6a10:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6a14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6a18:	bf08      	it	eq
   d6a1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6a1e:	bd70      	pop	{r4, r5, r6, pc}
   d6a20:	f094 0f00 	teq	r4, #0
   d6a24:	d10f      	bne.n	d6a46 <__aeabi_dmul+0x1c2>
   d6a26:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6a2a:	0040      	lsls	r0, r0, #1
   d6a2c:	eb41 0101 	adc.w	r1, r1, r1
   d6a30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6a34:	bf08      	it	eq
   d6a36:	3c01      	subeq	r4, #1
   d6a38:	d0f7      	beq.n	d6a2a <__aeabi_dmul+0x1a6>
   d6a3a:	ea41 0106 	orr.w	r1, r1, r6
   d6a3e:	f095 0f00 	teq	r5, #0
   d6a42:	bf18      	it	ne
   d6a44:	4770      	bxne	lr
   d6a46:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6a4a:	0052      	lsls	r2, r2, #1
   d6a4c:	eb43 0303 	adc.w	r3, r3, r3
   d6a50:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6a54:	bf08      	it	eq
   d6a56:	3d01      	subeq	r5, #1
   d6a58:	d0f7      	beq.n	d6a4a <__aeabi_dmul+0x1c6>
   d6a5a:	ea43 0306 	orr.w	r3, r3, r6
   d6a5e:	4770      	bx	lr
   d6a60:	ea94 0f0c 	teq	r4, ip
   d6a64:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6a68:	bf18      	it	ne
   d6a6a:	ea95 0f0c 	teqne	r5, ip
   d6a6e:	d00c      	beq.n	d6a8a <__aeabi_dmul+0x206>
   d6a70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6a74:	bf18      	it	ne
   d6a76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6a7a:	d1d1      	bne.n	d6a20 <__aeabi_dmul+0x19c>
   d6a7c:	ea81 0103 	eor.w	r1, r1, r3
   d6a80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6a84:	f04f 0000 	mov.w	r0, #0
   d6a88:	bd70      	pop	{r4, r5, r6, pc}
   d6a8a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6a8e:	bf06      	itte	eq
   d6a90:	4610      	moveq	r0, r2
   d6a92:	4619      	moveq	r1, r3
   d6a94:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6a98:	d019      	beq.n	d6ace <__aeabi_dmul+0x24a>
   d6a9a:	ea94 0f0c 	teq	r4, ip
   d6a9e:	d102      	bne.n	d6aa6 <__aeabi_dmul+0x222>
   d6aa0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6aa4:	d113      	bne.n	d6ace <__aeabi_dmul+0x24a>
   d6aa6:	ea95 0f0c 	teq	r5, ip
   d6aaa:	d105      	bne.n	d6ab8 <__aeabi_dmul+0x234>
   d6aac:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6ab0:	bf1c      	itt	ne
   d6ab2:	4610      	movne	r0, r2
   d6ab4:	4619      	movne	r1, r3
   d6ab6:	d10a      	bne.n	d6ace <__aeabi_dmul+0x24a>
   d6ab8:	ea81 0103 	eor.w	r1, r1, r3
   d6abc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6ac0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6ac4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6ac8:	f04f 0000 	mov.w	r0, #0
   d6acc:	bd70      	pop	{r4, r5, r6, pc}
   d6ace:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6ad2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6ad6:	bd70      	pop	{r4, r5, r6, pc}

000d6ad8 <__aeabi_ddiv>:
   d6ad8:	b570      	push	{r4, r5, r6, lr}
   d6ada:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6ade:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6ae2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6ae6:	bf1d      	ittte	ne
   d6ae8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6aec:	ea94 0f0c 	teqne	r4, ip
   d6af0:	ea95 0f0c 	teqne	r5, ip
   d6af4:	f000 f8a7 	bleq	d6c46 <__aeabi_ddiv+0x16e>
   d6af8:	eba4 0405 	sub.w	r4, r4, r5
   d6afc:	ea81 0e03 	eor.w	lr, r1, r3
   d6b00:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6b04:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6b08:	f000 8088 	beq.w	d6c1c <__aeabi_ddiv+0x144>
   d6b0c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6b10:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6b14:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6b18:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6b1c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6b20:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6b24:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6b28:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6b2c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6b30:	429d      	cmp	r5, r3
   d6b32:	bf08      	it	eq
   d6b34:	4296      	cmpeq	r6, r2
   d6b36:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6b3a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6b3e:	d202      	bcs.n	d6b46 <__aeabi_ddiv+0x6e>
   d6b40:	085b      	lsrs	r3, r3, #1
   d6b42:	ea4f 0232 	mov.w	r2, r2, rrx
   d6b46:	1ab6      	subs	r6, r6, r2
   d6b48:	eb65 0503 	sbc.w	r5, r5, r3
   d6b4c:	085b      	lsrs	r3, r3, #1
   d6b4e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6b52:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6b56:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6b5a:	ebb6 0e02 	subs.w	lr, r6, r2
   d6b5e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6b62:	bf22      	ittt	cs
   d6b64:	1ab6      	subcs	r6, r6, r2
   d6b66:	4675      	movcs	r5, lr
   d6b68:	ea40 000c 	orrcs.w	r0, r0, ip
   d6b6c:	085b      	lsrs	r3, r3, #1
   d6b6e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6b72:	ebb6 0e02 	subs.w	lr, r6, r2
   d6b76:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6b7a:	bf22      	ittt	cs
   d6b7c:	1ab6      	subcs	r6, r6, r2
   d6b7e:	4675      	movcs	r5, lr
   d6b80:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6b84:	085b      	lsrs	r3, r3, #1
   d6b86:	ea4f 0232 	mov.w	r2, r2, rrx
   d6b8a:	ebb6 0e02 	subs.w	lr, r6, r2
   d6b8e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6b92:	bf22      	ittt	cs
   d6b94:	1ab6      	subcs	r6, r6, r2
   d6b96:	4675      	movcs	r5, lr
   d6b98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6b9c:	085b      	lsrs	r3, r3, #1
   d6b9e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6ba2:	ebb6 0e02 	subs.w	lr, r6, r2
   d6ba6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6baa:	bf22      	ittt	cs
   d6bac:	1ab6      	subcs	r6, r6, r2
   d6bae:	4675      	movcs	r5, lr
   d6bb0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6bb4:	ea55 0e06 	orrs.w	lr, r5, r6
   d6bb8:	d018      	beq.n	d6bec <__aeabi_ddiv+0x114>
   d6bba:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6bbe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6bc2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6bc6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6bca:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6bce:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6bd2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6bd6:	d1c0      	bne.n	d6b5a <__aeabi_ddiv+0x82>
   d6bd8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6bdc:	d10b      	bne.n	d6bf6 <__aeabi_ddiv+0x11e>
   d6bde:	ea41 0100 	orr.w	r1, r1, r0
   d6be2:	f04f 0000 	mov.w	r0, #0
   d6be6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6bea:	e7b6      	b.n	d6b5a <__aeabi_ddiv+0x82>
   d6bec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6bf0:	bf04      	itt	eq
   d6bf2:	4301      	orreq	r1, r0
   d6bf4:	2000      	moveq	r0, #0
   d6bf6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6bfa:	bf88      	it	hi
   d6bfc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6c00:	f63f aeaf 	bhi.w	d6962 <__aeabi_dmul+0xde>
   d6c04:	ebb5 0c03 	subs.w	ip, r5, r3
   d6c08:	bf04      	itt	eq
   d6c0a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6c0e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6c12:	f150 0000 	adcs.w	r0, r0, #0
   d6c16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6c1a:	bd70      	pop	{r4, r5, r6, pc}
   d6c1c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6c20:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6c24:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6c28:	bfc2      	ittt	gt
   d6c2a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6c2e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6c32:	bd70      	popgt	{r4, r5, r6, pc}
   d6c34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6c38:	f04f 0e00 	mov.w	lr, #0
   d6c3c:	3c01      	subs	r4, #1
   d6c3e:	e690      	b.n	d6962 <__aeabi_dmul+0xde>
   d6c40:	ea45 0e06 	orr.w	lr, r5, r6
   d6c44:	e68d      	b.n	d6962 <__aeabi_dmul+0xde>
   d6c46:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6c4a:	ea94 0f0c 	teq	r4, ip
   d6c4e:	bf08      	it	eq
   d6c50:	ea95 0f0c 	teqeq	r5, ip
   d6c54:	f43f af3b 	beq.w	d6ace <__aeabi_dmul+0x24a>
   d6c58:	ea94 0f0c 	teq	r4, ip
   d6c5c:	d10a      	bne.n	d6c74 <__aeabi_ddiv+0x19c>
   d6c5e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6c62:	f47f af34 	bne.w	d6ace <__aeabi_dmul+0x24a>
   d6c66:	ea95 0f0c 	teq	r5, ip
   d6c6a:	f47f af25 	bne.w	d6ab8 <__aeabi_dmul+0x234>
   d6c6e:	4610      	mov	r0, r2
   d6c70:	4619      	mov	r1, r3
   d6c72:	e72c      	b.n	d6ace <__aeabi_dmul+0x24a>
   d6c74:	ea95 0f0c 	teq	r5, ip
   d6c78:	d106      	bne.n	d6c88 <__aeabi_ddiv+0x1b0>
   d6c7a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6c7e:	f43f aefd 	beq.w	d6a7c <__aeabi_dmul+0x1f8>
   d6c82:	4610      	mov	r0, r2
   d6c84:	4619      	mov	r1, r3
   d6c86:	e722      	b.n	d6ace <__aeabi_dmul+0x24a>
   d6c88:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6c8c:	bf18      	it	ne
   d6c8e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6c92:	f47f aec5 	bne.w	d6a20 <__aeabi_dmul+0x19c>
   d6c96:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6c9a:	f47f af0d 	bne.w	d6ab8 <__aeabi_dmul+0x234>
   d6c9e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6ca2:	f47f aeeb 	bne.w	d6a7c <__aeabi_dmul+0x1f8>
   d6ca6:	e712      	b.n	d6ace <__aeabi_dmul+0x24a>

000d6ca8 <__aeabi_d2uiz>:
   d6ca8:	004a      	lsls	r2, r1, #1
   d6caa:	d211      	bcs.n	d6cd0 <__aeabi_d2uiz+0x28>
   d6cac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6cb0:	d211      	bcs.n	d6cd6 <__aeabi_d2uiz+0x2e>
   d6cb2:	d50d      	bpl.n	d6cd0 <__aeabi_d2uiz+0x28>
   d6cb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6cb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6cbc:	d40e      	bmi.n	d6cdc <__aeabi_d2uiz+0x34>
   d6cbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6cc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6cc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6cca:	fa23 f002 	lsr.w	r0, r3, r2
   d6cce:	4770      	bx	lr
   d6cd0:	f04f 0000 	mov.w	r0, #0
   d6cd4:	4770      	bx	lr
   d6cd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6cda:	d102      	bne.n	d6ce2 <__aeabi_d2uiz+0x3a>
   d6cdc:	f04f 30ff 	mov.w	r0, #4294967295
   d6ce0:	4770      	bx	lr
   d6ce2:	f04f 0000 	mov.w	r0, #0
   d6ce6:	4770      	bx	lr

000d6ce8 <__cxa_atexit>:
   d6ce8:	b510      	push	{r4, lr}
   d6cea:	4c05      	ldr	r4, [pc, #20]	; (d6d00 <__cxa_atexit+0x18>)
   d6cec:	4613      	mov	r3, r2
   d6cee:	b12c      	cbz	r4, d6cfc <__cxa_atexit+0x14>
   d6cf0:	460a      	mov	r2, r1
   d6cf2:	4601      	mov	r1, r0
   d6cf4:	2002      	movs	r0, #2
   d6cf6:	f3af 8000 	nop.w
   d6cfa:	bd10      	pop	{r4, pc}
   d6cfc:	4620      	mov	r0, r4
   d6cfe:	e7fc      	b.n	d6cfa <__cxa_atexit+0x12>
   d6d00:	00000000 	.word	0x00000000

000d6d04 <memcpy>:
   d6d04:	440a      	add	r2, r1
   d6d06:	4291      	cmp	r1, r2
   d6d08:	f100 33ff 	add.w	r3, r0, #4294967295
   d6d0c:	d100      	bne.n	d6d10 <memcpy+0xc>
   d6d0e:	4770      	bx	lr
   d6d10:	b510      	push	{r4, lr}
   d6d12:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6d16:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6d1a:	4291      	cmp	r1, r2
   d6d1c:	d1f9      	bne.n	d6d12 <memcpy+0xe>
   d6d1e:	bd10      	pop	{r4, pc}

000d6d20 <memset>:
   d6d20:	4402      	add	r2, r0
   d6d22:	4603      	mov	r3, r0
   d6d24:	4293      	cmp	r3, r2
   d6d26:	d100      	bne.n	d6d2a <memset+0xa>
   d6d28:	4770      	bx	lr
   d6d2a:	f803 1b01 	strb.w	r1, [r3], #1
   d6d2e:	e7f9      	b.n	d6d24 <memset+0x4>

000d6d30 <srand>:
   d6d30:	b538      	push	{r3, r4, r5, lr}
   d6d32:	4b0d      	ldr	r3, [pc, #52]	; (d6d68 <srand+0x38>)
   d6d34:	681d      	ldr	r5, [r3, #0]
   d6d36:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6d38:	4604      	mov	r4, r0
   d6d3a:	b97b      	cbnz	r3, d6d5c <srand+0x2c>
   d6d3c:	2018      	movs	r0, #24
   d6d3e:	f7fe fdbd 	bl	d58bc <malloc>
   d6d42:	4a0a      	ldr	r2, [pc, #40]	; (d6d6c <srand+0x3c>)
   d6d44:	4b0a      	ldr	r3, [pc, #40]	; (d6d70 <srand+0x40>)
   d6d46:	63a8      	str	r0, [r5, #56]	; 0x38
   d6d48:	e9c0 2300 	strd	r2, r3, [r0]
   d6d4c:	4b09      	ldr	r3, [pc, #36]	; (d6d74 <srand+0x44>)
   d6d4e:	6083      	str	r3, [r0, #8]
   d6d50:	230b      	movs	r3, #11
   d6d52:	8183      	strh	r3, [r0, #12]
   d6d54:	2201      	movs	r2, #1
   d6d56:	2300      	movs	r3, #0
   d6d58:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6d5c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6d5e:	2200      	movs	r2, #0
   d6d60:	611c      	str	r4, [r3, #16]
   d6d62:	615a      	str	r2, [r3, #20]
   d6d64:	bd38      	pop	{r3, r4, r5, pc}
   d6d66:	bf00      	nop
   d6d68:	2003e55c 	.word	0x2003e55c
   d6d6c:	abcd330e 	.word	0xabcd330e
   d6d70:	e66d1234 	.word	0xe66d1234
   d6d74:	0005deec 	.word	0x0005deec

000d6d78 <strlen>:
   d6d78:	4603      	mov	r3, r0
   d6d7a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6d7e:	2a00      	cmp	r2, #0
   d6d80:	d1fb      	bne.n	d6d7a <strlen+0x2>
   d6d82:	1a18      	subs	r0, r3, r0
   d6d84:	3801      	subs	r0, #1
   d6d86:	4770      	bx	lr

000d6d88 <dynalib_user>:
   d6d88:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d6d98:	0000 0000 6f59 2075 6964 6e64 7427 7020     ....You didn't p
   d6da8:	7465 6d20 0065 6f4e 6d72 6c61 6400 6665     et me.Normal.def
   d6db8:	7561 746c 0020 534d 0042 534c 0042 533c     ault .MSB.LSB.<S
   d6dc8:	4950 6553 7474 6e69 7367 6420 6665 7561     PISettings defau
   d6dd8:	746c 003e 533c 4950 6553 7474 6e69 7367     lt>.<SPISettings
   d6de8:	2520 2573 2075 7325 4d20 444f 2545 3e75      %s%u %s MODE%u>
	...

000d6df9 <_ZL4font>:
   d6df9:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   d6e09:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   d6e19:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   d6e29:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   d6e39:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   d6e49:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   d6e59:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   d6e69:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   d6e79:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   d6e89:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   d6e99:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   d6ea9:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   d6eb9:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   d6ec9:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   d6ed9:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   d6ee9:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   d6ef9:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   d6f09:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   d6f19:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   d6f29:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   d6f39:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   d6f49:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   d6f59:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   d6f69:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   d6f79:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   d6f89:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   d6f99:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   d6fa9:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   d6fb9:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   d6fc9:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   d6fd9:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   d6fe9:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   d6ff9:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   d7009:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   d7019:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   d7029:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   d7039:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   d7049:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   d7059:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   d7069:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   d7079:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   d7089:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   d7099:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   d70a9:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   d70b9:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   d70c9:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   d70d9:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   d70e9:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   d70f9:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   d7109:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   d7119:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   d7129:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   d7139:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   d7149:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   d7159:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   d7169:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   d7179:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   d7189:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   d7199:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   d71a9:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   d71b9:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   d71c9:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   d71d9:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   d71e9:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   d71f9:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   d7209:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   d7219:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   d7229:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   d7239:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   d7249:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   d7259:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   d7269:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   d7279:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   d7289:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   d7299:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   d72a9:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   d72b9:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   d72c9:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   d72d9:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   d72e9:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
   d72f9:	0000                                         ...

000d72fc <_ZTV12Adafruit_GFX>:
	...
   d730c:	4955 000d 5b5d 000d 40a1 000d 435d 000d     UI..][...@..]C..
   d731c:	435f 000d 4391 000d 436d 000d 437f 000d     _C...C..mC...C..
   d732c:	42a1 000d 435d 000d 4589 000d 4503 000d     .B..]C...E...E..
   d733c:	43a9 000d 43e7 000d 4421 000d 4467 000d     .C...C..!D..gD..
   d734c:	4505 000d 4483 000d                         .E...D..

000d7354 <_ZTV16OledWingAdafruit>:
	...
   d735c:	4a65 000d 4a85 000d 4955 000d 5b5d 000d     eJ...J..UI..][..
   d736c:	4bb5 000d 435d 000d 435f 000d 4391 000d     .K..]C.._C...C..
   d737c:	436d 000d 437f 000d 42a1 000d 435d 000d     mC...C...B..]C..
   d738c:	4589 000d 4d6f 000d 5303 000d 52b5 000d     .E..oM...S...R..
   d739c:	4421 000d 4467 000d 4505 000d 4483 000d     !D..gD...E...D..

000d73ac <_ZTVN8particle11SPISettingsE>:
	...
   d73b4:	424d 000d 4221 000d 4223 000d               MB..!B..#B..

000d73c0 <_ZL12splash1_data>:
   d73c0:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   d73d0:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   d73e0:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   d73f0:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   d7400:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   d7410:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   d7428:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   d7438:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   d7448:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   d7458:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   d7468:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   d7478:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   d7488:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   d7498:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   d74a8:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   d74b8:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   d74c8:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   d74d8:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   d74e8:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   d74f8:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   d7508:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   d7518:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   d7528:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   d7538:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   d7550:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   d7568:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   d7578:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   d7588:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   d7598:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   d75a8:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   d75b8:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   d75c8:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   d75d8:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   d75e8:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   d75f8:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   d7608:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   d7618:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   d7628:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   d7638:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   d7648:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   d7658:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   d7668:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   d7678:	fdff 5b6b 6adb c0fd                         ..k[.j..

000d7680 <_ZL12splash2_data>:
   d7680:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   d7690:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   d76a0:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   d76bc:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   d76cc:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   d76dc:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   d76ec:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   d76fc:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   d770c:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   d771c:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   d772c:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   d773c:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   d774c:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   d775c:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   d776c:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   d777c:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   d778c:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   d779c:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   d77ac:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   d77bc:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   d77cc:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   d77dc:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   d77ec:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   d77fc:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   d7814:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   d7824:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   d7834:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   d7844:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   d7854:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000d7860 <_ZTV16Adafruit_SSD1306>:
	...
   d7868:	4b89 000d 4ba1 000d 4955 000d 5b5d 000d     .K...K..UI..][..
   d7878:	4bb5 000d 435d 000d 435f 000d 4391 000d     .K..]C.._C...C..
   d7888:	436d 000d 437f 000d 42a1 000d 435d 000d     mC...C...B..]C..
   d7898:	4589 000d 4d6f 000d 5303 000d 52b5 000d     .E..oM...S...R..
   d78a8:	4421 000d 4467 000d 4505 000d 4483 000d     !D..gD...E...D..

000d78b8 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   d78b8:	8000 e0c0 f8f0 fefc                         ........

000d78c0 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   d78c0:	0100 0703 1f0f 7f3f                         ......?.

000d78c8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   d78c8:	d5ae a880                                   ....

000d78cc <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   d78cc:	00d3 8d40                                   ..@.

000d78d0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   d78d0:	0020 c8a1                                    ...

000d78d4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   d78d4:	40db a6a4 af2e                              .@....

000d78da <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   d78da:	02da 8f81                                   ....

000d78de <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   d78de:	12da                                         ...

000d78e1 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   d78e1:	02da                                         ...

000d78e4 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   d78e4:	0022 21ff 0000 0000                         "..!....

000d78ec <_ZTVN5spark13EthernetClassE>:
	...
   d78f4:	595b 000d 5951 000d 5947 000d 593d 000d     [Y..QY..GY..=Y..
   d7904:	5931 000d 5925 000d 6255 000d 625d 000d     1Y..%Y..Ub..]b..
   d7914:	5919 000d 5911 000d 5907 000d 58fd 000d     .Y...Y...Y...X..
   d7924:	628d 000d                                   .b..

000d7928 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d7928:	0800 1810 2820 3830 7061 0070 5925 252d     .... (08app.%Y-%
   d7938:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   d7948:	7361 7463 6d69 0065                         asctime.

000d7950 <_ZTV9IPAddress>:
	...
   d7958:	5e19 000d 5e09 000d 5e0b 000d               .^...^...^..

000d7964 <_ZTV9USBSerial>:
	...
   d796c:	5ef9 000d 5f61 000d 5f37 000d 5b5d 000d     .^..a_..7_..][..
   d797c:	5f29 000d 5efb 000d 5f0b 000d 5f5b 000d     )_...^..._..[_..
   d798c:	5f1b 000d 5ef5 000d                         ._...^..

000d7994 <_ZTV11USARTSerial>:
	...
   d799c:	5ffd 000d 6069 000d 6041 000d 5b5d 000d     ._..i`..A`..][..
   d79ac:	6011 000d 602d 000d 601f 000d 603b 000d     .`..-`...`..;`..
   d79bc:	5fff 000d 6003 000d                         ._...`..

000d79c4 <_ZTV7TwoWire>:
	...
   d79cc:	60f9 000d 6143 000d 611b 000d 60fb 000d     .`..Ca...a...`..
   d79dc:	6123 000d 612b 000d 6133 000d 613b 000d     #a..+a..3a..;a..

000d79ec <_ZTVN5spark9WiFiClassE>:
	...
   d79f4:	61f7 000d 61ed 000d 61e3 000d 61a5 000d     .a...a...a...a..
   d7a04:	5c85 000d 61d7 000d 6255 000d 625d 000d     .\...a..Ub..]b..
   d7a14:	61cb 000d 61c3 000d 61b9 000d 61af 000d     .a...a...a...a..
   d7a24:	628d 000d                                   .b..

000d7a28 <_ZTVN5spark12NetworkClassE>:
	...
   d7a30:	6215 000d 621f 000d 6229 000d 6233 000d     .b...b..)b..3b..
   d7a40:	623d 000d 6249 000d 6255 000d 625d 000d     =b..Ib..Ub..]b..
   d7a50:	6265 000d 6271 000d 6279 000d 6283 000d     eb..qb..yb...b..
   d7a60:	628d 000d                                   .b..

000d7a64 <_ZSt7nothrow>:
	...

000d7a65 <link_const_variable_data_end>:
   d7a65:	00          	.byte	0x00
	...

000d7a68 <link_constructors_location>:
   d7a68:	000d4181 	.word	0x000d4181
   d7a6c:	000d5965 	.word	0x000d5965
   d7a70:	000d5ad5 	.word	0x000d5ad5
   d7a74:	000d5b35 	.word	0x000d5b35
   d7a78:	000d5c91 	.word	0x000d5c91
   d7a7c:	000d5ca1 	.word	0x000d5ca1
   d7a80:	000d5cc9 	.word	0x000d5cc9
   d7a84:	000d6201 	.word	0x000d6201
   d7a88:	000d636d 	.word	0x000d636d

000d7a8c <link_constructors_end>:
   d7a8c:	00000000 	.word	0x00000000
